
/* /web/static/src/js/services/session.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('web.session', function (require) { "use strict"; var Session = require('web.Session'); var modules = odoo._modules; var session = new Session(undefined, undefined, { modules: modules, use_cors: false }); session.is_bound = session.session_bind(); return session; });;

/* /web/static/src/js/public/public_env.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define("web.public_env", function (require) { "use strict"; const commonEnv = require("web.commonEnv"); return commonEnv; });;

/* /web/static/src/js/public/public_crash_manager.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('web.PublicCrashManager', function (require) { "use strict"; const core = require('web.core'); const CrashManager = require('web.CrashManager').CrashManager; const PublicCrashManager = CrashManager.extend({ _displayWarning(message, title, options) { this.displayNotification(Object.assign({}, options, { title, message, sticky: true, })); }, }); core.serviceRegistry.add('crash_manager', PublicCrashManager); return { CrashManager: PublicCrashManager, }; });;

/* /web/static/src/js/public/public_notification.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('web.public.Notification', function (require) { 'use strict'; var Notification = require('web.Notification'); Notification.include({ xmlDependencies: ['/web/static/src/xml/notification.xml'], }); });;

/* /web/static/src/js/public/public_root.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('web.public.root', function (require) {
    'use strict'; var ajax = require('web.ajax'); var dom = require('web.dom'); const env = require('web.public_env'); var session = require('web.session'); var utils = require('web.utils'); var publicWidget = require('web.public.widget'); var publicRootRegistry = new publicWidget.RootWidgetRegistry(); function getLang() { var html = document.documentElement; return (html.getAttribute('lang') || 'en_US').replace('-', '_'); }
    var lang = utils.get_cookie('frontend_lang') || getLang(); var localeDef = ajax.loadJS('/web/webclient/locale/' + lang.replace('-', '_')); var PublicRoot = publicWidget.RootWidget.extend({
        events: _.extend({}, publicWidget.RootWidget.prototype.events || {}, { 'submit .js_website_submit_form': '_onWebsiteFormSubmit', 'click .js_disable_on_click': '_onDisableOnClick', }), custom_events: _.extend({}, publicWidget.RootWidget.prototype.custom_events || {}, { call_service: '_onCallService', context_get: '_onContextGet', main_object_request: '_onMainObjectRequest', widgets_start_request: '_onWidgetsStartRequest', widgets_stop_request: '_onWidgetsStopRequest', }), init: function () { this._super.apply(this, arguments); this.env = env; this.publicWidgets = []; }, willStart: function () { return Promise.all([this._super.apply(this, arguments), session.is_bound, localeDef]); }, start: function () {
            var defs = [this._super.apply(this, arguments), this._startWidgets()]; this.$(".o_image[data-mimetype^='image']").each(function () { var $img = $(this); if (/gif|jpe|jpg|png/.test($img.data('mimetype')) && $img.data('src')) { $img.css('background-image', "url('" + $img.data('src') + "')"); } }); if (window.location.hash.indexOf("scrollTop=") > -1) { this.el.scrollTop = +window.location.hash.match(/scrollTop=([0-9]+)/)[1]; }
            if ($.fn.placeholder) { $('input, textarea').placeholder(); }
            this.$el.children().on('error.datetimepicker', this._onDateTimePickerError.bind(this)); return Promise.all(defs);
        }, _getContext: function (context) { return _.extend({ 'lang': getLang(), }, context || {}); }, _getExtraContext: function (context) { return this._getContext(context); }, _getPublicWidgetsRegistry: function (options) { return publicWidget.registry; }, _getRegistry: function () { return publicRootRegistry; }, _startWidgets: function ($from, options) {
            var self = this; if ($from === undefined) { $from = this.$('#wrapwrap'); if (!$from.length) { $from = this.$el; } }
            if (options === undefined) { options = {}; }
            this._stopWidgets($from); var defs = _.map(this._getPublicWidgetsRegistry(options), function (PublicWidget) { var selector = PublicWidget.prototype.selector || ''; var $target = dom.cssFind($from, selector, true); var defs = _.map($target, function (el) { var widget = new PublicWidget(self, options); self.publicWidgets.push(widget); return widget.attachTo($(el)); }); return Promise.all(defs); }); return Promise.all(defs);
        }, _stopWidgets: function ($from) {
            var removedWidgets = _.map(this.publicWidgets, function (widget) {
                if (!$from || $from.filter(widget.el).length || $from.find(widget.el).length) { widget.destroy(); return widget; }
                return null;
            }); this.publicWidgets = _.difference(this.publicWidgets, removedWidgets);
        }, _onCallService: function (ev) {
            function _computeContext(context, noContextKeys) {
                context = _.extend({}, this._getContext(), context); if (noContextKeys) { context = _.omit(context, noContextKeys); }
                return JSON.parse(JSON.stringify(context));
            }
            const payload = ev.data; let args = payload.args || []; if (payload.service === 'ajax' && payload.method === 'rpc') {
                args = args.concat(ev.target); var route = args[0]; if (_.str.startsWith(route, '/web/dataset/call_kw/')) {
                    var params = args[1]; var options = args[2]; var noContextKeys; if (options) { noContextKeys = options.noContextKeys; args[2] = _.omit(options, 'noContextKeys'); }
                    params.kwargs.context = _computeContext.call(this, params.kwargs.context, noContextKeys);
                }
            } else if (payload.service === 'ajax' && payload.method === 'loadLibs') { args[1] = _computeContext.call(this, args[1]); }
            const service = this.env.services[payload.service]; const result = service[payload.method].apply(service, args); payload.callback(result);
        }, _onContextGet: function (ev) { if (ev.data.extra) { ev.data.callback(this._getExtraContext(ev.data.context)); } else { ev.data.callback(this._getContext(ev.data.context)); } }, _onMainObjectRequest: function (ev) { var repr = $('html').data('main-object'); var m = repr.match(/(.+)\((\d+),(.*)\)/); ev.data.callback({ model: m[1], id: m[2] | 0, }); }, _onWidgetsStartRequest: function (ev) { this._startWidgets(ev.data.$target, ev.data.options).then(ev.data.onSuccess).guardedCatch(ev.data.onFailure); }, _onWidgetsStopRequest: function (ev) { this._stopWidgets(ev.data.$target); }, _onWebsiteFormSubmit: function (ev) { var $buttons = $(ev.currentTarget).find('button[type="submit"], a.a-submit'); _.each($buttons, function (btn) { var $btn = $(btn); $btn.html('<i class="fa fa-spinner fa-spin"></i> ' + $btn.text()); $btn.prop('disabled', true); }); }, _onDisableOnClick: function (ev) { $(ev.currentTarget).addClass('disabled'); }, _onDateTimePickerError: function (ev) { return false; },
    }); return { PublicRoot: PublicRoot, publicRootRegistry: publicRootRegistry, };
});;

/* /website/static/src/js/content/website_root_instance.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('root.widget', function (require) { 'use strict'; const AbstractService = require('web.AbstractService'); const env = require('web.public_env'); var lazyloader = require('web.public.lazyloader'); var websiteRootData = require('website.root'); owl.config.mode = env.isDebug() ? "dev" : "prod"; owl.Component.env = env; AbstractService.prototype.deployServices(env); var websiteRoot = new websiteRootData.WebsiteRoot(null); return lazyloader.allScriptsLoaded.then(function () { return websiteRoot.attachTo(document.body).then(function () { return websiteRoot; }); }); });;

/* /web/static/src/js/public/public_widget.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('web.public.widget', function (require) {
    'use strict'; var Class = require('web.Class'); var dom = require('web.dom'); var mixins = require('web.mixins'); var session = require('web.session'); var Widget = require('web.Widget'); var RootWidget = Widget.extend({ custom_events: _.extend({}, Widget.prototype.custom_events || {}, { 'registry_update': '_onRegistryUpdate', 'get_session': '_onGetSession', }), init: function () { this._super.apply(this, arguments); this._widgets = []; this._listenToUpdates = false; this._getRegistry().setParent(this); }, start: function () { var defs = [this._super.apply(this, arguments)]; defs.push(this._attachComponents()); this._listenToUpdates = true; return Promise.all(defs); }, _attachComponent: function (childInfo, $from) { var self = this; var $elements = dom.cssFind($from || this.$el, childInfo.selector); var defs = _.map($elements, function (element) { var w = new childInfo.Widget(self); self._widgets.push(w); return w.attachTo(element); }); return Promise.all(defs); }, _attachComponents: function ($from) { var self = this; var childInfos = this._getRegistry().get(); var defs = _.map(childInfos, function (childInfo) { return self._attachComponent(childInfo, $from); }); return Promise.all(defs); }, _getRegistry: function () { }, _onGetSession: function (event) { if (event.data.callback) { event.data.callback(session); } }, _onRegistryUpdate: function (ev) { ev.stopPropagation(); if (this._listenToUpdates) { this._attachComponent(ev.data); } }, }); var RootWidgetRegistry = Class.extend(mixins.EventDispatcherMixin, { init: function () { mixins.EventDispatcherMixin.init.call(this); this._registry = []; }, add: function (Widget, selector) { var registryInfo = { Widget: Widget, selector: selector, }; this._registry.push(registryInfo); this.trigger_up('registry_update', registryInfo); }, get: function () { return this._registry; }, }); var PublicWidget = Widget.extend({
        selector: false, events: {}, init: function (parent, options) { this._super.apply(this, arguments); this.options = options || {}; }, destroy: function () {
            if (this.selector) { var $oldel = this.$el; this.setElement(null); }
            this._super.apply(this, arguments); if (this.selector) { this.$el = $oldel; this.el = $oldel[0]; this.$target = this.$el; this.target = this.el; }
        }, setElement: function () { this._super.apply(this, arguments); if (this.selector) { this.$target = this.$el; this.target = this.el; } }, _delegateEvents: function () {
            var self = this; var originalEvents = this.events; var events = {}; _.each(this.events, function (method, event) {
                if (typeof method !== 'string') { events[event] = method; return; }
                var methodOptions = method.split(' '); if (methodOptions.length <= 1) { events[event] = method; return; }
                var isAsync = _.contains(methodOptions, 'async'); if (!isAsync) { events[event] = method; return; }
                method = self.proxy(methodOptions[methodOptions.length - 1]); if (_.str.startsWith(event, 'click')) { method = dom.makeButtonHandler(method); } else { method = dom.makeAsyncHandler(method); }
                events[event] = method;
            }); this.events = events; this._super.apply(this, arguments); this.events = originalEvents;
        }, _getContext: function (extra, extraContext) { var context; this.trigger_up('context_get', { extra: extra || false, context: extraContext, callback: function (ctx) { context = ctx; }, }); return context; },
    }); var registry = {}; registry._fixAppleCollapse = PublicWidget.extend({ selector: 'div[data-toggle="collapse"]', events: { 'click': function () { }, }, }); return { RootWidget: RootWidget, RootWidgetRegistry: RootWidgetRegistry, Widget: PublicWidget, registry: registry, };
});;

/* /web_editor/static/src/js/frontend/loader.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('web_editor.loader', function (require) {
    'use strict'; var Wysiwyg = require('web_editor.wysiwyg.root'); function load(parent, textarea, options) {
        var loading = textarea.nextElementSibling; if (loading && !loading.classList.contains('o_wysiwyg_loading')) { loading = null; }
        if (!textarea.value.match(/\S/)) { textarea.value = '<p><br/></p>'; }
        var wysiwyg = new Wysiwyg(parent, options); return wysiwyg.attachTo(textarea).then(() => {
            if (loading) { loading.parentNode.removeChild(loading); }
            return wysiwyg;
        });
    }
    return { load: load, };
});;

/* /portal/static/src/js/portal.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('portal.portal', function (require) {
    'use strict'; var publicWidget = require('web.public.widget'); const Dialog = require('web.Dialog'); const { _t, qweb } = require('web.core'); const ajax = require('web.ajax'); publicWidget.registry.portalDetails = publicWidget.Widget.extend({ selector: '.o_portal_details', events: { 'change select[name="country_id"]': '_onCountryChange', }, start: function () { var def = this._super.apply(this, arguments); this.$state = this.$('select[name="state_id"]'); this.$stateOptions = this.$state.filter(':enabled').find('option:not(:first)'); this._adaptAddressForm(); return def; }, _adaptAddressForm: function () { var $country = this.$('select[name="country_id"]'); var countryID = ($country.val() || 0); this.$stateOptions.detach(); var $displayedState = this.$stateOptions.filter('[data-country_id=' + countryID + ']'); var nb = $displayedState.appendTo(this.$state).show().length; this.$state.parent().toggle(nb >= 1); }, _onCountryChange: function () { this._adaptAddressForm(); }, }); publicWidget.registry.PortalHomeCounters = publicWidget.Widget.extend({ selector: '.o_portal_my_home', start: function () { var def = this._super.apply(this, arguments); this._updateCounters(); return def; }, async _updateCounters(elem) { const numberRpc = 3; const needed = this.$('[data-placeholder_count]').map((i, o) => $(o).data('placeholder_count')).toArray(); const counterByRpc = Math.ceil(needed.length / numberRpc); const proms = [...Array(Math.min(numberRpc, needed.length)).keys()].map(async i => { await this._rpc({ route: "/my/counters", params: { counters: needed.slice(i * counterByRpc, (i + 1) * counterByRpc) }, }).then(data => { Object.keys(data).map(k => this.$("[data-placeholder_count='" + k + "']").text(data[k])); }); }); return Promise.all(proms); }, }); publicWidget.registry.portalSearchPanel = publicWidget.Widget.extend({ selector: '.o_portal_search_panel', events: { 'click .search-submit': '_onSearchSubmitClick', 'click .dropdown-item': '_onDropdownItemClick', 'keyup input[name="search"]': '_onSearchInputKeyup', }, start: function () { var def = this._super.apply(this, arguments); this._adaptSearchLabel(this.$('.dropdown-item.active')); return def; }, _adaptSearchLabel: function (elem) { var $label = $(elem).clone(); $label.find('span.nolabel').remove(); this.$('input[name="search"]').attr('placeholder', $label.text().trim()); }, _search: function () { var search = $.deparam(window.location.search.substring(1)); search['search_in'] = this.$('.dropdown-item.active').attr('href').replace('#', ''); search['search'] = this.$('input[name="search"]').val(); window.location.search = $.param(search); }, _onSearchSubmitClick: function () { this._search(); }, _onDropdownItemClick: function (ev) { ev.preventDefault(); var $item = $(ev.currentTarget); $item.closest('.dropdown-menu').find('.dropdown-item').removeClass('active'); $item.addClass('active'); this._adaptSearchLabel(ev.currentTarget); }, _onSearchInputKeyup: function (ev) { if (ev.keyCode === $.ui.keyCode.ENTER) { this._search(); } }, }); function handleCheckIdentity(rpc, wrapped) {
        return wrapped.then((r) => {
            if (!_.isMatch(r, { type: 'ir.actions.act_window', res_model: 'res.users.identitycheck' })) { return r; }
            const check_id = r.res_id; return ajax.loadXML('/portal/static/src/xml/portal_security.xml', qweb).then(() => new Promise((resolve, reject) => {
                const d = new Dialog(null, {
                    title: _t("Security Control"), $content: qweb.render('portal.identitycheck'), buttons: [{
                        text: _t("Confirm Password"), classes: 'btn btn-primary', click() {
                            const password_input = this.el.querySelector('[name=password]'); if (!password_input.reportValidity()) { password_input.classList.add('is-invalid'); return; }
                            return rpc({ model: 'res.users.identitycheck', method: 'write', args: [check_id, { password: password_input.value }] }).then(() => rpc({ model: 'res.users.identitycheck', method: 'run_check', args: [check_id] })).then((r) => { this.close(); resolve(r); }, (err) => { err.event.preventDefault(); password_input.classList.add('is-invalid'); password_input.setCustomValidity(_t("Check failed")); password_input.reportValidity(); });
                        }
                    }, { text: _t('Cancel'), close: true }, { text: _t('Forgot password?'), classes: 'btn btn-link', click() { window.location.href = "/web/reset_password/"; } }]
                }).on('close', null, () => { reject(); }); d.opened(() => { const pw = d.el.querySelector('[name="password"]'); pw.focus(); pw.addEventListener('input', () => { pw.classList.remove('is-invalid'); pw.setCustomValidity(''); }); d.el.addEventListener('submit', (e) => { e.preventDefault(); d.$footer.find('.btn-primary').click(); }); }); d.open();
            }));
        });
    }
    return { handleCheckIdentity, }
});;

/* /portal/static/src/js/portal_chatter.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('portal.chatter', function (require) {
    'use strict'; var core = require('web.core'); const dom = require('web.dom'); var publicWidget = require('web.public.widget'); var time = require('web.time'); var portalComposer = require('portal.composer'); var qweb = core.qweb; var _t = core._t; var PortalChatter = publicWidget.Widget.extend({
        template: 'portal.Chatter', xmlDependencies: ['/portal/static/src/xml/portal_chatter.xml'], events: { 'click .o_portal_chatter_pager_btn': '_onClickPager', 'click .o_portal_chatter_js_is_internal': 'async _onClickUpdateIsInternal', }, init: function (parent, options) { var self = this; this.options = {}; this._super.apply(this, arguments); _.each(options, function (val, key) { self.options[_.str.underscored(key)] = val; }); this.options = _.defaults(this.options, { 'allow_composer': true, 'display_composer': false, 'csrf_token': odoo.csrf_token, 'message_count': 0, 'pager_step': 10, 'pager_scope': 5, 'pager_start': 1, 'is_user_public': true, 'is_user_employee': false, 'is_user_publisher': false, 'hash': false, 'pid': false, 'domain': [], }); this.set('messages', []); this.set('message_count', this.options['message_count']); this.set('pager', {}); this.set('domain', this.options['domain']); this._currentPage = this.options['pager_start']; }, willStart: function () { return Promise.all([this._super.apply(this, arguments), this._chatterInit()]); }, start: function () {
            this.on("change:messages", this, this._renderMessages); this.on("change:message_count", this, function () { this._renderMessageCount(); this.set('pager', this._pager(this._currentPage)); }); this.on("change:pager", this, this._renderPager); this.on("change:domain", this, this._onChangeDomain); this.set('message_count', this.options['message_count']); this.set('messages', this.preprocessMessages(this.result['messages'])); var defs = []; defs.push(this._super.apply(this, arguments)); if (this.options['display_composer']) { this._composer = new portalComposer.PortalComposer(this, this.options); defs.push(this._composer.replace(this.$('.o_portal_chatter_composer'))); }
            return Promise.all(defs);
        }, messageFetch: function (domain) { var self = this; return this._rpc({ route: '/mail/chatter_fetch', params: self._messageFetchPrepareParams(), }).then(function (result) { self.set('messages', self.preprocessMessages(result['messages'])); self.set('message_count', result['message_count']); }); }, preprocessMessages: function (messages) { _.each(messages, function (m) { m['author_avatar_url'] = _.str.sprintf('/web/image/%s/%s/author_avatar/50x50', 'mail.message', m.id); m['published_date_str'] = _.str.sprintf(_t('Published on %s'), moment(time.str_to_datetime(m.date)).format('MMMM Do YYYY, h:mm:ss a')); }); return messages; }, _chatterInit: function () { var self = this; return this._rpc({ route: '/mail/chatter_init', params: this._messageFetchPrepareParams() }).then(function (result) { self.result = result; self.options = _.extend(self.options, self.result['options'] || {}); return result; }); }, _changeCurrentPage: function (page, domain) { this._currentPage = page; var d = domain ? domain : _.clone(this.get('domain')); this.set('domain', d); }, _messageFetchPrepareParams: function () {
            var self = this; var data = { 'res_model': this.options['res_model'], 'res_id': this.options['res_id'], 'limit': this.options['pager_step'], 'offset': (this._currentPage - 1) * this.options['pager_step'], 'allow_composer': this.options['allow_composer'], }; if (self.options['token']) { data['token'] = self.options['token']; }
            if (this.get('domain')) { data['domain'] = this.get('domain'); }
            return data;
        }, _pager: function (page) {
            page = page || 1; var total = this.get('message_count'); var scope = this.options['pager_scope']; var step = this.options['pager_step']; var pageCount = Math.ceil(parseFloat(total) / step); page = Math.max(1, Math.min(parseInt(page), pageCount)); scope -= 1; var pmin = Math.max(page - parseInt(Math.floor(scope / 2)), 1); var pmax = Math.min(pmin + scope, pageCount); if (pmax - scope > 0) { pmin = pmax - scope; } else { pmin = 1; }
            var pages = []; _.each(_.range(pmin, pmax + 1), function (index) { pages.push(index); }); return { "page_count": pageCount, "offset": (page - 1) * step, "page": page, "page_start": pmin, "page_previous": Math.max(pmin, page - 1), "page_next": Math.min(pmax, page + 1), "page_end": pmax, "pages": pages };
        }, _renderMessages: function () { this.$('.o_portal_chatter_messages').html(qweb.render("portal.chatter_messages", { widget: this })); }, _renderMessageCount: function () { this.$('.o_message_counter').replaceWith(qweb.render("portal.chatter_message_count", { widget: this })); }, _renderPager: function () { this.$('.o_portal_chatter_pager').replaceWith(qweb.render("portal.pager", { widget: this })); }, _onChangeDomain: function () { var self = this; this.messageFetch().then(function () { var p = self._currentPage; self.set('pager', self._pager(p)); }); }, _onClickPager: function (ev) { ev.preventDefault(); var page = $(ev.currentTarget).data('page'); this._changeCurrentPage(page); }, _onClickUpdateIsInternal: function (ev) { ev.preventDefault(); var $elem = $(ev.currentTarget); return this._rpc({ route: '/mail/update_is_internal', params: { message_id: $elem.data('message-id'), is_internal: !$elem.data('is-internal'), }, }).then(function (result) { $elem.data('is-internal', result); if (result === true) { $elem.addClass('o_portal_message_internal_on'); $elem.removeClass('o_portal_message_internal_off'); } else { $elem.addClass('o_portal_message_internal_off'); $elem.removeClass('o_portal_message_internal_on'); } }); },
    }); publicWidget.registry.portalChatter = publicWidget.Widget.extend({ selector: '.o_portal_chatter', async start() { const proms = [this._super.apply(this, arguments)]; const chatter = new PortalChatter(this, this.$el.data()); proms.push(chatter.appendTo(this.$el)); await Promise.all(proms); if (window.location.hash === `#${this.el.id}`) { dom.scrollTo(this.el, { duration: 0 }); } }, }); return { PortalChatter: PortalChatter, };
});;

/* /portal/static/src/js/portal_composer.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('portal.composer', function (require) {
    'use strict'; var ajax = require('web.ajax'); var core = require('web.core'); var publicWidget = require('web.public.widget'); var qweb = core.qweb; var _t = core._t; var PortalComposer = publicWidget.Widget.extend({
        template: 'portal.Composer', xmlDependencies: ['/portal/static/src/xml/portal_chatter.xml'], events: { 'change .o_portal_chatter_file_input': '_onFileInputChange', 'click .o_portal_chatter_attachment_btn': '_onAttachmentButtonClick', 'click .o_portal_chatter_attachment_delete': 'async _onAttachmentDeleteClick', 'click .o_portal_chatter_composer_btn': 'async _onSubmitButtonClick', }, init: function (parent, options) { this._super.apply(this, arguments); this.options = _.defaults(options || {}, { 'allow_composer': true, 'display_composer': false, 'csrf_token': odoo.csrf_token, 'token': false, 'res_model': false, 'res_id': false, }); this.attachments = []; }, start: function () {
            var self = this; this.$attachmentButton = this.$('.o_portal_chatter_attachment_btn'); this.$fileInput = this.$('.o_portal_chatter_file_input'); this.$sendButton = this.$('.o_portal_chatter_composer_btn'); this.$attachments = this.$('.o_portal_chatter_composer_form .o_portal_chatter_attachments'); this.$attachmentIds = this.$('.o_portal_chatter_attachment_ids'); this.$attachmentTokens = this.$('.o_portal_chatter_attachment_tokens'); return this._super.apply(this, arguments).then(function () {
                if (self.options.default_attachment_ids) { self.attachments = self.options.default_attachment_ids || []; _.each(self.attachments, function (attachment) { attachment.state = 'done'; }); self._updateAttachments(); }
                return Promise.resolve();
            });
        }, _onAttachmentButtonClick: function () { this.$fileInput.click(); }, _onAttachmentDeleteClick: function (ev) { var self = this; var attachmentId = $(ev.currentTarget).closest('.o_portal_chatter_attachment').data('id'); var accessToken = _.find(this.attachments, { 'id': attachmentId }).access_token; ev.preventDefault(); ev.stopPropagation(); this.$sendButton.prop('disabled', true); return this._rpc({ route: '/portal/attachment/remove', params: { 'attachment_id': attachmentId, 'access_token': accessToken, }, }).then(function () { self.attachments = _.reject(self.attachments, { 'id': attachmentId }); self._updateAttachments(); self.$sendButton.prop('disabled', false); }); }, _onFileInputChange: function () { var self = this; this.$sendButton.prop('disabled', true); return Promise.all(_.map(this.$fileInput[0].files, function (file) { return new Promise(function (resolve, reject) { var data = { 'name': file.name, 'file': file, 'res_id': self.options.res_id, 'res_model': self.options.res_model, 'access_token': self.options.token, }; ajax.post('/portal/attachment/add', data).then(function (attachment) { attachment.state = 'pending'; self.attachments.push(attachment); self._updateAttachments(); resolve(); }).guardedCatch(function (error) { self.displayNotification({ message: _.str.sprintf(_t("Could not save file <strong>%s</strong>"), _.escape(file.name)), type: 'warning', sticky: true, }); resolve(); }); }); })).then(function () { self.$fileInput[0].value = null; self.$sendButton.prop('disabled', false); }); }, _onSubmitButtonClick: function () { return new Promise(function (resolve, reject) { }); }, _updateAttachments: function () { this.$attachmentIds.val(_.pluck(this.attachments, 'id')); this.$attachmentTokens.val(_.pluck(this.attachments, 'access_token')); this.$attachments.html(qweb.render('portal.Chatter.Attachments', { attachments: this.attachments, showDelete: true, })); },
    }); return { PortalComposer: PortalComposer, };
});;

/* /portal/static/src/js/portal_signature.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('portal.signature_form', function (require) {
    'use strict'; var core = require('web.core'); var publicWidget = require('web.public.widget'); var NameAndSignature = require('web.name_and_signature').NameAndSignature; var qweb = core.qweb; var _t = core._t; var SignatureForm = publicWidget.Widget.extend({
        template: 'portal.portal_signature', xmlDependencies: ['/portal/static/src/xml/portal_signature.xml'], events: { 'click .o_portal_sign_submit': 'async _onClickSignSubmit', }, custom_events: { 'signature_changed': '_onChangeSignature', }, init: function (parent, options) { this._super.apply(this, arguments); this.csrf_token = odoo.csrf_token; this.callUrl = options.callUrl || ''; this.rpcParams = options.rpcParams || {}; this.sendLabel = options.sendLabel || _t("Accept & Sign"); this.nameAndSignature = new NameAndSignature(this, options.nameAndSignatureOptions || {}); }, start: function () { var self = this; this.$confirm_btn = this.$('.o_portal_sign_submit'); this.$controls = this.$('.o_portal_sign_controls'); var subWidgetStart = this.nameAndSignature.replace(this.$('.o_web_sign_name_and_signature')); return Promise.all([subWidgetStart, this._super.apply(this, arguments)]).then(function () { self.nameAndSignature.resetSignature(); }); }, focusName: function () { this.nameAndSignature.focusName(); }, resetSignature: function () { return this.nameAndSignature.resetSignature(); }, _onClickSignSubmit: function (ev) {
            var self = this; ev.preventDefault(); if (!this.nameAndSignature.validateSignature()) { return; }
            var name = this.nameAndSignature.getName(); var signature = this.nameAndSignature.getSignatureImage()[1]; return this._rpc({ route: this.callUrl, params: _.extend(this.rpcParams, { 'name': name, 'signature': signature, }), }).then(function (data) {
                if (data.error) { self.$('.o_portal_sign_error_msg').remove(); self.$controls.prepend(qweb.render('portal.portal_signature_error', { widget: data })); } else if (data.success) { var $success = qweb.render('portal.portal_signature_success', { widget: data }); self.$el.empty().append($success); }
                if (data.force_refresh) {
                    if (data.redirect_url) { window.location = data.redirect_url; } else { window.location.reload(); }
                    return new Promise(function () { });
                }
            });
        }, _onChangeSignature: function () { var isEmpty = this.nameAndSignature.isSignatureEmpty(); this.$confirm_btn.prop('disabled', isEmpty); },
    }); publicWidget.registry.SignatureForm = publicWidget.Widget.extend({ selector: '.o_portal_signature_form', start: function () { var hasBeenReset = false; var callUrl = this.$el.data('call-url'); var nameAndSignatureOptions = { defaultName: this.$el.data('default-name'), mode: this.$el.data('mode'), displaySignatureRatio: this.$el.data('signature-ratio'), signatureType: this.$el.data('signature-type'), fontColor: this.$el.data('font-color') || 'black', }; var sendLabel = this.$el.data('send-label'); var form = new SignatureForm(this, { callUrl: callUrl, nameAndSignatureOptions: nameAndSignatureOptions, sendLabel: sendLabel, }); this.$el.closest('.modal').on('shown.bs.modal', function (ev) { if (!hasBeenReset) { hasBeenReset = true; form.resetSignature(); } else { form.focusName(); } }); return Promise.all([this._super.apply(this, arguments), form.appendTo(this.$el)]); }, }); return { SignatureForm: SignatureForm, };
});;

/* /portal/static/src/js/portal_sidebar.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('portal.PortalSidebar', function (require) {
    'use strict'; var core = require('web.core'); var publicWidget = require('web.public.widget'); var time = require('web.time'); var session = require('web.session'); var _t = core._t; var PortalSidebar = publicWidget.Widget.extend({
        start: function () { this._setDelayLabel(); return this._super.apply(this, arguments); }, _setDelayLabel: function () {
            var $sidebarTimeago = this.$el.find('.o_portal_sidebar_timeago'); _.each($sidebarTimeago, function (el) {
                var dateTime = moment(time.auto_str_to_date($(el).attr('datetime'))), today = moment().startOf('day'), diff = dateTime.diff(today, 'days', true), displayStr; session.is_bound.then(function () {
                    if (diff === 0) { displayStr = _t('Due today'); } else if (diff > 0) { displayStr = _.str.sprintf(_t('Due in %1d days'), Math.abs(diff)); } else { displayStr = _.str.sprintf(_t('%1d days overdue'), Math.abs(diff)); }
                    $(el).text(displayStr);
                });
            });
        }, _printIframeContent: function (href) {
            if ($.browser.mozilla) { window.open(href, '_blank'); return; }
            if (!this.printContent) { this.printContent = $('<iframe id="print_iframe_content" src="' + href + '" style="display:none"></iframe>'); this.$el.append(this.printContent); this.printContent.on('load', function () { $(this).get(0).contentWindow.print(); }); } else { this.printContent.get(0).contentWindow.print(); }
        },
    }); return PortalSidebar;
});;

/* /auth_totp_portal/static/src/js/totp_frontend.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('auth_totp_portal.button', function (require) {
    'use strict'; const { _t } = require('web.core'); const publicWidget = require('web.public.widget'); const Dialog = require('web.Dialog'); const { handleCheckIdentity } = require('portal.portal'); function fromField(f, record) { switch (f.getAttribute('name')) { case 'qrcode': const qrcode = document.createElement('img'); qrcode.setAttribute('class', 'img img-fluid offset-1'); qrcode.setAttribute('src', 'data:image/png;base64,' + record['qrcode']); return qrcode; case 'url': const url = document.createElement('a'); url.setAttribute('href', record['url']); url.textContent = f.getAttribute('text') || record['url']; return url; case 'code': const code = document.createElement('input'); code.setAttribute('name', 'code'); code.setAttribute('class', 'form-control col-10 col-md-6'); code.setAttribute('placeholder', '6-digit code'); code.required = true; code.maxLength = 6; code.minLength = 6; return code; default: return document.createTextNode(record[f.getAttribute('name')] || ''); } }
    function fixupViewBody(oldNode, record) {
        let qrcode = null, code = null, node = null; switch (oldNode.nodeType) {
            case 1: if (oldNode.tagName === 'field') {
                node = fromField(oldNode, record); switch (oldNode.getAttribute('name')) { case 'qrcode': qrcode = node; break; case 'code': code = node; break }
                break;
            }
                node = document.createElement(oldNode.tagName); for (let i = 0; i < oldNode.attributes.length; ++i) { const attr = oldNode.attributes[i]; node.setAttribute(attr.name, attr.value); }
                for (let j = 0; j < oldNode.childNodes.length; ++j) {
                    const [ch, qr, co] = fixupViewBody(oldNode.childNodes[j], record); if (ch) { node.appendChild(ch); }
                    if (qr) { qrcode = qr; }
                    if (co) { code = co; }
                }
                break; case 3: case 4: node = document.createTextNode(oldNode.data); break; default:
        }
        return [node, qrcode, code]
    }
    class Button {
        constructor(parent, model, record_id, input_node, button_node) { this._parent = parent; this.model = model; this.record_id = record_id; this.input = input_node; this.text = button_node.getAttribute('string'); this.classes = button_node.getAttribute('class') || null; this.action = button_node.getAttribute('name'); if (button_node.getAttribute('special') === 'cancel') { this.close = true; this.click = null; } else { this.close = false; this.click = this._click.bind(this); } }
        async _click() {
            if (!this.input.reportValidity()) { this.input.classList.add('is-invalid'); return; }
            try { await this.callAction(this.record_id, { code: this.input.value }); } catch (e) { this.input.classList.add('is-invalid'); this.input.setCustomValidity(e.message); this.input.reportValidity(); return; }
            this.input.classList.remove('is-invalid'); window.location = window.location;
        }
        async callAction(id, update) { try { await this._parent._rpc({ model: this.model, method: 'write', args: [id, update] }); await handleCheckIdentity(this._parent.proxy('_rpc'), this._parent._rpc({ model: this.model, method: this.action, args: [id] })); } catch (e) { e.event.preventDefault(); throw new Error(!e.message ? e.toString() : !e.message.data ? e.message.message : e.message.data.message || _t("Operation failed for unknown reason.")); } }
    }
    publicWidget.registry.TOTPButton = publicWidget.Widget.extend({
        selector: '#auth_totp_portal_enable', events: { click: '_onClick', }, async _onClick(e) {
            e.preventDefault(); const w = await handleCheckIdentity(this.proxy('_rpc'), this._rpc({ model: 'res.users', method: 'totp_enable_wizard', args: [this.getSession().user_id] })); if (!w) { window.location = window.location; return; }
            const { res_model: model, res_id: wizard_id } = w; const record = await this._rpc({ model, method: 'read', args: [wizard_id, []] }).then(ar => ar[0]); const doc = new DOMParser().parseFromString(document.getElementById('totp_wizard_view').textContent, 'application/xhtml+xml'); const xmlBody = doc.querySelector('sheet *'); const [body, , codeInput] = fixupViewBody(xmlBody, record); codeInput.addEventListener('input', () => codeInput.setCustomValidity('')); const buttons = []; for (const button of doc.querySelectorAll('footer button')) { buttons.push(new Button(this, model, record.id, codeInput, button)); }
            const $content = document.createElement('form'); $content.appendChild(body); $content.addEventListener('submit', (e) => { e.preventDefault(); dialog.$footer.find('.btn-primary').click(); }); var dialog = new Dialog(this, { $content, buttons }).open();
        }
    }); publicWidget.registry.DisableTOTPButton = publicWidget.Widget.extend({
        selector: '#auth_totp_portal_disable', events: { click: '_onClick' }, async _onClick(e) {
            e.preventDefault(); await handleCheckIdentity(this.proxy('_rpc'), this._rpc({ model: 'res.users', method: 'totp_disable', args: [this.getSession().user_id] }))
            window.location = window.location;
        }
    }); publicWidget.registry.RevokeTrustedDeviceButton = publicWidget.Widget.extend({ selector: '.fa.fa-trash.text-danger', events: { click: '_onClick' }, async _onClick(e) { e.preventDefault(); await handleCheckIdentity(this.proxy('_rpc'), this._rpc({ model: 'res.users.apikeys', method: 'remove', args: [parseInt(this.target.id)] })); window.location = window.location; } }); publicWidget.registry.RevokeAllTrustedDevicesButton = publicWidget.Widget.extend({ selector: '#auth_totp_portal_revoke_all_devices', events: { click: '_onClick' }, async _onClick(e) { e.preventDefault(); await handleCheckIdentity(this.proxy('_rpc'), this._rpc({ model: 'res.users', method: 'revoke_all_devices', args: [this.getSession().user_id] })); window.location = window.location; } });
});;

/* /website/static/src/js/utils.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website.utils', function (require) {
    'use strict'; var ajax = require('web.ajax'); var core = require('web.core'); var qweb = core.qweb; function loadAnchors(url) { return new Promise(function (resolve, reject) { if (url === window.location.pathname || url[0] === '#') { resolve(document.body.outerHTML); } else if (url.length && !url.startsWith("http")) { $.get(window.location.origin + url).then(resolve, reject); } else { resolve(); } }).then(function (response) { return _.map($(response).find('[id][data-anchor=true]'), function (el) { return '#' + el.id; }); }).catch(error => { console.debug(error); return []; }); }
    function autocompleteWithPages(self, $input, options) {
        $.widget("website.urlcomplete", $.ui.autocomplete, {
            options: options || {}, _create: function () { this._super(); this.widget().menu("option", "items", "> :not(.ui-autocomplete-category)"); }, _renderMenu: function (ul, items) {
                const self = this; items.forEach(item => {
                    if (item.separator) { self._renderSeparator(ul, item); }
                    else { self._renderItem(ul, item); }
                });
            }, _renderSeparator: function (ul, item) { return $("<li class='ui-autocomplete-category font-weight-bold text-capitalize p-2'>").append(`<div>${item.separator}</div>`).appendTo(ul); }, _renderItem: function (ul, item) { return $("<li>").data('ui-autocomplete-item', item).append(`<div>${item.label}</div>`).appendTo(ul); },
        }); $input.urlcomplete({ source: function (request, response) { if (request.term[0] === '#') { loadAnchors(request.term).then(function (anchors) { response(anchors); }); } else if (request.term.startsWith('http') || request.term.length === 0) { response(); } else { return self._rpc({ route: '/website/get_suggested_links', params: { needle: request.term, limit: 15, } }).then(function (res) { let choices = res.matching_pages; res.others.forEach(other => { if (other.values.length) { choices = choices.concat([{ separator: other.title }], other.values,); } }); response(choices); }); } }, select: function (ev, ui) { ev.target.value = ui.item.value; self.trigger_up('website_url_chosen'); ev.preventDefault(); }, });
    }
    function onceAllImagesLoaded($element, $excluded) {
        var defs = _.map($element.find('img').addBack('img'), function (img) {
            if (img.complete || $excluded && ($excluded.is(img) || $excluded.has(img).length)) { return; }
            var def = new Promise(function (resolve, reject) { $(img).one('load', function () { resolve(); }); }); return def;
        }); return Promise.all(defs);
    }
    function prompt(options, _qweb) {
        if (typeof options === 'string') { options = { text: options }; }
        var xmlDef; if (_.isUndefined(_qweb)) { _qweb = 'website.prompt'; xmlDef = ajax.loadXML('/website/static/src/xml/website.xml', core.qweb); }
        options = _.extend({ window_title: '', field_name: '', 'default': '', init: function () { }, }, options || {}); var type = _.intersection(Object.keys(options), ['input', 'textarea', 'select']); type = type.length ? type[0] : 'input'; options.field_type = type; options.field_name = options.field_name || options[type]; var def = new Promise(function (resolve, reject) {
            Promise.resolve(xmlDef).then(function () {
                var dialog = $(qweb.render(_qweb, options)).appendTo('body'); options.$dialog = dialog; var field = dialog.find(options.field_type).first(); field.val(options['default']); field.fillWith = function (data) { if (field.is('select')) { var select = field[0]; data.forEach(function (item) { select.options[select.options.length] = new window.Option(item[1], item[0]); }); } else { field.val(data); } }; var init = options.init(field, dialog); Promise.resolve(init).then(function (fill) {
                    if (fill) { field.fillWith(fill); }
                    dialog.modal('show'); field.focus(); dialog.on('click', '.btn-primary', function () { var backdrop = $('.modal-backdrop'); resolve({ val: field.val(), field: field, dialog: dialog }); dialog.modal('hide').remove(); backdrop.remove(); });
                }); dialog.on('hidden.bs.modal', function () { var backdrop = $('.modal-backdrop'); reject(); dialog.remove(); backdrop.remove(); }); if (field.is('input[type="text"], select')) { field.keypress(function (e) { if (e.which === 13) { e.preventDefault(); dialog.find('.btn-primary').trigger('click'); } }); }
            });
        }); return def;
    }
    function websiteDomain(self) { var websiteID; self.trigger_up('context_get', { callback: function (ctx) { websiteID = ctx['website_id']; }, }); return ['|', ['website_id', '=', false], ['website_id', '=', websiteID]]; }
    function sendRequest(route, params) {
        function _addInput(form, name, value) { let param = document.createElement('input'); param.setAttribute('type', 'hidden'); param.setAttribute('name', name); param.setAttribute('value', value); form.appendChild(param); }
        let form = document.createElement('form'); form.setAttribute('action', route); form.setAttribute('method', params.method || 'POST'); if (core.csrf_token) { _addInput(form, 'csrf_token', core.csrf_token); }
        for (const key in params) { const value = params[key]; if (Array.isArray(value) && value.length) { for (const val of value) { _addInput(form, key, val); } } else { _addInput(form, key, value); } }
        document.body.appendChild(form); form.submit();
    }
    function removeLoader() { const $loader = $('#o_website_page_loader'); if ($loader) { $loader.remove(); } }
    function svgToPNG(src, noAsync = false) {
        function checkImg(imgEl) { return (imgEl.naturalHeight !== 0); }
        function toPNGViaCanvas(imgEl) { const canvas = document.createElement('canvas'); canvas.width = imgEl.width; canvas.height = imgEl.height; canvas.getContext('2d').drawImage(imgEl, 0, 0); return canvas.toDataURL('image/png'); }
        if (src instanceof HTMLImageElement) {
            const loadedImgEl = src; if (noAsync || checkImg(loadedImgEl)) { return toPNGViaCanvas(loadedImgEl); }
            src = loadedImgEl.src;
        }
        return new Promise(resolve => {
            const imgEl = new Image(); imgEl.onload = () => {
                if (checkImg(imgEl)) { resolve(imgEl); return; }
                imgEl.height = 1000; imgEl.style.opacity = 0; document.body.appendChild(imgEl); const request = new XMLHttpRequest(); request.open('GET', imgEl.src, true); request.onload = () => { const parser = new DOMParser(); const result = parser.parseFromString(request.responseText, 'text/xml'); const svgEl = result.getElementsByTagName("svg")[0]; svgEl.setAttribute('width', imgEl.width); svgEl.setAttribute('height', imgEl.height); imgEl.remove(); const svg64 = btoa(new XMLSerializer().serializeToString(svgEl)); const finalImg = new Image(); finalImg.onload = () => { resolve(finalImg); }; finalImg.src = `data:image/svg+xml;base64,${svg64}`; }; request.send();
            }; imgEl.src = src;
        }).then(loadedImgEl => toPNGViaCanvas(loadedImgEl));
    }
    return { loadAnchors: loadAnchors, autocompleteWithPages: autocompleteWithPages, onceAllImagesLoaded: onceAllImagesLoaded, prompt: prompt, sendRequest: sendRequest, websiteDomain: websiteDomain, removeLoader: removeLoader, svgToPNG: svgToPNG, };
});;

/* /website/static/src/js/content/website_root.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website.root', function (require) {
    'use strict'; const ajax = require('web.ajax'); const { _t } = require('web.core'); var Dialog = require('web.Dialog'); const KeyboardNavigationMixin = require('web.KeyboardNavigationMixin'); const session = require('web.session'); var publicRootData = require('web.public.root'); require("web.zoomodoo"); var websiteRootRegistry = publicRootData.publicRootRegistry; var WebsiteRoot = publicRootData.PublicRoot.extend(KeyboardNavigationMixin, {
        events: _.extend({}, KeyboardNavigationMixin.events, publicRootData.PublicRoot.prototype.events || {}, { 'click .js_change_lang': '_onLangChangeClick', 'click .js_publish_management .js_publish_btn': '_onPublishBtnClick', 'click .js_multi_website_switch': '_onWebsiteSwitch', 'shown.bs.modal': '_onModalShown', }), custom_events: _.extend({}, publicRootData.PublicRoot.prototype.custom_events || {}, { 'gmap_api_request': '_onGMapAPIRequest', 'gmap_api_key_request': '_onGMapAPIKeyRequest', 'ready_to_clean_for_save': '_onWidgetsStopRequest', 'seo_object_request': '_onSeoObjectRequest', 'will_remove_snippet': '_onWidgetsStopRequest', }), init() {
            this.isFullscreen = false; KeyboardNavigationMixin.init.call(this, { autoAccessKeys: false, }); if (/^((?!chrome|android).)*safari/i.test(navigator.userAgent) && document.querySelector('#wrapwrap')) { document.querySelector('#wrapwrap').classList.add('o_safari_browser'); }
            return this._super(...arguments);
        }, start: function () {
            KeyboardNavigationMixin.start.call(this); if (!this.$('.js_change_lang').length) { var $links = this.$('.js_language_selector a:not([data-oe-id])'); var m = $(_.min($links, function (l) { return $(l).attr('href').length; })).attr('href'); $links.each(function () { var $link = $(this); var t = $link.attr('href'); var l = (t === m) ? "default" : t.split('/')[1]; $link.data('lang', l).addClass('js_change_lang'); }); }
            this.$('.zoomable img[data-zoom]').zoomOdoo(); return this._super.apply(this, arguments);
        }, destroy() { KeyboardNavigationMixin.destroy.call(this); return this._super(...arguments); }, _getContext: function (context) { var html = document.documentElement; return _.extend({ 'website_id': html.getAttribute('data-website-id') | 0, }, this._super.apply(this, arguments)); }, _getExtraContext: function (context) { var html = document.documentElement; return _.extend({ 'editable': !!(html.dataset.editable || $('[data-oe-model]').length), 'translatable': !!html.dataset.translatable, 'edit_translations': !!html.dataset.edit_translations, }, this._super.apply(this, arguments)); }, async _getGMapAPIKey(refetch) {
            if (refetch || !this._gmapAPIKeyProm) { this._gmapAPIKeyProm = new Promise(async resolve => { const data = await this._rpc({ route: '/website/google_maps_api_key', }); resolve(JSON.parse(data).google_maps_api_key || ''); }); }
            return this._gmapAPIKeyProm;
        }, _getPublicWidgetsRegistry: function (options) {
            var registry = this._super.apply(this, arguments); if (options.editableMode) { return _.pick(registry, function (PublicWidget) { return !PublicWidget.prototype.disabledInEditableMode; }); }
            return registry;
        }, async _loadGMapAPI(editableMode, refetch) {
            if (refetch || !this._gmapAPILoading) {
                this._gmapAPILoading = new Promise(async resolve => {
                    const key = await this._getGMapAPIKey(refetch); window.odoo_gmap_api_post_load = (async function odoo_gmap_api_post_load() { await this._startWidgets(undefined, { editableMode: editableMode }); resolve(key); }).bind(this); if (!key) {
                        if (!editableMode && session.is_admin) { this.displayNotification({ type: 'warning', sticky: true, message: $('<div/>').append($('<span/>', { text: _t("Cannot load google map.") }), $('<br/>'), $('<a/>', { href: "/web#action=website.action_website_configuration", text: _t("Check your configuration."), }),)[0].outerHTML, }); }
                        resolve(false); this._gmapAPILoading = false; return;
                    }
                    await ajax.loadJS(`https://maps.googleapis.com/maps/api/js?v=3.exp&libraries=places&callback=odoo_gmap_api_post_load&key=${key}`);
                });
            }
            return this._gmapAPILoading;
        }, _toggleFullscreen(state) { this.isFullscreen = state; document.body.classList.add('o_fullscreen_transition'); document.body.classList.toggle('o_fullscreen', this.isFullscreen); document.body.style.overflowX = 'hidden'; let resizing = true; window.requestAnimationFrame(function resizeFunction() { window.dispatchEvent(new Event('resize')); if (resizing) { window.requestAnimationFrame(resizeFunction); } }); let stopResizing; const onTransitionEnd = ev => { if (ev.target === document.body && ev.propertyName === 'padding-top') { stopResizing(); } }; stopResizing = () => { resizing = false; document.body.style.overflowX = ''; document.body.removeEventListener('transitionend', onTransitionEnd); document.body.classList.remove('o_fullscreen_transition'); }; document.body.addEventListener('transitionend', onTransitionEnd); window.setTimeout(() => stopResizing(), 500); }, _onWidgetsStartRequest: function (ev) { ev.data.options = _.clone(ev.data.options || {}); ev.data.options.editableMode = ev.data.editableMode; this._super.apply(this, arguments); }, _onLangChangeClick: function (ev) { ev.preventDefault(); var $target = $(ev.currentTarget); var redirect = { lang: $target.data('url_code'), url: encodeURIComponent($target.attr('href').replace(/[&?]edit_translations[^&?]+/, '')), hash: encodeURIComponent(window.location.hash) }; window.location.href = _.str.sprintf("/website/lang/%(lang)s?r=%(url)s%(hash)s", redirect); }, async _onGMapAPIRequest(ev) { ev.stopPropagation(); const apiKey = await this._loadGMapAPI(ev.data.editableMode, ev.data.refetch); ev.data.onSuccess(apiKey); }, async _onGMapAPIKeyRequest(ev) { ev.stopPropagation(); const apiKey = await this._getGMapAPIKey(ev.data.refetch); ev.data.onSuccess(apiKey); }, _onSeoObjectRequest: function (ev) { var res = this._unslugHtmlDataObject('seo-object'); ev.data.callback(res); }, _unslugHtmlDataObject: function (dataAttr) {
            var repr = $('html').data(dataAttr); var match = repr && repr.match(/(.+)\((\d+),(.*)\)/); if (!match) { return null; }
            return { model: match[1], id: match[2] | 0, };
        }, _onPublishBtnClick: function (ev) {
            ev.preventDefault(); if (document.body.classList.contains('editor_enable')) { return; }
            var self = this; var $data = $(ev.currentTarget).parents(".js_publish_management:first"); this._rpc({ route: $data.data('controller') || '/website/publish', params: { id: +$data.data('id'), object: $data.data('object'), }, }).then(function (result) { $data.toggleClass("css_published", result).toggleClass("css_unpublished", !result); $data.find('input').prop("checked", result); $data.parents("[data-publish]").attr("data-publish", +result ? 'on' : 'off'); if (result) { self.displayNotification({ type: 'success', message: $data.data('description') ? _.str.sprintf(_t("You've published your %s."), $data.data('description')) : _t("Published with success."), }); } });
        }, _onWebsiteSwitch: function (ev) {
            var websiteId = ev.currentTarget.getAttribute('website-id'); var websiteDomain = ev.currentTarget.getAttribute('domain'); let url = `/website/force/${websiteId}`; if (websiteDomain && window.location.hostname !== websiteDomain) { url = websiteDomain + url; }
            const path = window.location.pathname + window.location.search + window.location.hash; window.location.href = $.param.querystring(url, { 'path': path });
        }, _onModalShown: function (ev) { $(ev.target).addClass('modal_shown'); }, _onKeyDown(ev) {
            if (!session.user_id) { return; }
            if (ev.keyCode !== $.ui.keyCode.ESCAPE || !document.body.contains(ev.target) || ev.target.closest('.modal')) { return KeyboardNavigationMixin._onKeyDown.apply(this, arguments); }
            this._toggleFullscreen(!this.isFullscreen);
        },
    }); return { WebsiteRoot: WebsiteRoot, websiteRootRegistry: websiteRootRegistry, };
});;

/* /website/static/src/js/content/compatibility.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website.content.compatibility', function (require) {
    'use strict'; require('web.dom_ready'); var browser = _.findKey($.browser, function (v) { return v === true; }); if ($.browser.mozilla && +$.browser.version.replace(/^([0-9]+\.[0-9]+).*/, '\$1') < 20) { browser = 'msie'; }
    browser += (',' + $.browser.version); var mobileRegex = /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i; if (mobileRegex.test(window.navigator.userAgent.toLowerCase())) { browser += ',mobile'; }
    document.documentElement.setAttribute('data-browser', browser); var htmlStyle = document.documentElement.style; var isFlexSupported = (('flexWrap' in htmlStyle) || ('WebkitFlexWrap' in htmlStyle) || ('msFlexWrap' in htmlStyle)); if (!isFlexSupported) { document.documentElement.setAttribute('data-no-flex', ''); }
    return { browser: browser, isFlexSupported: isFlexSupported, };
});;

/* /website/static/src/js/content/menu.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website.content.menu', function (require) {
    'use strict'; const config = require('web.config'); var dom = require('web.dom'); var publicWidget = require('web.public.widget'); var wUtils = require('website.utils'); var animations = require('website.content.snippets.animation'); const extraMenuUpdateCallbacks = []; const BaseAnimatedHeader = animations.Animation.extend({
        disabledInEditableMode: false, effects: [{ startEvents: 'scroll', update: '_updateHeaderOnScroll', }, { startEvents: 'resize', update: '_updateHeaderOnResize', }], init: function () { this._super(...arguments); this.fixedHeader = false; this.scrolledPoint = 0; this.hasScrolled = false; this.scrollHeightTooShort = false; }, start: function () { this.$main = this.$el.next('main'); this.isOverlayHeader = !!this.$el.closest('.o_header_overlay, .o_header_overlay_theme').length; this.$dropdowns = this.$el.find('.dropdown, .dropdown-menu'); this.$navbarCollapses = this.$el.find('.navbar-collapse'); this.$navbarCollapses.on('show.bs.collapse.BaseAnimatedHeader', function () { if (config.device.size_class <= config.device.SIZES.SM) { $(document.body).addClass('overflow-hidden'); } }).on('hide.bs.collapse.BaseAnimatedHeader', function () { $(document.body).removeClass('overflow-hidden'); }); this._transitionCount = 0; this.$el.on('odoo-transitionstart.BaseAnimatedHeader', () => { this.el.classList.add('o_transitioning'); this._adaptToHeaderChangeLoop(1); }); this.$el.on('transitionend.BaseAnimatedHeader', () => this._adaptToHeaderChangeLoop(-1)); return this._super(...arguments); }, destroy: function () { this._toggleFixedHeader(false); this.$el.removeClass('o_header_affixed o_header_is_scrolled o_header_no_transition o_transitioning'); this.$navbarCollapses.off('.BaseAnimatedHeader'); this.$el.off('.BaseAnimatedHeader'); this._super(...arguments); }, _adaptFixedHeaderPosition() { dom.compensateScrollbar(this.el, this.fixedHeader, false, 'right'); }, _adaptToHeaderChange: function () { this._updateMainPaddingTop(); this.el.classList.toggle('o_top_fixed_element', this._isShown()); for (const callback of extraMenuUpdateCallbacks) { callback(); } }, _adaptToHeaderChangeLoop: function (addCount = 0) { this._adaptToHeaderChange(); this._transitionCount += addCount; this._transitionCount = Math.max(0, this._transitionCount); if (this._transitionCount > 0) { window.requestAnimationFrame(() => this._adaptToHeaderChangeLoop()); if (addCount !== 0) { clearTimeout(this._changeLoopTimer); this._changeLoopTimer = setTimeout(() => { this._adaptToHeaderChangeLoop(-this._transitionCount); }, 500); } } else { clearTimeout(this._changeLoopTimer); this.el.classList.remove('o_transitioning'); } }, _computeTopGap() { return 0; }, _isShown() { return true; }, _toggleFixedHeader: function (useFixed = true) { this.fixedHeader = useFixed; this._adaptToHeaderChange(); this.el.classList.toggle('o_header_affixed', useFixed); this._adaptFixedHeaderPosition(); }, _updateMainPaddingTop: function () {
            this.headerHeight = this.$el.outerHeight(); this.topGap = this._computeTopGap(); if (this.isOverlayHeader) { return; }
            this.$main.css('padding-top', this.fixedHeader ? this.headerHeight : '');
        }, _scrollHeightTooShort() { const scrollEl = $().getScrollingElement()[0]; const remainingScroll = (scrollEl.scrollHeight - scrollEl.clientHeight) - this.scrolledPoint; const clonedHeader = this.el.cloneNode(true); scrollEl.append(clonedHeader); clonedHeader.classList.add('o_header_is_scrolled', 'o_header_affixed', 'o_header_no_transition'); const endHeaderHeight = clonedHeader.offsetHeight; clonedHeader.remove(); const heightDiff = this.headerHeight - endHeaderHeight; return heightDiff > 0 ? remainingScroll <= heightDiff : false; }, _updateHeaderOnScroll: function (scroll) {
            if (!this.hasScrolled) { this.hasScrolled = true; if (scroll > 0) { this.$el.addClass('o_header_no_transition'); } } else { this.$el.removeClass('o_header_no_transition'); }
            const headerIsScrolled = (scroll > this.scrolledPoint); if (this.headerIsScrolled !== headerIsScrolled) { this.scrollHeightTooShort = headerIsScrolled && this._scrollHeightTooShort(); if (!this.scrollHeightTooShort) { this.el.classList.toggle('o_header_is_scrolled', headerIsScrolled); this.$el.trigger('odoo-transitionstart'); this.headerIsScrolled = headerIsScrolled; } }
            this.$dropdowns.removeClass('show'); this.$navbarCollapses.removeClass('show').attr('aria-expanded', false);
        }, _updateHeaderOnResize: function () { this._adaptFixedHeaderPosition(); if (document.body.classList.contains('overflow-hidden') && config.device.size_class > config.device.SIZES.SM) { document.body.classList.remove('overflow-hidden'); this.$el.find('.navbar-collapse').removeClass('show'); } },
    }); publicWidget.registry.StandardAffixedHeader = BaseAnimatedHeader.extend({
        selector: 'header.o_header_standard:not(.o_header_sidebar)', init: function () { this._super(...arguments); this.fixedHeaderShow = false; this.scrolledPoint = 300; }, start: function () { this.headerHeight = this.$el.outerHeight(); return this._super.apply(this, arguments); }, destroy() { this.$el.css('transform', ''); this._super(...arguments); }, _isShown() { return !this.fixedHeader || this.fixedHeaderShow; }, _updateHeaderOnScroll: function (scroll) {
            this._super(...arguments); const mainPosScrolled = (scroll > this.headerHeight + this.topGap); const reachPosScrolled = (scroll > this.scrolledPoint + this.topGap) && !this.scrollHeightTooShort; const fixedUpdate = (this.fixedHeader !== mainPosScrolled); const showUpdate = (this.fixedHeaderShow !== reachPosScrolled); if (fixedUpdate || showUpdate) { this.$el.css('transform', reachPosScrolled ? `translate(0, -${this.topGap}px)` : mainPosScrolled ? 'translate(0, -100%)' : ''); void this.$el[0].offsetWidth; }
            this.fixedHeaderShow = reachPosScrolled; if (fixedUpdate) { this._toggleFixedHeader(mainPosScrolled); } else if (showUpdate) { this._adaptToHeaderChange(); }
        },
    }); publicWidget.registry.FixedHeader = BaseAnimatedHeader.extend({ selector: 'header.o_header_fixed:not(.o_header_sidebar)', _updateHeaderOnScroll: function (scroll) { this._super(...arguments); if (scroll > (this.scrolledPoint + this.topGap)) { if (!this.$el.hasClass('o_header_affixed')) { this.$el.css('transform', `translate(0, -${this.topGap}px)`); void this.$el[0].offsetWidth; this._toggleFixedHeader(true); } } else { this._toggleFixedHeader(false); void this.$el[0].offsetWidth; this.$el.css('transform', ''); } }, }); const BaseDisappearingHeader = publicWidget.registry.FixedHeader.extend({
        init: function () { this._super(...arguments); this.scrollingDownwards = true; this.hiddenHeader = false; this.position = 0; this.atTop = true; this.checkPoint = 0; this.scrollOffsetLimit = 200; }, destroy: function () { this._showHeader(); this._super.apply(this, arguments); }, _hideHeader: function () { this.$el.trigger('odoo-transitionstart'); }, _isShown() { return !this.fixedHeader || !this.hiddenHeader; }, _showHeader: function () { this.$el.trigger('odoo-transitionstart'); }, _updateHeaderOnScroll: function (scroll) {
            this._super(...arguments); const scrollingDownwards = (scroll > this.position); const atTop = (scroll <= 0); if (scrollingDownwards !== this.scrollingDownwards) { this.checkPoint = scroll; }
            this.scrollingDownwards = scrollingDownwards; this.position = scroll; this.atTop = atTop; if (scrollingDownwards) { if (!this.hiddenHeader && scroll - this.checkPoint > (this.scrollOffsetLimit + this.topGap)) { this.hiddenHeader = true; this._hideHeader(); } } else { if (this.hiddenHeader && scroll - this.checkPoint < -(this.scrollOffsetLimit + this.topGap) / 2) { this.hiddenHeader = false; this._showHeader(); } }
            if (atTop && !this.atTop) { this._showHeader(); }
        },
    }); publicWidget.registry.DisappearingHeader = BaseDisappearingHeader.extend({ selector: 'header.o_header_disappears:not(.o_header_sidebar)', _hideHeader: function () { this._super(...arguments); this.$el.css('transform', 'translate(0, -100%)'); }, _showHeader: function () { this._super(...arguments); this.$el.css('transform', this.atTop ? '' : `translate(0, -${this.topGap}px)`); }, }); publicWidget.registry.FadeOutHeader = BaseDisappearingHeader.extend({ selector: 'header.o_header_fade_out:not(.o_header_sidebar)', _hideHeader: function () { this._super(...arguments); this.$el.stop(false, true).fadeOut(); }, _showHeader: function () { this._super(...arguments); this.$el.css('transform', this.atTop ? '' : `translate(0, -${this.topGap}px)`); this.$el.stop(false, true).fadeIn(); }, }); publicWidget.registry.autohideMenu = publicWidget.Widget.extend({
        selector: 'header#top', disabledInEditableMode: false, async start() {
            await this._super(...arguments); this.$topMenu = this.$('#top_menu'); this.noAutohide = this.$el.is('.o_no_autohide_menu'); if (!this.noAutohide) { await wUtils.onceAllImagesLoaded(this.$('.navbar'), this.$('.o_mega_menu, .o_offcanvas_logo_container, .dropdown-menu .o_lang_flag')); var $window = $(window); $window.on('load.autohideMenu', function () { $window.trigger('resize'); }); dom.initAutoMoreMenu(this.$topMenu, { unfoldable: '.divider, .divider ~ li, .o_no_autohide_item' }); }
            this.$topMenu.removeClass('o_menu_loading'); this.$topMenu.trigger('menu_loaded');
        }, destroy() { this._super(...arguments); if (!this.noAutohide && this.$topMenu) { $(window).off('.autohideMenu'); dom.destroyAutoMoreMenu(this.$topMenu); } },
    }); publicWidget.registry.menuDirection = publicWidget.Widget.extend({
        selector: 'header .navbar .nav', disabledInEditableMode: false, events: { 'show.bs.dropdown': '_onDropdownShow', }, start: function () { this.defaultAlignment = this.$el.is('.ml-auto, .ml-auto ~ *') ? 'right' : 'left'; return this._super.apply(this, arguments); }, _checkOpening: function (alignment, liOffset, liWidth, menuWidth, pageWidth) { if (alignment === 'left') { return (liOffset + menuWidth <= pageWidth); } else { return (liOffset + liWidth - menuWidth >= 0); } }, _onDropdownShow: function (ev) {
            var $li = $(ev.target); var $menu = $li.children('.dropdown-menu'); var liOffset = $li.offset().left; var liWidth = $li.outerWidth(); var menuWidth = $menu.outerWidth(); var pageWidth = $('#wrapwrap').outerWidth(); $menu.removeClass('dropdown-menu-left dropdown-menu-right'); var alignment = this.defaultAlignment; if ($li.nextAll(':visible').length === 0) { alignment = 'right'; }
            for (var i = 0; i < 2; i++) { if (!this._checkOpening(alignment, liOffset, liWidth, menuWidth, pageWidth)) { alignment = (alignment === 'left' ? 'right' : 'left'); } }
            $menu.addClass('dropdown-menu-' + alignment);
        },
    }); publicWidget.registry.hoverableDropdown = animations.Animation.extend({
        selector: 'header.o_hoverable_dropdown', disabledInEditableMode: false, effects: [{ startEvents: 'resize', update: '_dropdownHover', }], events: { 'mouseenter .dropdown': '_onMouseEnter', 'mouseleave .dropdown': '_onMouseLeave', }, start: function () { this.$dropdownMenus = this.$el.find('.dropdown-menu'); this.$dropdownToggles = this.$el.find('.dropdown-toggle'); this._dropdownHover(); return this._super.apply(this, arguments); }, _dropdownHover: function () { if (config.device.size_class > config.device.SIZES.SM) { this.$dropdownMenus.css('margin-top', '0'); this.$dropdownMenus.css('top', 'unset'); } else { this.$dropdownMenus.css('margin-top', ''); this.$dropdownMenus.css('top', ''); } }, _onMouseEnter: function (ev) {
            if (config.device.size_class <= config.device.SIZES.SM) { return; }
            const $dropdown = $(ev.currentTarget); $dropdown.addClass('show'); $dropdown.find(this.$dropdownToggles).attr('aria-expanded', 'true'); $dropdown.find(this.$dropdownMenus).addClass('show');
        }, _onMouseLeave: function (ev) {
            if (config.device.size_class <= config.device.SIZES.SM) { return; }
            const $dropdown = $(ev.currentTarget); $dropdown.removeClass('show'); $dropdown.find(this.$dropdownToggles).attr('aria-expanded', 'false'); $dropdown.find(this.$dropdownMenus).removeClass('show');
        },
    }); publicWidget.registry.HeaderMainCollapse = publicWidget.Widget.extend({ selector: 'header#top', events: { 'show.bs.collapse #top_menu_collapse': '_onCollapseShow', 'hidden.bs.collapse #top_menu_collapse': '_onCollapseHidden', }, _onCollapseShow() { this.el.classList.add('o_top_menu_collapse_shown'); }, _onCollapseHidden() { this.el.classList.remove('o_top_menu_collapse_shown'); }, }); return { extraMenuUpdateCallbacks: extraMenuUpdateCallbacks, };
});;

/* /website/static/src/js/content/snippets.animation.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website.content.snippets.animation', function (require) {
    'use strict'; const ajax = require('web.ajax'); var Class = require('web.Class'); var config = require('web.config'); var core = require('web.core'); const dom = require('web.dom'); var mixins = require('web.mixins'); var publicWidget = require('web.public.widget'); var utils = require('web.utils'); const wUtils = require('website.utils'); var qweb = core.qweb; window.requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.msRequestAnimationFrame || window.oRequestAnimationFrame; window.cancelAnimationFrame = window.cancelAnimationFrame || window.webkitCancelAnimationFrame || window.mozCancelAnimationFrame || window.msCancelAnimationFrame || window.oCancelAnimationFrame; if (!window.performance || !window.performance.now) { window.performance = { now: function () { return Date.now(); } }; }
    publicWidget.Widget.include({ disabledInEditableMode: true, edit_events: null, read_events: null, init: function (parent, options) { this._super.apply(this, arguments); this.editableMode = this.options.editableMode || false; var extraEvents = this.editableMode ? this.edit_events : this.read_events; if (extraEvents) { this.events = _.extend({}, this.events || {}, extraEvents); } }, }); var AnimationEffect = Class.extend(mixins.ParentedMixin, {
        init: function (parent, updateCallback, startEvents, $startTarget, options) {
            mixins.ParentedMixin.init.call(this); this.setParent(parent); options = options || {}; this._minFrameTime = 1000 / (options.maxFPS || 100); this._updateCallback = updateCallback; this.startEvents = startEvents || 'scroll'; const modalEl = options.enableInModal ? parent.target.closest('.modal') : null; const mainScrollingElement = modalEl ? modalEl : $().getScrollingElement()[0]; const mainScrollingTarget = mainScrollingElement === document.documentElement ? window : mainScrollingElement; this.$startTarget = $($startTarget ? $startTarget : this.startEvents === 'scroll' ? mainScrollingTarget : window); if (options.getStateCallback) { this._getStateCallback = options.getStateCallback; } else if (this.startEvents === 'scroll' && this.$startTarget[0] === mainScrollingTarget) { const $scrollable = this.$startTarget; this._getStateCallback = function () { return $scrollable.scrollTop(); }; } else if (this.startEvents === 'resize' && this.$startTarget[0] === window) { this._getStateCallback = function () { return { width: window.innerWidth, height: window.innerHeight, }; }; } else { this._getStateCallback = function () { return undefined; }; }
            this.endEvents = options.endEvents || false; this.$endTarget = options.$endTarget ? $(options.$endTarget) : this.$startTarget; this._updateCallback = this._updateCallback.bind(parent); this._getStateCallback = this._getStateCallback.bind(parent); this._uid = '_animationEffect' + _.uniqueId(); this.startEvents = _processEvents(this.startEvents, this._uid); if (this.endEvents) { this.endEvents = _processEvents(this.endEvents, this._uid); }
            function _processEvents(events, namespace) { events = events.split(' '); return _.each(events, function (e, index) { events[index] += ('.' + namespace); }).join(' '); }
        }, destroy: function () { mixins.ParentedMixin.destroy.call(this); this.stop(); }, start: function () { this._paused = false; this._rafID = window.requestAnimationFrame((function (t) { this._update(t); this._paused = true; }).bind(this)); if (this.endEvents) { this.$startTarget.on(this.startEvents, (function (e) { if (this._paused) { _.defer(this.play.bind(this, e)); } }).bind(this)); this.$endTarget.on(this.endEvents, (function () { if (!this._paused) { _.defer(this.pause.bind(this)); } }).bind(this)); } else { var pauseTimer = null; this.$startTarget.on(this.startEvents, _.throttle((function (e) { this.play(e); clearTimeout(pauseTimer); pauseTimer = _.delay((function () { this.pause(); pauseTimer = null; }).bind(this), 2000); }).bind(this), 250, { trailing: false })); } }, stop: function () {
            this.$startTarget.off(this.startEvents); if (this.endEvents) { this.$endTarget.off(this.endEvents); }
            this.pause();
        }, play: function (e) {
            this._newEvent = e; if (!this._paused) { return; }
            this._paused = false; this._rafID = window.requestAnimationFrame(this._update.bind(this)); this._lastUpdateTimestamp = undefined;
        }, pause: function () {
            if (this._paused) { return; }
            this._paused = true; window.cancelAnimationFrame(this._rafID); this._lastUpdateTimestamp = undefined;
        }, _update: function (timestamp) {
            if (this._paused) { return; }
            this._rafID = window.requestAnimationFrame(this._update.bind(this)); var elapsedTime = 0; if (this._lastUpdateTimestamp) { elapsedTime = timestamp - this._lastUpdateTimestamp; if (elapsedTime < this._minFrameTime) { return; } }
            var animationState = this._getStateCallback(elapsedTime, this._newEvent); if (!this._newEvent && animationState !== undefined && _.isEqual(animationState, this._animationLastState)) { return; }
            this._animationLastState = animationState; this._updateCallback(this._animationLastState, elapsedTime, this._newEvent); this._lastUpdateTimestamp = timestamp; this._newEvent = undefined;
        },
    }); var Animation = publicWidget.Widget.extend({
        maxFPS: 100, effects: [], start: function () { this._prepareEffects(); _.each(this._animationEffects, function (effect) { effect.start(); }); return this._super.apply(this, arguments); }, _prepareEffects: function () {
            this._animationEffects = []; var self = this; _.each(this.effects, function (desc) {
                self._addEffect(self[desc.update], desc.startEvents, _findTarget(desc.startTarget), { getStateCallback: desc.getState && self[desc.getState], endEvents: desc.endEvents || undefined, $endTarget: _findTarget(desc.endTarget), maxFPS: self.maxFPS, enableInModal: desc.enableInModal || undefined, }); function _findTarget(selector) {
                    if (selector) {
                        if (selector === 'selector') { return self.$target; }
                        return self.$(selector);
                    }
                    return undefined;
                }
            });
        }, _addEffect: function (updateCallback, startEvents, $startTarget, options) { this._animationEffects.push(new AnimationEffect(this, updateCallback, startEvents, $startTarget, options)); },
    }); var registry = publicWidget.registry; registry.slider = publicWidget.Widget.extend({
        selector: '.carousel', disabledInEditableMode: false, edit_events: { 'content_changed': '_onContentChanged', }, start: function () { this.$('img').on('load.slider', () => this._computeHeights()); this._computeHeights(); this.$target.carousel(this.editableMode ? 'pause' : undefined); $(window).on('resize.slider', _.debounce(() => this._computeHeights(), 250)); return this._super.apply(this, arguments); }, destroy: function () { this._super.apply(this, arguments); this.$('img').off('.slider'); this.$target.carousel('pause'); this.$target.removeData('bs.carousel'); _.each(this.$('.carousel-item'), function (el) { $(el).css('min-height', ''); }); $(window).off('.slider'); }, _computeHeights: function () {
            var maxHeight = 0; var $items = this.$('.carousel-item'); $items.css('min-height', ''); _.each($items, function (el) {
                var $item = $(el); var isActive = $item.hasClass('active'); $item.addClass('active'); var height = $item.outerHeight(); if (height > maxHeight) { maxHeight = height; }
                $item.toggleClass('active', isActive);
            }); $items.css('min-height', maxHeight);
        }, _onContentChanged: function (ev) { this._computeHeights(); },
    }); registry.Parallax = Animation.extend({
        selector: '.parallax', disabledInEditableMode: false, effects: [{ startEvents: 'scroll', update: '_onWindowScroll', enableInModal: true, }], start: function () {
            this._rebuild(); $(window).on('resize.animation_parallax', _.debounce(this._rebuild.bind(this), 500)); this.modalEl = this.$target[0].closest('.modal'); if (this.modalEl) { $(this.modalEl).on('shown.bs.modal.animation_parallax', () => { this._rebuild(); this.modalEl.dispatchEvent(new Event('scroll')); }); }
            return this._super.apply(this, arguments);
        }, destroy: function () { this._super.apply(this, arguments); $(window).off('.animation_parallax'); if (this.modalEl) { $(this.modalEl).off('.animation_parallax'); } }, _rebuild: function () {
            this.$bg = this.$('> .s_parallax_bg'); this.speed = parseFloat(this.$target.attr('data-scroll-background-ratio') || 0); var noParallaxSpeed = (this.speed === 0 || this.speed === 1); if (noParallaxSpeed) { this.$bg.css({ transform: '', top: '', bottom: '', }); return; }
            this.viewport = document.body.clientHeight - $('#wrapwrap').position().top; this.visibleArea = [this.$target.offset().top]; this.visibleArea.push(this.visibleArea[0] + this.$target.innerHeight() + this.viewport); this.ratio = this.speed * (this.viewport / 10); const absoluteRatio = Math.abs(this.ratio); this.$bg.css({ top: -absoluteRatio, bottom: -absoluteRatio, });
        }, _onWindowScroll: function (scrollOffset) {
            if (this.speed === 0 || this.speed === 1) { return; }
            var vpEndOffset = scrollOffset + this.viewport; if (vpEndOffset >= this.visibleArea[0] && vpEndOffset <= this.visibleArea[1]) { this.$bg.css('transform', 'translateY(' + _getNormalizedPosition.call(this, vpEndOffset) + 'px)'); }
            function _getNormalizedPosition(pos) { var r = (pos - this.visibleArea[1]) / (this.visibleArea[0] - this.visibleArea[1]); return Math.round(this.ratio * (2 * r - 1)); }
        },
    }); const MobileYoutubeAutoplayMixin = {
        _setupAutoplay: function (src) {
            let promise = Promise.resolve(); this.isYoutubeVideo = src.indexOf('youtube') >= 0; this.isMobileEnv = config.device.size_class <= config.device.SIZES.LG && config.device.touch; if (this.isYoutubeVideo && this.isMobileEnv && !window.YT) {
                const oldOnYoutubeIframeAPIReady = window.onYouTubeIframeAPIReady; promise = new Promise(resolve => {
                    window.onYouTubeIframeAPIReady = () => {
                        if (oldOnYoutubeIframeAPIReady) { oldOnYoutubeIframeAPIReady(); }
                        return resolve();
                    };
                }); ajax.loadJS('https://www.youtube.com/iframe_api');
            }
            return promise;
        }, _triggerAutoplay: function (iframeEl) { if (this.isMobileEnv && this.isYoutubeVideo) { new window.YT.Player(iframeEl, { events: { onReady: ev => ev.target.playVideo(), } }); } },
    }; registry.mediaVideo = publicWidget.Widget.extend(MobileYoutubeAutoplayMixin, {
        selector: '.media_iframe_video', start: function () {
            const proms = [this._super.apply(this, arguments)]; let iframeEl = this.$target[0].querySelector(':scope > iframe'); if (!iframeEl) { iframeEl = this._generateIframe(); }
            if (!iframeEl) { return Promise.all(proms); }
            proms.push(this._setupAutoplay(iframeEl.getAttribute('src'))); return Promise.all(proms).then(() => { this._triggerAutoplay(iframeEl); });
        }, _generateIframe: function () {
            this.$target.empty(); this.$target.append('<div class="css_editable_mode_display">&nbsp;</div>' + '<div class="media_iframe_video_size">&nbsp;</div>'); var src = _.escape(this.$target.data('oe-expression') || this.$target.data('src')); var m = src.match(/^(?:https?:)?\/\/([^/?#]+)/); if (!m) { return; }
            var domain = m[1].replace(/^www\./, ''); var supportedDomains = ['youtu.be', 'youtube.com', 'youtube-nocookie.com', 'instagram.com', 'vine.co', 'player.vimeo.com', 'vimeo.com', 'dailymotion.com', 'player.youku.com', 'youku.com']; if (!_.contains(supportedDomains, domain)) { return; }
            const iframeEl = $('<iframe/>', { src: src, frameborder: '0', allowfullscreen: 'allowfullscreen', })[0]; this.$target.append(iframeEl); return iframeEl;
        },
    }); registry.backgroundVideo = publicWidget.Widget.extend(MobileYoutubeAutoplayMixin, {
        selector: '.o_background_video', xmlDependencies: ['/website/static/src/xml/website.background.video.xml'], disabledInEditableMode: false, start: function () {
            var proms = [this._super(...arguments)]; this.videoSrc = this.el.dataset.bgVideoSrc; this.iframeID = _.uniqueId('o_bg_video_iframe_'); proms.push(this._setupAutoplay(this.videoSrc)); if (this.isYoutubeVideo && this.isMobileEnv && !this.videoSrc.includes('enablejsapi=1')) { this.videoSrc += '&enablejsapi=1'; }
            var throttledUpdate = _.throttle(() => this._adjustIframe(), 50); var $dropdownMenu = this.$el.closest('.dropdown-menu'); if ($dropdownMenu.length) { this.$dropdownParent = $dropdownMenu.parent(); this.$dropdownParent.on('shown.bs.dropdown.backgroundVideo', throttledUpdate); }
            $(window).on('resize.' + this.iframeID, throttledUpdate); const $modal = this.$target.closest('.modal'); if ($modal.length) { $modal.on('show.bs.modal', () => { const videoContainerEl = this.$target[0].querySelector('.o_bg_video_container'); videoContainerEl.classList.add('d-none'); }); $modal.on('shown.bs.modal', () => { this._adjustIframe(); const videoContainerEl = this.$target[0].querySelector('.o_bg_video_container'); videoContainerEl.classList.remove('d-none'); }); }
            return Promise.all(proms).then(() => this._appendBgVideo());
        }, destroy: function () {
            this._super.apply(this, arguments); if (this.$dropdownParent) { this.$dropdownParent.off('.backgroundVideo'); }
            $(window).off('resize.' + this.iframeID); if (this.$bgVideoContainer) { this.$bgVideoContainer.remove(); }
        }, _adjustIframe: function () {
            if (!this.$iframe) { return; }
            this.$iframe.removeClass('show'); var wrapperWidth = this.$target.innerWidth(); var wrapperHeight = this.$target.innerHeight(); var relativeRatio = (wrapperWidth / wrapperHeight) / (16 / 9); var style = {}; if (relativeRatio >= 1.0) { style['width'] = '100%'; style['height'] = (relativeRatio * 100) + '%'; style['left'] = '0'; style['top'] = (-(relativeRatio - 1.0) / 2 * 100) + '%'; } else { style['width'] = ((1 / relativeRatio) * 100) + '%'; style['height'] = '100%'; style['left'] = (-((1 / relativeRatio) - 1.0) / 2 * 100) + '%'; style['top'] = '0'; }
            this.$iframe.css(style); void this.$iframe[0].offsetWidth; this.$iframe.addClass('show');
        }, _appendBgVideo: function () { var $oldContainer = this.$bgVideoContainer || this.$('> .o_bg_video_container'); this.$bgVideoContainer = $(qweb.render('website.background.video', { videoSrc: this.videoSrc, iframeID: this.iframeID, })); this.$iframe = this.$bgVideoContainer.find('.o_bg_video_iframe'); this.$iframe.one('load', () => { this.$bgVideoContainer.find('.o_bg_video_loading').remove(); }); this.$bgVideoContainer.prependTo(this.$target); $oldContainer.remove(); this._adjustIframe(); this._triggerAutoplay(this.$iframe[0]); },
    }); registry.socialShare = publicWidget.Widget.extend({
        selector: '.oe_social_share', xmlDependencies: ['/website/static/src/xml/website.share.xml'], events: { 'mouseenter': '_onMouseEnter', }, _bindSocialEvent: function () { this.$('.oe_social_facebook').click($.proxy(this._renderSocial, this, 'facebook')); this.$('.oe_social_twitter').click($.proxy(this._renderSocial, this, 'twitter')); this.$('.oe_social_linkedin').click($.proxy(this._renderSocial, this, 'linkedin')); }, _render: function () { this.$el.popover({ content: qweb.render('website.social_hover', { medias: this.socialList }), placement: 'bottom', container: this.$el, html: true, trigger: 'manual', animation: false, }).popover("show"); this.$el.off('mouseleave.socialShare').on('mouseleave.socialShare', function () { var self = this; setTimeout(function () { if (!$(".popover:hover").length) { $(self).popover('dispose'); } }, 200); }); }, _renderSocial: function (social) {
            var url = this.$el.data('urlshare') || document.URL.split(/[?#]/)[0]; url = encodeURIComponent(url); var title = document.title.split(" | ")[0]; var hashtags = ' #' + document.title.split(" | ")[1].replace(' ', '') + ' ' + this.hashtags; var socialNetworks = { 'facebook': 'https://www.facebook.com/sharer/sharer.php?u=' + url, 'twitter': 'https://twitter.com/intent/tweet?original_referer=' + url + '&text=' + encodeURIComponent(title + hashtags + ' - ') + url, 'linkedin': 'https://www.linkedin.com/sharing/share-offsite/?url=' + url, }; if (!_.contains(_.keys(socialNetworks), social)) { return; }
            var wHeight = 500; var wWidth = 500; window.open(socialNetworks[social], '', 'menubar=no, toolbar=no, resizable=yes, scrollbar=yes, height=' + wHeight + ',width=' + wWidth);
        }, _onMouseEnter: function () { var social = this.$el.data('social'); this.socialList = social ? social.split(',') : ['facebook', 'twitter', 'linkedin']; this.hashtags = this.$el.data('hashtags') || ''; this._render(); this._bindSocialEvent(); },
    }); registry.anchorSlide = publicWidget.Widget.extend({
        selector: 'a[href^="/"][href*="#"], a[href^="#"]', events: { 'click': '_onAnimateClick', }, async _scrollTo($el, scrollValue = 'true') { return dom.scrollTo($el[0], { duration: scrollValue === 'true' ? 500 : 0, extraOffset: this._computeExtraOffset(), }); }, _computeExtraOffset() { return 0; }, _onAnimateClick: function (ev) {
            if (this.$target[0].pathname !== window.location.pathname) { return; }
            var hash = this.$target[0].hash; if (!utils.isValidAnchor(hash)) { return; }
            var $anchor = $(hash); const scrollValue = $anchor.attr('data-anchor'); if (!$anchor.length || !scrollValue) { return; }
            ev.preventDefault(); this._scrollTo($anchor, scrollValue);
        },
    }); registry.FullScreenHeight = publicWidget.Widget.extend({
        selector: '.o_full_screen_height', disabledInEditableMode: false, start() {
            this.inModal = !!this.el.closest('.modal'); if (this.$el.is(':not(:visible)') || this.$el.outerHeight() > this._computeIdealHeight()) { this._adaptSize(); $(window).on('resize.FullScreenHeight', _.debounce(() => this._adaptSize(), 250)); }
            return this._super(...arguments);
        }, destroy() { this._super(...arguments); $(window).off('.FullScreenHeight'); this.el.style.setProperty('min-height', ''); }, _adaptSize() { const height = this._computeIdealHeight(); this.el.style.setProperty('min-height', `${height}px`, 'important'); }, _computeIdealHeight() {
            const windowHeight = $(window).outerHeight(); if (this.inModal) { return (windowHeight - $('#wrapwrap').position().top); }
            const firstContentEl = $('#wrapwrap > main > :first-child')[0]; const mainTopPos = firstContentEl.getBoundingClientRect().top + dom.closestScrollable(firstContentEl.parentNode).scrollTop; return (windowHeight - mainTopPos);
        },
    }); registry.ScrollButton = registry.anchorSlide.extend({
        selector: '.o_scroll_button', _onAnimateClick: function (ev) {
            ev.preventDefault(); const currentSectionEl = this.el.closest('section'); let nextEl = currentSectionEl.nextElementSibling; while (nextEl) {
                if ($(nextEl).is(':visible')) { this._scrollTo($(nextEl)); return; }
                nextEl = nextEl.nextElementSibling;
            }
        },
    }); registry.FooterSlideout = publicWidget.Widget.extend({ selector: '#wrapwrap:has(.o_footer_slideout)', disabledInEditableMode: false, async start() { const $main = this.$('> main'); const slideoutEffect = $main.outerHeight() >= $(window).outerHeight(); this.el.classList.toggle('o_footer_effect_enable', slideoutEffect); this.__pixelEl = document.createElement('div'); this.__pixelEl.style.width = `1px`; this.__pixelEl.style.height = `1px`; this.__pixelEl.style.marginTop = `-1px`; this.el.appendChild(this.__pixelEl); return this._super(...arguments); }, destroy() { this._super(...arguments); this.el.classList.remove('o_footer_effect_enable'); this.__pixelEl.remove(); }, }); registry.HeaderHamburgerFull = publicWidget.Widget.extend({ selector: 'header:has(.o_header_hamburger_full_toggler):not(:has(.o_offcanvas_menu_toggler))', events: { 'click .o_header_hamburger_full_toggler': '_onToggleClick', }, _onToggleClick() { document.body.classList.add('overflow-hidden'); setTimeout(() => $(window).trigger('scroll'), 100); }, }); registry.BottomFixedElement = publicWidget.Widget.extend({
        selector: '#wrapwrap', async start() { this.$scrollingElement = $().getScrollingElement(); this.__hideBottomFixedElements = _.debounce(() => this._hideBottomFixedElements(), 500); this.$scrollingElement.on('scroll.bottom_fixed_element', this.__hideBottomFixedElements); $(window).on('resize.bottom_fixed_element', this.__hideBottomFixedElements); return this._super(...arguments); }, destroy() { this._super(...arguments); this.$scrollingElement.off('.bottom_fixed_element'); $(window).off('.bottom_fixed_element'); $('.o_bottom_fixed_element').removeClass('o_bottom_fixed_element_hidden'); }, _hideBottomFixedElements() {
            const $bottomFixedElements = $('.o_bottom_fixed_element'); if (!$bottomFixedElements.length) { return; }
            $bottomFixedElements.removeClass('o_bottom_fixed_element_hidden'); if ((this.$scrollingElement[0].offsetHeight + this.$scrollingElement[0].scrollTop) >= (this.$scrollingElement[0].scrollHeight - 2)) { const buttonEls = [...this.$('.btn:visible')]; for (const el of $bottomFixedElements) { if (buttonEls.some(button => dom.areColliding(button, el))) { el.classList.add('o_bottom_fixed_element_hidden'); } } }
        },
    }); registry.ImagesLazyLoading = publicWidget.Widget.extend({
        selector: '#wrapwrap', start() {
            const imgEls = this.$target[0].querySelectorAll('img[loading="lazy"]'); for (const imgEl of imgEls) {
                imgEl.dataset.lazyLoadingInitialMinHeight = imgEl.style.minHeight; imgEl.style.minHeight = '1px'; wUtils.onceAllImagesLoaded($(imgEl)).then(() => {
                    if (this.isDestroyed()) { return; }
                    this._restoreImage(imgEl);
                });
            }
            return this._super(...arguments);
        }, destroy() { this._super(...arguments); const imgEls = this.$target[0].querySelectorAll('img[data-lazy-loading-initial-min-height]'); for (const imgEl of imgEls) { this._restoreImage(imgEl); } }, _restoreImage(imgEl) { imgEl.style.minHeight = imgEl.dataset.lazyLoadingInitialMinHeight; delete imgEl.dataset.lazyLoadingInitialMinHeight; },
    }); registry.ZoomedBackgroundShape = publicWidget.Widget.extend({ selector: '.o_we_shape', disabledInEditableMode: false, start() { this._onBackgroundShapeResize(); this.throttledShapeResize = _.throttle(() => this._onBackgroundShapeResize(), 25); window.addEventListener('resize', this.throttledShapeResize); return this._super(...arguments); }, destroy() { this._updateShapePosition(); window.removeEventListener('resize', this.throttledShapeResize); this._super(...arguments); }, _updateShapePosition(offset = '') { this.el.style.left = offset; this.el.style.right = offset; }, _onBackgroundShapeResize() { this._updateShapePosition(); let decimalPart = this.el.getBoundingClientRect().width % 1; decimalPart = Math.round((decimalPart + Number.EPSILON) * 100) / 100; if (decimalPart > 0) { let offset = (decimalPart < 0.5 ? decimalPart : decimalPart - 1) / 2; this._updateShapePosition(offset + 'px'); } }, }); return { Widget: publicWidget.Widget, Animation: Animation, registry: registry, Class: Animation, };
});;

/* /website/static/src/js/menu/navbar.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website.navbar', function (require) {
    'use strict'; var core = require('web.core'); var dom = require('web.dom'); var publicWidget = require('web.public.widget'); var concurrency = require('web.concurrency'); var Widget = require('web.Widget'); var websiteRootData = require('website.root'); var websiteNavbarRegistry = new publicWidget.RootWidgetRegistry(); var WebsiteNavbar = publicWidget.RootWidget.extend({
        xmlDependencies: ['/website/static/src/xml/website.xml'], events: _.extend({}, publicWidget.RootWidget.prototype.events || {}, { 'click [data-action]': '_onActionMenuClick', 'mouseover > ul > li.dropdown:not(.show)': '_onMenuHovered', 'click .o_mobile_menu_toggle': '_onMobileMenuToggleClick', 'mouseenter #oe_applications:not(:has(.dropdown-item))': '_onOeApplicationsHovered', 'show.bs.dropdown #oe_applications:not(:has(.dropdown-item))': '_onOeApplicationsShow', }), custom_events: _.extend({}, publicWidget.RootWidget.prototype.custom_events || {}, { 'action_demand': '_onActionDemand', 'edit_mode': '_onEditMode', 'readonly_mode': '_onReadonlyMode', 'ready_to_save': '_onSave', }), init: function () { this._super.apply(this, arguments); var self = this; var initPromise = new Promise(function (resolve) { self.resolveInit = resolve; }); this._widgetDefs = [initPromise]; }, start: function () {
            var self = this; dom.initAutoMoreMenu(this.$('ul.o_menu_sections'), {
                maxWidth: function () {
                    return self.$el.width()
                        - (self.$('.o_menu_systray').outerWidth(true) || 0)
                        - (self.$('ul#oe_applications').outerWidth(true) || 0)
                        - (self.$('.o_menu_toggle').outerWidth(true) || 0)
                        - (self.$('.o_menu_brand').outerWidth(true) || 0);
                },
            }); return this._super.apply(this, arguments).then(function () { self.resolveInit(); });
        }, _attachComponent: function () { var def = this._super.apply(this, arguments); this._widgetDefs.push(def); return def; }, _getRegistry: function () { return websiteNavbarRegistry; }, _handleAction: function (actionName, params, _i) {
            var self = this; return this._whenReadyForActions().then(function () {
                var defs = []; _.each(self._widgets, function (w) {
                    if (!w.handleAction) { return; }
                    var def = w.handleAction(actionName, params); if (def !== null) { defs.push(def); }
                }); if (!defs.length) {
                    if (_i > 50) { console.warn(_.str.sprintf("Action '%s' was not able to be handled.", actionName)); return Promise.reject(); }
                    return concurrency.delay(100).then(function () { return self._handleAction(actionName, params, (_i || 0) + 1); });
                }
                return Promise.all(defs).then(function (values) {
                    if (values.length === 1) { return values[0]; }
                    return values;
                });
            });
        }, async _loadAppMenus() {
            if (!this._loadAppMenusProm) { this._loadAppMenusProm = this._rpc({ model: 'ir.ui.menu', method: 'load_menus_root', args: [], }); const result = await this._loadAppMenusProm; const menus = core.qweb.render('website.oe_applications_menu', { 'menu_data': result, }); this.$('#oe_applications .dropdown-menu').html(menus); }
            return this._loadAppMenusProm;
        }, _whenReadyForActions: function () { return Promise.all(this._widgetDefs); }, _onOeApplicationsHovered: function () { this._loadAppMenus(); }, _onOeApplicationsShow: function () { this._loadAppMenus(); }, _onActionMenuClick: function (ev) { const restore = dom.addButtonLoadingEffect(ev.currentTarget); this._handleAction($(ev.currentTarget).data('action')).then(restore).guardedCatch(restore); }, _onActionDemand: function (ev) {
            var def = this._handleAction(ev.data.actionName, ev.data.params); if (ev.data.onSuccess) { def.then(ev.data.onSuccess); }
            if (ev.data.onFailure) { def.guardedCatch(ev.data.onFailure); }
        }, _onEditMode: function () { this.$el.addClass('editing_mode'); this.do_hide(); }, _onMenuHovered: function (ev) { var $opened = this.$('> ul > li.dropdown.show'); if ($opened.length) { $opened.find('.dropdown-toggle').dropdown('toggle'); $(ev.currentTarget).find('.dropdown-toggle').dropdown('toggle'); } }, _onMobileMenuToggleClick: function () { this.$el.parent().toggleClass('o_mobile_menu_opened'); }, _onReadonlyMode: function () { this.$el.removeClass('editing_mode'); this.do_show(); }, _onSave: function (ev) { ev.data.defs.push(this._handleAction('on_save')); },
    }); var WebsiteNavbarActionWidget = Widget.extend({
        actions: {}, handleAction: function (actionName, params) {
            var action = this[this.actions[actionName]]; if (action) { return Promise.resolve(action.apply(this, params || [])); }
            return null;
        },
    }); websiteRootData.websiteRootRegistry.add(WebsiteNavbar, '#oe_main_menu_navbar'); return { WebsiteNavbar: WebsiteNavbar, websiteNavbarRegistry: websiteNavbarRegistry, WebsiteNavbarActionWidget: WebsiteNavbarActionWidget, };
});;

/* /website/static/src/js/show_password.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website.show_password', function (require) { 'use strict'; var publicWidget = require('web.public.widget'); publicWidget.registry.ShowPassword = publicWidget.Widget.extend({ selector: '#showPass', events: { 'mousedown': '_onShowText', 'touchstart': '_onShowText', }, destroy: function () { this._super(...arguments); $('body').off(".ShowPassword"); }, _onShowPassword: function () { this.$el.closest('.input-group').find('#password').attr('type', 'password'); }, _onShowText: function () { $('body').one('mouseup.ShowPassword touchend.ShowPassword', this._onShowPassword.bind(this)); this.$el.closest('.input-group').find('#password').attr('type', 'text'); }, }); return publicWidget.registry.ShowPassword; });;

/* /website/static/src/js/post_link.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website.post_link', function (require) {
    'use strict'; const publicWidget = require('web.public.widget'); const wUtils = require('website.utils'); publicWidget.registry.postLink = publicWidget.Widget.extend({
        selector: '.post_link', events: { 'click': '_onClickPost', }, start() { this.el.classList.add('o_post_link_js_loaded'); return this._super(...arguments); }, destroy() { this._super(...arguments); this.el.classList.remove('o_post_link_js_loaded'); }, _onClickPost: function (ev) {
            ev.preventDefault(); const url = this.el.dataset.post || this.el.href; let data = {}; for (let [key, value] of Object.entries(this.el.dataset)) { if (key.startsWith('post_')) { data[key.slice(5)] = value; } }
            wUtils.sendRequest(url, data);
        },
    });
});;

/* /website/static/src/js/user_custom_javascript.js defined in bundle 'web.assets_frontend_lazy' */
;

/* /website/static/src/snippets/s_share/000.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website.s_share', function (require) {
    'use strict'; const publicWidget = require('web.public.widget'); const ShareWidget = publicWidget.Widget.extend({
        selector: '.s_share, .oe_share', start: function () {
            const urlRegex = /(\?(?:|.*&)(?:u|url|body)=)(.*?)(&|#|$)/; const titleRegex = /(\?(?:|.*&)(?:title|text|subject|description)=)(.*?)(&|#|$)/; const mediaRegex = /(\?(?:|.*&)(?:media)=)(.*?)(&|#|$)/; const url = encodeURIComponent(window.location.href); const title = encodeURIComponent($('title').text()); const media = encodeURIComponent($('meta[property="og:image"]').attr('content')); this.$('a').each((index, element) => {
                const $a = $(element); $a.attr('href', (i, href) => {
                    return href.replace(urlRegex, (match, a, b, c) => { return a + url + c; }).replace(titleRegex, function (match, a, b, c) {
                        if ($a.hasClass('s_share_whatsapp')) { return a + title + url + c; }
                        return a + title + c;
                    }).replace(mediaRegex, (match, a, b, c) => { return a + media + c; });
                }); if ($a.attr('target') && $a.attr('target').match(/_blank/i) && !$a.closest('.o_editable').length) { $a.on('click', function () { window.open(this.href, '', 'menubar=no,toolbar=no,resizable=yes,scrollbars=yes,height=550,width=600'); return false; }); }
            }); return this._super.apply(this, arguments);
        },
    }); publicWidget.registry.share = ShareWidget; return ShareWidget;
});;

/* /website/static/src/snippets/s_facebook_page/000.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website.s_facebook_page', function (require) {
    'use strict'; var publicWidget = require('web.public.widget'); var utils = require('web.utils'); const FacebookPageWidget = publicWidget.Widget.extend({
        selector: '.o_facebook_page', disabledInEditableMode: false, start: function () {
            var def = this._super.apply(this, arguments); var params = _.pick(this.$el.data(), 'href', 'height', 'tabs', 'small_header', 'hide_cover', 'show_facepile'); if (!params.href) { return def; }
            params.width = utils.confine(Math.floor(this.$el.width()), 180, 500); var src = $.param.querystring('https://www.facebook.com/plugins/page.php', params); this.$iframe = $('<iframe/>', { src: src, class: 'o_temp_auto_element', width: params.width, height: params.height, css: { border: 'none', overflow: 'hidden', }, scrolling: 'no', frameborder: '0', allowTransparency: 'true', }); this.$el.append(this.$iframe); return def;
        }, destroy: function () { this._super.apply(this, arguments); if (this.$iframe) { this.$iframe.remove(); } },
    }); publicWidget.registry.facebookPage = FacebookPageWidget; return FacebookPageWidget;
});;

/* /website/static/src/snippets/s_image_gallery/000.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website.s_image_gallery', function (require) {
    'use strict'; var core = require('web.core'); var publicWidget = require('web.public.widget'); var qweb = core.qweb; const GalleryWidget = publicWidget.Widget.extend({
        selector: '.s_image_gallery:not(.o_slideshow)', xmlDependencies: ['/website/static/src/snippets/s_image_gallery/000.xml'], events: { 'click img': '_onClickImg', }, _onClickImg: function (ev) {
            if (this.$modal) { return; }
            var self = this; var $cur = $(ev.currentTarget); var $images = $cur.closest('.s_image_gallery').find('img'); var size = 0.8; var dimensions = { min_width: Math.round(window.innerWidth * size * 0.9), min_height: Math.round(window.innerHeight * size), max_width: Math.round(window.innerWidth * size * 0.9), max_height: Math.round(window.innerHeight * size), width: Math.round(window.innerWidth * size * 0.9), height: Math.round(window.innerHeight * size) }; var $img = ($cur.is('img') === true) ? $cur : $cur.closest('img'); const milliseconds = $cur.closest('.s_image_gallery').data('interval') || false; this.$modal = $(qweb.render('website.gallery.slideshow.lightbox', { images: $images.get(), index: $images.index($img), dim: dimensions, interval: milliseconds || 0, id: _.uniqueId('slideshow_'), })); this.$modal.modal({ keyboard: true, backdrop: true, }); this.$modal.on('hidden.bs.modal', function () { $(this).hide(); $(this).siblings().filter('.modal-backdrop').remove(); $(this).remove(); self.$modal = undefined; }); this.$modal.find('.modal-content, .modal-body.o_slideshow').css('height', '100%'); this.$modal.appendTo(document.body); this.$modal.one('shown.bs.modal', function () { self.trigger_up('widgets_start_request', { editableMode: false, $target: self.$modal.find('.modal-body.o_slideshow'), }); });
        },
    }); const GallerySliderWidget = publicWidget.Widget.extend({
        selector: '.o_slideshow', xmlDependencies: ['/website/static/src/snippets/s_image_gallery/000.xml'], disabledInEditableMode: false, start: function () {
            var self = this; this.$carousel = this.$target.is('.carousel') ? this.$target : this.$target.find('.carousel'); this.$indicator = this.$carousel.find('.carousel-indicators'); this.$prev = this.$indicator.find('li.o_indicators_left').css('visibility', ''); this.$next = this.$indicator.find('li.o_indicators_right').css('visibility', ''); var $lis = this.$indicator.find('li[data-slide-to]'); let indicatorWidth = this.$indicator.width(); if (indicatorWidth === 0) { const $indicatorParent = this.$indicator.parents().not(':visible').last(); if (!$indicatorParent[0].style.display) { $indicatorParent[0].style.display = 'block'; indicatorWidth = this.$indicator.width(); $indicatorParent[0].style.display = ''; } }
            let nbPerPage = Math.floor(indicatorWidth / $lis.first().outerWidth(true)) - 3; var realNbPerPage = nbPerPage || 1; var nbPages = Math.ceil($lis.length / realNbPerPage); var index; var page; update(); function hide() {
                $lis.each(function (i) { $(this).toggleClass('d-none', i < page * nbPerPage || i >= (page + 1) * nbPerPage); }); if (page <= 0) { self.$prev.detach(); } else { self.$prev.removeClass('d-none'); self.$prev.prependTo(self.$indicator); }
                if (page >= nbPages - 1) { self.$next.detach(); } else { self.$next.removeClass('d-none'); self.$next.appendTo(self.$indicator); }
            }
            function update() { const active = $lis.filter('.active'); index = active.length ? $lis.index(active) : 0; page = Math.floor(index / realNbPerPage); hide(); }
            this.$carousel.on('slide.bs.carousel.gallery_slider', function () { setTimeout(function () { var $item = self.$carousel.find('.carousel-inner .carousel-item-prev, .carousel-inner .carousel-item-next'); var index = $item.index(); $lis.removeClass('active').filter('[data-slide-to="' + index + '"]').addClass('active'); }, 0); }); this.$indicator.on('click.gallery_slider', '> li:not([data-slide-to])', function () { page += ($(this).hasClass('o_indicators_left') ? -1 : 1); page = Math.max(0, Math.min(nbPages - 1, page)); self.$carousel.carousel(page * realNbPerPage); if (!self.editableMode) { hide(); } }); this.$carousel.on('slid.bs.carousel.gallery_slider', update); return this._super.apply(this, arguments);
        }, destroy: function () {
            this._super.apply(this, arguments); if (!this.$indicator) { return; }
            this.$prev.prependTo(this.$indicator); this.$next.appendTo(this.$indicator); this.$carousel.off('.gallery_slider'); this.$indicator.off('.gallery_slider');
        },
    }); publicWidget.registry.gallery = GalleryWidget; publicWidget.registry.gallerySlider = GallerySliderWidget; return { GalleryWidget: GalleryWidget, GallerySliderWidget: GallerySliderWidget, };
});;

/* /website/static/src/snippets/s_countdown/000.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website.s_countdown', function (require) {
    'use strict'; const { ColorpickerWidget } = require('web.Colorpicker'); const core = require('web.core'); const publicWidget = require('web.public.widget'); const weUtils = require('web_editor.utils'); const qweb = core.qweb; const _t = core._t; const CountdownWidget = publicWidget.Widget.extend({
        selector: '.s_countdown', xmlDependencies: ['/website/static/src/snippets/s_countdown/000.xml'], disabledInEditableMode: false, defaultColor: 'rgba(0, 0, 0, 255)', start: function () {
            this.$wrapper = this.$('.s_countdown_canvas_wrapper'); this.hereBeforeTimerEnds = false; this.endAction = this.el.dataset.endAction; this.endTime = parseInt(this.el.dataset.endTime); this.size = parseInt(this.el.dataset.size); this.display = this.el.dataset.display; this.layout = this.el.dataset.layout; this.layoutBackground = this.el.dataset.layoutBackground; this.progressBarStyle = this.el.dataset.progressBarStyle; this.progressBarWeight = this.el.dataset.progressBarWeight; this.textColor = this._ensureCssColor(this.el.dataset.textColor); this.layoutBackgroundColor = this._ensureCssColor(this.el.dataset.layoutBackgroundColor); this.progressBarColor = this._ensureCssColor(this.el.dataset.progressBarColor); this.onlyOneUnit = this.display === 'd'; this.width = parseInt(this.size); if (this.layout === 'boxes') { this.width /= 1.75; }
            this._initTimeDiff(); this._render(); this.setInterval = setInterval(this._render.bind(this), 1000); return this._super(...arguments);
        }, destroy: function () { this.$('.s_countdown_end_redirect_message').remove(); this.$('canvas').remove(); this.$('.s_countdown_end_message').addClass('d-none'); this.$('.s_countdown_text_wrapper').remove(); this.$('.s_countdown_canvas_wrapper').removeClass('d-none'); clearInterval(this.setInterval); this._super(...arguments); }, _ensureCssColor: function (color) {
            if (ColorpickerWidget.isCSSColor(color)) { return color; }
            return weUtils.getCSSVariableValue(color) || this.defaultColor;
        }, _getDelta: function () { const currentTimestamp = Date.now() / 1000; return this.endTime - currentTimestamp; }, _handleEndCountdownAction: function () { if (this.endAction === 'redirect') { const redirectUrl = this.el.dataset.redirectUrl || '/'; if (this.hereBeforeTimerEnds) { setTimeout(() => window.location = redirectUrl, 500); } else { if (!this.$('.s_countdown_end_redirect_message').length) { const $container = this.$('> .container, > .container-fluid, > .o_container_small'); $container.append($(qweb.render('website.s_countdown.end_redirect_message', { redirectUrl: redirectUrl, }))); } } } else if (this.endAction === 'message') { this.$('.s_countdown_end_message').removeClass('d-none'); } }, _initTimeDiff: function () {
            const delta = this._getDelta(); this.diff = []; if (this._isUnitVisible('d') && !(this.onlyOneUnit && delta < 86400)) { this.diff.push({ canvas: $('<canvas/>', { class: 'o_temp_auto_element' }).appendTo(this.$wrapper)[0], total: 15, label: _t("Days"), nbSeconds: 86400, }); }
            if (this._isUnitVisible('h') || (this.onlyOneUnit && delta < 86400 && delta > 3600)) { this.diff.push({ canvas: $('<canvas/>', { class: 'o_temp_auto_element' }).appendTo(this.$wrapper)[0], total: 24, label: _t("Hours"), nbSeconds: 3600, }); }
            if (this._isUnitVisible('m') || (this.onlyOneUnit && delta < 3600 && delta > 60)) { this.diff.push({ canvas: $('<canvas/>', { class: 'o_temp_auto_element' }).appendTo(this.$wrapper)[0], total: 60, label: _t("Minutes"), nbSeconds: 60, }); }
            if (this._isUnitVisible('s') || (this.onlyOneUnit && delta < 60)) { this.diff.push({ canvas: $('<canvas/>', { class: 'o_temp_auto_element' }).appendTo(this.$wrapper)[0], total: 60, label: _t("Seconds"), nbSeconds: 1, }); }
        }, _isUnitVisible: function (unit) { return this.display.includes(unit); }, _render: function () {
            if (this.onlyOneUnit && this._getDelta() < this.diff[0].nbSeconds) { this.$('canvas').remove(); this._initTimeDiff(); }
            this._updateTimeDiff(); const hideCountdown = this.isFinished && !this.editableMode && this.$el.hasClass('hide-countdown'); if (this.layout === 'text') {
                this.$('canvas').addClass('d-none'); if (!this.$textWrapper) { this.$textWrapper = $('<span/>').attr({ class: 's_countdown_text_wrapper d-none', }); this.$textWrapper.text(_t("Countdown ends in")); this.$textWrapper.append($('<span/>').attr({ class: 's_countdown_text ml-1', })); this.$textWrapper.appendTo(this.$wrapper); }
                this.$textWrapper.toggleClass('d-none', hideCountdown); const countdownText = this.diff.map(e => e.nb + ' ' + e.label).join(', '); this.$('.s_countdown_text').text(countdownText.toLowerCase());
            } else {
                for (const val of this.diff) {
                    const canvas = val.canvas; const ctx = canvas.getContext("2d"); ctx.canvas.width = this.width; ctx.canvas.height = this.size; this._clearCanvas(ctx); $(canvas).toggleClass('d-none', hideCountdown); if (hideCountdown) { continue; }
                    if (this.layoutBackground !== 'none') { this._drawBgShape(ctx, this.layoutBackground === 'plain'); }
                    this._drawText(canvas, val.nb, val.label, this.layoutBackground === 'plain'); if (this.progressBarStyle === 'surrounded') { this._drawProgressBarBg(ctx, this.progressBarWeight === 'thin'); }
                    if (this.progressBarStyle !== 'none') { this._drawProgressBar(ctx, val.nb, val.total, this.progressBarWeight === 'thin'); }
                    $(canvas).toggleClass('mx-2', this.layout === 'boxes');
                }
            }
            if (this.isFinished) { clearInterval(this.setInterval); if (!this.editableMode) { this._handleEndCountdownAction(); } }
        }, _updateTimeDiff: function () {
            let delta = this._getDelta(); this.isFinished = delta < 0; if (this.isFinished) {
                for (const unitData of this.diff) { unitData.nb = 0; }
                return;
            }
            this.hereBeforeTimerEnds = true; for (const unitData of this.diff) { unitData.nb = Math.floor(delta / unitData.nbSeconds); delta -= unitData.nb * unitData.nbSeconds; }
        }, _clearCanvas: function (ctx) { ctx.clearRect(0, 0, this.size, this.size); }, _drawText: function (canvas, textNb, textUnit, full = false) {
            const ctx = canvas.getContext("2d"); const nbSize = this.size / 4; ctx.font = `${nbSize}px Arial`; ctx.fillStyle = this.textColor; ctx.textAlign = 'center'; ctx.textBaseline = 'middle'; ctx.fillText(textNb, canvas.width / 2, canvas.height / 2); const unitSize = this.size / 12; ctx.font = `${unitSize}px Arial`; ctx.fillText(textUnit, canvas.width / 2, canvas.height / 2 + nbSize / 1.5, this.width); if (this.layout === 'boxes' && this.layoutBackground !== 'none' && this.progressBarStyle === 'none') {
                let barWidth = this.size / (this.progressBarWeight === 'thin' ? 31 : 10); if (full) { barWidth = 0; }
                ctx.beginPath(); ctx.moveTo(barWidth, this.size / 2); ctx.lineTo(this.width - barWidth, this.size / 2); ctx.stroke();
            }
        }, _drawBgShape: function (ctx, full = false) {
            ctx.fillStyle = this.layoutBackgroundColor; ctx.beginPath(); if (this.layout === 'circle') {
                let rayon = this.size / 2; if (this.progressBarWeight === 'thin') { rayon -= full ? this.size / 29 : this.size / 15; } else { rayon -= full ? 0 : this.size / 10; }
                ctx.arc(this.size / 2, this.size / 2, rayon, 0, Math.PI * 2); ctx.fill();
            } else if (this.layout === 'boxes') {
                let barWidth = this.size / (this.progressBarWeight === 'thin' ? 31 : 10); if (full) { barWidth = 0; }
                ctx.fillStyle = this.layoutBackgroundColor; ctx.rect(barWidth, barWidth, this.width - barWidth * 2, this.size - barWidth * 2); ctx.fill(); const gradient = ctx.createLinearGradient(0, this.width, 0, 0); gradient.addColorStop(0, '#ffffff24'); gradient.addColorStop(1, this.layoutBackgroundColor); ctx.fillStyle = gradient; ctx.rect(barWidth, barWidth, this.width - barWidth * 2, this.size - barWidth * 2); ctx.fill(); $(ctx.canvas).css({ 'border-radius': '8px' });
            }
        }, _drawProgressBar: function (ctx, nbUnit, totalUnit, thinLine) { ctx.strokeStyle = this.progressBarColor; ctx.lineWidth = thinLine ? this.size / 35 : this.size / 10; if (this.layout === 'circle') { ctx.beginPath(); ctx.arc(this.size / 2, this.size / 2, this.size / 2 - this.size / 20, Math.PI / -2, (Math.PI * 2) * (nbUnit / totalUnit) + (Math.PI / -2)); ctx.stroke(); } else if (this.layout === 'boxes') { ctx.lineWidth *= 2; let pc = nbUnit / totalUnit * 100; const linesCoordFuncs = [(linePc) => [0 + ctx.lineWidth / 2, 0, (this.width - ctx.lineWidth / 2) * linePc / 25 + ctx.lineWidth / 2, 0], (linePc) => [this.width, 0 + ctx.lineWidth / 2, this.width, (this.size - ctx.lineWidth / 2) * linePc / 25 + ctx.lineWidth / 2], (linePc) => [this.width - ((this.width - ctx.lineWidth / 2) * linePc / 25) - ctx.lineWidth / 2, this.size, this.width - ctx.lineWidth / 2, this.size], (linePc) => [0, this.size - ((this.size - ctx.lineWidth / 2) * linePc / 25) - ctx.lineWidth / 2, 0, this.size - ctx.lineWidth / 2],]; while (pc > 0 && linesCoordFuncs.length) { const linePc = Math.min(pc, 25); const lineCoord = (linesCoordFuncs.shift())(linePc); ctx.beginPath(); ctx.moveTo(lineCoord[0], lineCoord[1]); ctx.lineTo(lineCoord[2], lineCoord[3]); ctx.stroke(); pc -= linePc; } } }, _drawProgressBarBg: function (ctx, thinLine) {
            ctx.strokeStyle = this.progressBarColor; ctx.globalAlpha = 0.2; ctx.lineWidth = thinLine ? this.size / 35 : this.size / 10; if (this.layout === 'circle') { ctx.beginPath(); ctx.arc(this.size / 2, this.size / 2, this.size / 2 - this.size / 20, 0, Math.PI * 2); ctx.stroke(); } else if (this.layout === 'boxes') { ctx.lineWidth *= 2; const points = [[0 + ctx.lineWidth / 2, 0, this.width, 0], [this.width, 0 + ctx.lineWidth / 2, this.width, this.size], [0, this.size, this.width - ctx.lineWidth / 2, this.size], [0, 0, 0, this.size - ctx.lineWidth / 2],]; while (points.length) { const point = points.shift(); ctx.beginPath(); ctx.moveTo(point[0], point[1]); ctx.lineTo(point[2], point[3]); ctx.stroke(); } }
            ctx.globalAlpha = 1;
        },
    }); publicWidget.registry.countdown = CountdownWidget; return CountdownWidget;
});;

/* /website/static/src/snippets/s_popup/000.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website.s_popup', function (require) {
    'use strict'; const config = require('web.config'); const dom = require('web.dom'); const publicWidget = require('web.public.widget'); const utils = require('web.utils'); const PopupWidget = publicWidget.Widget.extend({
        selector: '.s_popup', events: { 'click .js_close_popup': '_onCloseClick', 'hide.bs.modal': '_onHideModal', 'show.bs.modal': '_onShowModal', }, start: function () {
            this._popupAlreadyShown = !!utils.get_cookie(this.$el.attr('id')); if (!this._popupAlreadyShown) { this._bindPopup(); }
            return this._super(...arguments);
        }, destroy: function () { this._super.apply(this, arguments); $(document).off('mouseleave.open_popup'); this.$target.find('.modal').modal('hide'); clearTimeout(this.timeout); }, _bindPopup: function () {
            const $main = this.$target.find('.modal'); let display = $main.data('display'); let delay = $main.data('showAfter'); if (config.device.isMobile) {
                if (display === 'mouseExit') { display = 'afterDelay'; delay = 5000; }
                this.$('.modal').removeClass('s_popup_middle').addClass('s_popup_bottom');
            }
            if (display === 'afterDelay') { this.timeout = setTimeout(() => this._showPopup(), delay); } else { $(document).on('mouseleave.open_popup', () => this._showPopup()); }
        }, _hidePopup: function () { this.$target.find('.modal').modal('hide'); }, _showPopup: function () {
            if (this._popupAlreadyShown) { return; }
            this.$target.find('.modal').modal('show');
        }, _onCloseClick: function () { this._hidePopup(); }, _onHideModal: function () { const nbDays = this.$el.find('.modal').data('consentsDuration'); utils.set_cookie(this.$el.attr('id'), true, nbDays * 24 * 60 * 60); this._popupAlreadyShown = true; this.$target.find('.media_iframe_video iframe').each((i, iframe) => { iframe.src = ''; }); }, _onShowModal() { this.el.querySelectorAll('.media_iframe_video').forEach(media => { const iframe = media.querySelector('iframe'); iframe.src = media.dataset.oeExpression || media.dataset.src; }); },
    }); publicWidget.registry.popup = PopupWidget; function _updateScrollbar(ev) { const context = ev.data; const isOverflowing = dom.hasScrollableContent(context._element); if (context._isOverflowingWindow !== isOverflowing) { context._isOverflowingWindow = isOverflowing; context._checkScrollbar(); context._setScrollbar(); if (isOverflowing) { document.body.classList.add('modal-open'); } else { document.body.classList.remove('modal-open'); context._resetScrollbar(); } } }
    const _baseShowElement = $.fn.modal.Constructor.prototype._showElement; $.fn.modal.Constructor.prototype._showElement = function () { _baseShowElement.apply(this, arguments); if (this._element.classList.contains('s_popup_no_backdrop')) { $(this._element).on('content_changed.update_scrollbar', this, _updateScrollbar); $(window).on('resize.update_scrollbar', this, _updateScrollbar); this._odooLoadEventCaptureHandler = _.debounce(() => _updateScrollbar({ data: this }, 100)); this._element.addEventListener('load', this._odooLoadEventCaptureHandler, true); _updateScrollbar({ data: this }); } }; const _baseHideModal = $.fn.modal.Constructor.prototype._hideModal; $.fn.modal.Constructor.prototype._hideModal = function () { _baseHideModal.apply(this, arguments); this._element.classList.remove('s_popup_overflow_page'); $(this._element).off('content_changed.update_scrollbar'); $(window).off('resize.update_scrollbar'); if (this._odooLoadEventCaptureHandler) { this._element.removeEventListener('load', this._odooLoadEventCaptureHandler, true); delete this._odooLoadEventCaptureHandler; } }; const _baseSetScrollbar = $.fn.modal.Constructor.prototype._setScrollbar; $.fn.modal.Constructor.prototype._setScrollbar = function () {
        if (this._element.classList.contains('s_popup_no_backdrop')) { this._element.classList.toggle('s_popup_overflow_page', !!this._isOverflowingWindow); if (!this._isOverflowingWindow) { return; } }
        return _baseSetScrollbar.apply(this, arguments);
    }; const _baseGetScrollbarWidth = $.fn.modal.Constructor.prototype._getScrollbarWidth; $.fn.modal.Constructor.prototype._getScrollbarWidth = function () {
        if (this._element.classList.contains('s_popup_no_backdrop') && !this._isOverflowingWindow) { return 0; }
        return _baseGetScrollbarWidth.apply(this, arguments);
    }; return PopupWidget;
});;

/* /website/static/src/snippets/s_table_of_content/000.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website.s_table_of_content', function (require) {
    'use strict'; const publicWidget = require('web.public.widget'); const { extraMenuUpdateCallbacks } = require('website.content.menu'); const TableOfContent = publicWidget.Widget.extend({ selector: 'section .s_table_of_content_navbar_sticky', disabledInEditableMode: false, async start() { await this._super(...arguments); this.$scrollingElement = $().getScrollingElement(); this.previousPosition = -1; this._updateTableOfContentNavbarPosition(); extraMenuUpdateCallbacks.push(this._updateTableOfContentNavbarPosition.bind(this)); }, destroy() { this.$target.css('top', ''); this.$target.find('.s_table_of_content_navbar').css('top', ''); this._super(...arguments); }, _updateTableOfContentNavbarPosition() { let position = 0; const $fixedElements = $('.o_top_fixed_element'); _.each($fixedElements, el => position += $(el).outerHeight()); const isHorizontalNavbar = this.$target.hasClass('s_table_of_content_horizontal_navbar'); this.$target.css('top', isHorizontalNavbar ? position : ''); this.$target.find('.s_table_of_content_navbar').css('top', isHorizontalNavbar ? '' : position + 20); const $mainNavBar = $('#oe_main_menu_navbar'); position += $mainNavBar.length ? $mainNavBar.outerHeight() : 0; position += isHorizontalNavbar ? this.$target.outerHeight() : 0; if (this.previousPosition !== position) { this.$scrollingElement.scrollspy('dispose'); this.$scrollingElement.scrollspy({ target: '.s_table_of_content_navbar', method: 'offset', offset: position + 100, alwaysKeepFirstActive: true, }); this.previousPosition = position; } }, }); publicWidget.registry.anchorSlide.include({
        _computeExtraOffset() {
            let extraOffset = this._super(...arguments); if (this.$el.hasClass('table_of_content_link')) { const tableOfContentNavbarEl = this.$el.closest('.s_table_of_content_navbar_sticky.s_table_of_content_horizontal_navbar'); if (tableOfContentNavbarEl.length > 0) { extraOffset += $(tableOfContentNavbarEl).outerHeight(); } }
            return extraOffset;
        },
    }); publicWidget.registry.snippetTableOfContent = TableOfContent; return TableOfContent;
});;

/* /website/static/src/snippets/s_chart/000.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website.s_chart', function (require) {
    'use strict'; const publicWidget = require('web.public.widget'); const weUtils = require('web_editor.utils'); const ChartWidget = publicWidget.Widget.extend({
        selector: '.s_chart', disabledInEditableMode: false, jsLibs: ['/web/static/lib/Chart/Chart.js',], init: function (parent, options) { this._super.apply(this, arguments); this.style = window.getComputedStyle(document.documentElement); }, start: function () {
            const data = JSON.parse(this.el.dataset.data); data.datasets.forEach(el => {
                if (Array.isArray(el.backgroundColor)) { el.backgroundColor = el.backgroundColor.map(el => this._convertToCssColor(el)); el.borderColor = el.borderColor.map(el => this._convertToCssColor(el)); } else { el.backgroundColor = this._convertToCssColor(el.backgroundColor); el.borderColor = this._convertToCssColor(el.borderColor); }
                el.borderWidth = this.el.dataset.borderWidth;
            }); const chartData = { type: this.el.dataset.type, data: data, options: { legend: { display: this.el.dataset.legendPosition !== 'none', position: this.el.dataset.legendPosition, }, tooltips: { enabled: this.el.dataset.tooltipDisplay === 'true', }, title: { display: !!this.el.dataset.title, text: this.el.dataset.title, }, }, }; if (this.el.dataset.type === 'radar') { chartData.options.scale = { ticks: { beginAtZero: true, } }; } else if (['pie', 'doughnut'].includes(this.el.dataset.type)) {
                chartData.options.tooltips.callbacks = {
                    label: (tooltipItem, data) => {
                        const label = data.datasets[tooltipItem.datasetIndex].label; const secondLabel = data.labels[tooltipItem.index]; let final = label; if (label) { if (secondLabel) { final = label + ' - ' + secondLabel; } } else if (secondLabel) { final = secondLabel; }
                        return final + ':' + data.datasets[tooltipItem.datasetIndex].data[tooltipItem.index];
                    },
                };
            } else { chartData.options.scales = { xAxes: [{ stacked: this.el.dataset.stacked === 'true', ticks: { beginAtZero: true }, }], yAxes: [{ stacked: this.el.dataset.stacked === 'true', ticks: { beginAtZero: true }, }], }; }
            if (this.editableMode) { chartData.options.animation = { duration: 0, }; }
            const canvas = this.el.querySelector('canvas'); this.chart = new window.Chart(canvas, chartData); return this._super.apply(this, arguments);
        }, destroy: function () {
            if (this.chart) { this.chart.destroy(); this.el.querySelectorAll('.chartjs-size-monitor').forEach(el => el.remove()); }
            this._super.apply(this, arguments);
        }, _convertToCssColor: function (color) {
            if (!color) { return 'transparent'; }
            return weUtils.getCSSVariableValue(color, this.style) || color;
        },
    }); publicWidget.registry.chart = ChartWidget; return ChartWidget;
});;

/* /website/static/src/snippets/s_google_map/000.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website.s_google_map', function (require) {
    'use strict'; const publicWidget = require('web.public.widget'); publicWidget.registry.GoogleMap = publicWidget.Widget.extend({
        selector: '.s_google_map', disabledInEditableMode: false, mapColors: { lightMonoMap: [{ "featureType": "administrative.locality", "elementType": "all", "stylers": [{ "hue": "#2c2e33" }, { "saturation": 7 }, { "lightness": 19 }, { "visibility": "on" }] }, { "featureType": "landscape", "elementType": "all", "stylers": [{ "hue": "#ffffff" }, { "saturation": -100 }, { "lightness": 100 }, { "visibility": "simplified" }] }, { "featureType": "poi", "elementType": "all", "stylers": [{ "hue": "#ffffff" }, { "saturation": -100 }, { "lightness": 100 }, { "visibility": "off" }] }, { "featureType": "road", "elementType": "geometry", "stylers": [{ "hue": "#bbc0c4" }, { "saturation": -93 }, { "lightness": 31 }, { "visibility": "simplified" }] }, { "featureType": "road", "elementType": "labels", "stylers": [{ "hue": "#bbc0c4" }, { "saturation": -93 }, { "lightness": 31 }, { "visibility": "on" }] }, { "featureType": "road.arterial", "elementType": "labels", "stylers": [{ "hue": "#bbc0c4" }, { "saturation": -93 }, { "lightness": -2 }, { "visibility": "simplified" }] }, { "featureType": "road.local", "elementType": "geometry", "stylers": [{ "hue": "#e9ebed" }, { "saturation": -90 }, { "lightness": -8 }, { "visibility": "simplified" }] }, { "featureType": "transit", "elementType": "all", "stylers": [{ "hue": "#e9ebed" }, { "saturation": 10 }, { "lightness": 69 }, { "visibility": "on" }] }, { "featureType": "water", "elementType": "all", "stylers": [{ "hue": "#e9ebed" }, { "saturation": -78 }, { "lightness": 67 }, { "visibility": "simplified" }] }], lillaMap: [{ elementType: "labels", stylers: [{ saturation: -20 }] }, { featureType: "poi", elementType: "labels", stylers: [{ visibility: "off" }] }, { featureType: 'road.highway', elementType: 'labels', stylers: [{ visibility: "off" }] }, { featureType: "road.local", elementType: "labels.icon", stylers: [{ visibility: "off" }] }, { featureType: "road.arterial", elementType: "labels.icon", stylers: [{ visibility: "off" }] }, { featureType: "road", elementType: "geometry.stroke", stylers: [{ visibility: "off" }] }, { featureType: "transit", elementType: "geometry.fill", stylers: [{ hue: '#2d313f' }, { visibility: "on" }, { lightness: 5 }, { saturation: -20 }] }, { featureType: "poi", elementType: "geometry.fill", stylers: [{ hue: '#2d313f' }, { visibility: "on" }, { lightness: 5 }, { saturation: -20 }] }, { featureType: "poi.government", elementType: "geometry.fill", stylers: [{ hue: '#2d313f' }, { visibility: "on" }, { lightness: 5 }, { saturation: -20 }] }, { featureType: "poi.sport_complex", elementType: "geometry.fill", stylers: [{ hue: '#2d313f' }, { visibility: "on" }, { lightness: 5 }, { saturation: -20 }] }, { featureType: "poi.attraction", elementType: "geometry.fill", stylers: [{ hue: '#2d313f' }, { visibility: "on" }, { lightness: 5 }, { saturation: -20 }] }, { featureType: "poi.business", elementType: "geometry.fill", stylers: [{ hue: '#2d313f' }, { visibility: "on" }, { lightness: 5 }, { saturation: -20 }] }, { featureType: "transit", elementType: "geometry.fill", stylers: [{ hue: '#2d313f' }, { visibility: "on" }, { lightness: 5 }, { saturation: -20 }] }, { featureType: "transit.station", elementType: "geometry.fill", stylers: [{ hue: '#2d313f' }, { visibility: "on" }, { lightness: 5 }, { saturation: -20 }] }, { featureType: "landscape", stylers: [{ hue: '#2d313f' }, { visibility: "on" }, { lightness: 5 }, { saturation: -20 }] }, { featureType: "road", elementType: "geometry.fill", stylers: [{ hue: '#2d313f' }, { visibility: "on" }, { lightness: 5 }, { saturation: -20 }] }, { featureType: "road.highway", elementType: "geometry.fill", stylers: [{ hue: '#2d313f' }, { visibility: "on" }, { lightness: 5 }, { saturation: -20 }] }, { featureType: "water", elementType: "geometry", stylers: [{ hue: '#2d313f' }, { visibility: "on" }, { lightness: 5 }, { saturation: -20 }] }], blueMap: [{ stylers: [{ hue: "#00ffe6" }, { saturation: -20 }] }, { featureType: "road", elementType: "geometry", stylers: [{ lightness: 100 }, { visibility: "simplified" }] }, { featureType: "road", elementType: "labels", stylers: [{ visibility: "off" }] }], retroMap: [{ "featureType": "administrative", "elementType": "all", "stylers": [{ "visibility": "on" }, { "lightness": 33 }] }, { "featureType": "landscape", "elementType": "all", "stylers": [{ "color": "#f2e5d4" }] }, { "featureType": "poi.park", "elementType": "geometry", "stylers": [{ "color": "#c5dac6" }] }, { "featureType": "poi.park", "elementType": "labels", "stylers": [{ "visibility": "on" }, { "lightness": 20 }] }, { "featureType": "road", "elementType": "all", "stylers": [{ "lightness": 20 }] }, { "featureType": "road.highway", "elementType": "geometry", "stylers": [{ "color": "#c5c6c6" }] }, { "featureType": "road.arterial", "elementType": "geometry", "stylers": [{ "color": "#e4d7c6" }] }, { "featureType": "road.local", "elementType": "geometry", "stylers": [{ "color": "#fbfaf7" }] }, { "featureType": "water", "elementType": "all", "stylers": [{ "visibility": "on" }, { "color": "#acbcc9" }] }], flatMap: [{ "stylers": [{ "visibility": "off" }] }, { "featureType": "road", "stylers": [{ "visibility": "on" }, { "color": "#ffffff" }] }, { "featureType": "road.arterial", "stylers": [{ "visibility": "on" }, { "color": "#fee379" }] }, { "featureType": "road.highway", "stylers": [{ "visibility": "on" }, { "color": "#fee379" }] }, { "featureType": "landscape", "stylers": [{ "visibility": "on" }, { "color": "#f3f4f4" }] }, { "featureType": "water", "stylers": [{ "visibility": "on" }, { "color": "#7fc8ed" }] }, {}, { "featureType": "road", "elementType": "labels", "stylers": [{ "visibility": "on" }] }, { "featureType": "poi.park", "elementType": "geometry.fill", "stylers": [{ "visibility": "on" }, { "color": "#83cead" }] }, { "elementType": "labels", "stylers": [{ "visibility": "on" }] }, { "featureType": "landscape.man_made", "elementType": "geometry", "stylers": [{ "weight": 0.9 }, { "visibility": "off" }] }], cobaltMap: [{ "featureType": "all", "elementType": "all", "stylers": [{ "invert_lightness": true }, { "saturation": 10 }, { "lightness": 30 }, { "gamma": 0.5 }, { "hue": "#435158" }] }], cupertinoMap: [{ "featureType": "water", "elementType": "geometry", "stylers": [{ "color": "#a2daf2" }] }, { "featureType": "landscape.man_made", "elementType": "geometry", "stylers": [{ "color": "#f7f1df" }] }, { "featureType": "landscape.natural", "elementType": "geometry", "stylers": [{ "color": "#d0e3b4" }] }, { "featureType": "landscape.natural.terrain", "elementType": "geometry", "stylers": [{ "visibility": "off" }] }, { "featureType": "poi.park", "elementType": "geometry", "stylers": [{ "color": "#bde6ab" }] }, { "featureType": "poi", "elementType": "labels", "stylers": [{ "visibility": "off" }] }, { "featureType": "poi.medical", "elementType": "geometry", "stylers": [{ "color": "#fbd3da" }] }, { "featureType": "poi.business", "stylers": [{ "visibility": "off" }] }, { "featureType": "road", "elementType": "geometry.stroke", "stylers": [{ "visibility": "off" }] }, { "featureType": "road", "elementType": "labels", "stylers": [{ "visibility": "off" }] }, { "featureType": "road.highway", "elementType": "geometry.fill", "stylers": [{ "color": "#ffe15f" }] }, { "featureType": "road.highway", "elementType": "geometry.stroke", "stylers": [{ "color": "#efd151" }] }, { "featureType": "road.arterial", "elementType": "geometry.fill", "stylers": [{ "color": "#ffffff" }] }, { "featureType": "road.local", "elementType": "geometry.fill", "stylers": [{ "color": "black" }] }, { "featureType": "transit.station.airport", "elementType": "geometry.fill", "stylers": [{ "color": "#cfb2db" }] }], carMap: [{ "featureType": "administrative", "stylers": [{ "visibility": "off" }] }, { "featureType": "poi", "stylers": [{ "visibility": "simplified" }] }, { "featureType": "road", "stylers": [{ "visibility": "simplified" }] }, { "featureType": "water", "stylers": [{ "visibility": "simplified" }] }, { "featureType": "transit", "stylers": [{ "visibility": "simplified" }] }, { "featureType": "landscape", "stylers": [{ "visibility": "simplified" }] }, { "featureType": "road.highway", "stylers": [{ "visibility": "off" }] }, { "featureType": "road.local", "stylers": [{ "visibility": "on" }] }, { "featureType": "road.highway", "elementType": "geometry", "stylers": [{ "visibility": "on" }] }, { "featureType": "water", "stylers": [{ "color": "#84afa3" }, { "lightness": 52 }] }, { "stylers": [{ "saturation": -77 }] }, { "featureType": "road" }], bwMap: [{ stylers: [{ hue: "#00ffe6" }, { saturation: -100 }] }, { featureType: "road", elementType: "geometry", stylers: [{ lightness: 100 }, { visibility: "simplified" }] }, { featureType: "road", elementType: "labels", stylers: [{ visibility: "off" }] }], }, async start() {
            await this._super(...arguments); if (typeof google !== 'object' || typeof google.maps !== 'object') { await new Promise(resolve => { this.trigger_up('gmap_api_request', { editableMode: this.editableMode, onSuccess: () => resolve(), }); }); return; }
            const std = []; new google.maps.StyledMapType(std, { name: "Std Map" }); const myOptions = { zoom: 12, center: new google.maps.LatLng(50.854975, 4.3753899), mapTypeId: google.maps.MapTypeId.ROADMAP, panControl: false, zoomControl: false, mapTypeControl: false, streetViewControl: false, scrollwheel: false, mapTypeControlOptions: { mapTypeIds: [google.maps.MapTypeId.ROADMAP, 'map_style'] } }; const mapC = this.$('.map_container'); const map = new google.maps.Map(mapC.get(0), myOptions); const p = this.el.dataset.mapGps.substring(1).slice(0, -1).split(','); const gps = new google.maps.LatLng(p[0], p[1]); map.setCenter(gps); window.addEventListener('resize', () => { map.setCenter(gps); }); const markerOptions = { map: map, animation: google.maps.Animation.DROP, position: new google.maps.LatLng(p[0], p[1]) }; if (this.el.dataset.pinStyle === 'flat') { markerOptions.icon = '/website/static/src/img/snippets_thumbs/s_google_map_marker.png'; }
            new google.maps.Marker(markerOptions); map.setMapTypeId(google.maps.MapTypeId[this.el.dataset.mapType]); map.setZoom(parseInt(this.el.dataset.mapZoom)); const mapColorAttr = this.el.dataset.mapColor; if (mapColorAttr) { const mapColor = this.mapColors[mapColorAttr]; map.mapTypes.set('map_style', new google.maps.StyledMapType(mapColor, { name: "Styled Map" })); map.setMapTypeId('map_style'); }
        },
    });
});;

/* /website/static/src/snippets/s_dynamic_snippet/000.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website.s_dynamic_snippet', function (require) {
    'use strict'; const core = require('web.core'); const config = require('web.config'); const publicWidget = require('web.public.widget'); const DynamicSnippet = publicWidget.Widget.extend({
        selector: '.s_dynamic_snippet', xmlDependencies: ['/website/static/src/snippets/s_dynamic_snippet/000.xml'], read_events: { 'click [data-url]': '_onCallToAction', }, disabledInEditableMode: false, init: function () { this._super.apply(this, arguments); this.data = []; this.renderedContent = ''; this.isDesplayedAsMobile = config.device.isMobile; this.uniqueId = _.uniqueId('s_dynamic_snippet_'); this.template_key = 'website.s_dynamic_snippet.grid'; }, willStart: function () { return this._super.apply(this, arguments).then(() => Promise.all([this._fetchData(), this._manageWarningMessageVisibility()])); }, start: function () { return this._super.apply(this, arguments).then(() => { this._setupSizeChangedManagement(true); this._render(); this._toggleVisibility(true); }); }, destroy: function () { this._toggleVisibility(false); this._setupSizeChangedManagement(false); this._clearContent(); this._super.apply(this, arguments); }, _clearContent: function () { const $templateArea = this.$el.find('.dynamic_snippet_template'); this.trigger_up('widgets_stop_request', { $target: $templateArea, }); $templateArea.html(''); }, _isConfigComplete: function () { return this.$el.get(0).dataset.filterId !== undefined && this.$el.get(0).dataset.templateKey !== undefined; }, _getSearchDomain: function () { return []; }, _fetchData: function () { if (this._isConfigComplete()) { return this._rpc({ 'route': '/website/snippet/filters', 'params': { 'filter_id': parseInt(this.$el.get(0).dataset.filterId), 'template_key': this.$el.get(0).dataset.templateKey, 'limit': parseInt(this.$el.get(0).dataset.numberOfRecords), 'search_domain': this._getSearchDomain() }, }).then((data) => { this.data = data; }); } else { return new Promise((resolve) => { this.data = []; resolve(); }); } }, _mustMessageWarningBeHidden: function () { return this._isConfigComplete() || !this.editableMode; }, _manageWarningMessageVisibility: async function () { this.$el.find('.missing_option_warning').toggleClass('d-none', this._mustMessageWarningBeHidden()); }, _prepareContent: function () { if (this.$target[0].dataset.numberOfElements && this.$target[0].dataset.numberOfElementsSmallDevices) { this.renderedContent = core.qweb.render(this.template_key, this._getQWebRenderOptions()); } else { this.renderedContent = ''; } }, _getQWebRenderOptions: function () { return { chunkSize: parseInt(config.device.isMobile ? this.$target[0].dataset.numberOfElementsSmallDevices : this.$target[0].dataset.numberOfElements), data: this.data, uniqueId: this.uniqueId }; }, _render: function () {
            if (this.data.length) { this._prepareContent(); } else { this.renderedContent = ''; }
            this._renderContent();
        }, _renderContent: function () { const $templateArea = this.$el.find('.dynamic_snippet_template'); this.trigger_up('widgets_stop_request', { $target: $templateArea, }); $templateArea.html(this.renderedContent); this.trigger_up('widgets_start_request', { $target: $templateArea, editableMode: this.editableMode, }); }, _setupSizeChangedManagement: function (enable) { if (enable === true) { config.device.bus.on('size_changed', this, this._onSizeChanged); } else { config.device.bus.off('size_changed', this, this._onSizeChanged); } }, _toggleVisibility: function (visible) { this.$el.toggleClass('d-none', !visible); }, _onCallToAction: function (ev) { window.location = $(ev.currentTarget).attr('data-url'); }, _onSizeChanged: function (size) { if (this.isDesplayedAsMobile !== config.device.isMobile) { this.isDesplayedAsMobile = config.device.isMobile; this._render(); } },
    }); publicWidget.registry.dynamic_snippet = DynamicSnippet; return DynamicSnippet;
});;

/* /website/static/src/snippets/s_dynamic_snippet_carousel/000.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website.s_dynamic_snippet_carousel', function (require) { 'use strict'; const config = require('web.config'); const core = require('web.core'); const publicWidget = require('web.public.widget'); const DynamicSnippet = require('website.s_dynamic_snippet'); const DynamicSnippetCarousel = DynamicSnippet.extend({ selector: '.s_dynamic_snippet_carousel', xmlDependencies: (DynamicSnippet.prototype.xmlDependencies || []).concat(['/website/static/src/snippets/s_dynamic_snippet_carousel/000.xml']), init: function () { this._super.apply(this, arguments); this.template_key = 'website.s_dynamic_snippet.carousel'; }, _getQWebRenderOptions: function () { return Object.assign(this._super.apply(this, arguments), { interval: parseInt(this.$target[0].dataset.carouselInterval), },); }, _getQWebRenderParams: function () { return Object.assign(this._super.apply(this, arguments), { interval: parseInt(this.$target[0].dataset.carouselInterval), },); }, }); publicWidget.registry.dynamic_snippet_carousel = DynamicSnippetCarousel; return DynamicSnippetCarousel; });;

/* /website_sale/static/src/snippets/s_dynamic_snippet_products/000.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website_sale.s_dynamic_snippet_products', function (require) {
    'use strict'; const config = require('web.config'); const core = require('web.core'); const publicWidget = require('web.public.widget'); const DynamicSnippetCarousel = require('website.s_dynamic_snippet_carousel'); const DynamicSnippetProducts = DynamicSnippetCarousel.extend({
        selector: '.s_dynamic_snippet_products', _isConfigComplete: function () { return this._super.apply(this, arguments) && this.$el.get(0).dataset.productCategoryId !== undefined; }, _mustMessageWarningBeHidden: function () { const isInitialDrop = this.$el.get(0).dataset.templateKey === undefined; return isInitialDrop || this._super.apply(this, arguments); }, _getSearchDomain: function () {
            const searchDomain = this._super.apply(this, arguments); const productCategoryId = parseInt(this.$el.get(0).dataset.productCategoryId); if (productCategoryId >= 0) { searchDomain.push(['public_categ_ids', 'child_of', productCategoryId]); }
            return searchDomain;
        },
    }); publicWidget.registry.dynamic_snippet_products = DynamicSnippetProducts; return DynamicSnippetProducts;
});;

/* /website_form/static/src/snippets/s_website_form/000.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website_form.s_website_form', function (require) {
    'use strict'; var core = require('web.core'); var time = require('web.time'); const { ReCaptcha } = require('google_recaptcha.ReCaptchaV3'); var ajax = require('web.ajax'); var publicWidget = require('web.public.widget'); const dom = require('web.dom'); var _t = core._t; var qweb = core.qweb; publicWidget.registry.s_website_form = publicWidget.Widget.extend({
        selector: '.s_website_form form, form.s_website_form', xmlDependencies: ['/website_form/static/src/xml/website_form.xml'], events: { 'click .s_website_form_send, .o_website_form_send': 'send', }, init: function () { this._super(...arguments); this._recaptcha = new ReCaptcha(); this.__started = new Promise(resolve => this.__startResolve = resolve); }, willStart: function () {
            const res = this._super(...arguments); if (!this.$target[0].classList.contains('s_website_form_no_recaptcha')) { this._recaptchaLoaded = true; this._recaptcha.loadLibs(); }
            return res;
        }, start: function () {
            var self = this; var datepickers_options = { minDate: moment({ y: 1000 }), maxDate: moment({ y: 9999, M: 11, d: 31 }), calendarWeeks: true, icons: { time: 'fa fa-clock-o', date: 'fa fa-calendar', next: 'fa fa-chevron-right', previous: 'fa fa-chevron-left', up: 'fa fa-chevron-up', down: 'fa fa-chevron-down', }, locale: moment.locale(), format: time.getLangDatetimeFormat(), }; this.$target.find('.s_website_form_datetime, .o_website_form_datetime').datetimepicker(datepickers_options); datepickers_options.format = time.getLangDateFormat(); this.$target.find('.s_website_form_date, .o_website_form_date').datetimepicker(datepickers_options); var $values = $('[data-for=' + this.$target.attr('id') + ']'); if ($values.length) { var values = JSON.parse($values.data('values').replace('False', '""').replace('None', '""').replace(/'/g, '"')); var fields = _.pluck(this.$target.serializeArray(), 'name'); _.each(fields, function (field) { if (_.has(values, field)) { var $field = self.$target.find('input[name="' + field + '"], textarea[name="' + field + '"]'); if (!$field.val()) { $field.val(values[field]); $field.data('website_form_original_default_value', $field.val()); } } }); }
            return this._super(...arguments).then(() => this.__startResolve());
        }, destroy: function () { this._super.apply(this, arguments); this.$target.find('button').off('click'); this.$target[0].reset(); this.$target.find('.o_has_error').removeClass('o_has_error').find('.form-control, .custom-select').removeClass('is-invalid'); this.$target.find('#s_website_form_result, #o_website_form_result').empty(); this.$target.removeClass('d-none'); this.$target.parent().find('.s_website_form_end_message').addClass('d-none'); }, send: async function (e) {
            e.preventDefault(); this.$target.find('.s_website_form_send, .o_website_form_send').addClass('disabled').attr('disabled', 'disabled'); var self = this; self.$target.find('#s_website_form_result, #o_website_form_result').empty(); if (!self.check_error_fields({})) { self.update_status('error', _t("Please fill in the form correctly.")); return false; }
            this.form_fields = this.$target.serializeArray(); $.each(this.$target.find('input[type=file]'), function (outer_index, input) { $.each($(input).prop('files'), function (index, file) { self.form_fields.push({ name: input.name + '[' + outer_index + '][' + index + ']', value: file }); }); }); var form_values = {}; _.each(this.form_fields, function (input) { if (input.name in form_values) { if (Array.isArray(form_values[input.name])) { form_values[input.name].push(input.value); } else { form_values[input.name] = [form_values[input.name], input.value]; } } else { if (input.value !== '') { form_values[input.name] = input.value; } } }); this.$target.find('.s_website_form_field:not(.s_website_form_custom)').find('.s_website_form_date, .s_website_form_datetime').each(function () {
                var date = $(this).datetimepicker('viewDate').clone().locale('en'); var format = 'YYYY-MM-DD'; if ($(this).hasClass('s_website_form_datetime')) { date = date.utc(); format = 'YYYY-MM-DD HH:mm:ss'; }
                form_values[$(this).find('input').attr('name')] = date.format(format);
            }); if (this._recaptchaLoaded) { const tokenObj = await this._recaptcha.getToken('website_form'); if (tokenObj.token) { form_values['recaptcha_token_response'] = tokenObj.token; } else if (tokenObj.error) { self.update_status('error', tokenObj.error); return false; } }
            ajax.post(this.$target.attr('action') + (this.$target.data('force_action') || this.$target.data('model_name')), form_values).then(function (result_data) {
                self.$target.find('.s_website_form_send, .o_website_form_send').removeAttr('disabled').removeClass('disabled'); result_data = JSON.parse(result_data); if (!result_data.id) { self.update_status('error', result_data.error ? result_data.error : false); if (result_data.error_fields) { self.check_error_fields(result_data.error_fields); } } else {
                    let successMode = self.$target[0].dataset.successMode; let successPage = self.$target[0].dataset.successPage; if (!successMode) { successPage = self.$target.attr('data-success_page'); successMode = successPage ? 'redirect' : 'nothing'; }
                    switch (successMode) {
                        case 'redirect': successPage = successPage.startsWith("/#") ? successPage.slice(1) : successPage; if (successPage.charAt(0) === "#") { dom.scrollTo($(successPage)[0], { duration: 500, extraOffset: 0, }); } else { $(window.location).attr('href', successPage); }
                            break; case 'message': self.$target[0].classList.add('d-none'); self.$target[0].parentElement.querySelector('.s_website_form_end_message').classList.remove('d-none'); break; default: self.update_status('success'); break;
                    }
                    self.$target[0].reset();
                }
            }).guardedCatch(function () { self.update_status('error'); });
        }, check_error_fields: function (error_fields) {
            var self = this; var form_valid = true; this.$target.find('.form-field, .s_website_form_field').each(function (k, field) {
                var $field = $(field); var field_name = $field.find('.col-form-label').attr('for'); var inputs = $field.find('.s_website_form_input, .o_website_form_input').not('#editable_select'); var invalid_inputs = inputs.toArray().filter(function (input, k, inputs) {
                    if (input.required && input.type === 'checkbox') { var checkboxes = _.filter(inputs, function (input) { return input.required && input.type === 'checkbox'; }); return !_.any(checkboxes, checkbox => checkbox.checked); } else if ($(input).hasClass('s_website_form_date') || $(input).hasClass('o_website_form_date')) { if (!self.is_datetime_valid(input.value, 'date')) { return true; } } else if ($(input).hasClass('s_website_form_datetime') || $(input).hasClass('o_website_form_datetime')) { if (!self.is_datetime_valid(input.value, 'datetime')) { return true; } }
                    return !input.checkValidity();
                }); $field.removeClass('o_has_error').find('.form-control, .custom-select').removeClass('is-invalid'); if (invalid_inputs.length || error_fields[field_name]) {
                    $field.addClass('o_has_error').find('.form-control, .custom-select').addClass('is-invalid'); if (_.isString(error_fields[field_name])) { $field.popover({ content: error_fields[field_name], trigger: 'hover', container: 'body', placement: 'top' }); $field.data("bs.popover").config.content = error_fields[field_name]; $field.popover('show'); }
                    form_valid = false;
                }
            }); return form_valid;
        }, is_datetime_valid: function (value, type_of_date) { if (value === "") { return true; } else { try { this.parse_date(value, type_of_date); return true; } catch (e) { return false; } } }, parse_date: function (value, type_of_date, value_if_empty) {
            var date_pattern = time.getLangDateFormat(), time_pattern = time.getLangTimeFormat(); var date_pattern_wo_zero = date_pattern.replace('MM', 'M').replace('DD', 'D'), time_pattern_wo_zero = time_pattern.replace('HH', 'H').replace('mm', 'm').replace('ss', 's'); switch (type_of_date) {
                case 'datetime': var datetime = moment(value, [date_pattern + ' ' + time_pattern, date_pattern_wo_zero + ' ' + time_pattern_wo_zero], true); if (datetime.isValid()) { return time.datetime_to_str(datetime.toDate()); }
                    throw new Error(_.str.sprintf(_t("'%s' is not a correct datetime"), value)); case 'date': var date = moment(value, [date_pattern, date_pattern_wo_zero], true); if (date.isValid()) { return time.date_to_str(date.toDate()); }
                    throw new Error(_.str.sprintf(_t("'%s' is not a correct date"), value));
            }
            return value;
        }, update_status: function (status, message) {
            if (status !== 'success') { this.$target.find('.s_website_form_send, .o_website_form_send').removeAttr('disabled').removeClass('disabled'); }
            var $result = this.$('#s_website_form_result, #o_website_form_result'); if (status === 'error' && !message) { message = _t("An error has occured, the form has not been sent."); }
            this.__started.then(() => $result.replaceWith(qweb.render(`website_form.status_${status}`, { message: message, })));
        },
    });
});;

/* /website_mail/static/src/js/follow.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website_mail.follow', function (require) {
    'use strict'; var publicWidget = require('web.public.widget'); publicWidget.registry.follow = publicWidget.Widget.extend({
        selector: '#wrapwrap:has(.js_follow)', disabledInEditableMode: false, start: function () {
            var self = this; this.isUser = false; var $jsFollowEls = this.$el.find('.js_follow'); var always = function (data) { self.isUser = data[0].is_user; const $jsFollowToEnable = $jsFollowEls.filter(function () { const model = this.dataset.object; return model in data[1] && data[1][model].includes(parseInt(this.dataset.id)); }); self._toggleSubscription(true, data[0].email, $jsFollowToEnable); self._toggleSubscription(false, data[0].email, $jsFollowEls.not($jsFollowToEnable)); $jsFollowEls.removeClass('d-none'); }; const records = {}; for (const el of $jsFollowEls) {
                const model = el.dataset.object; if (!(model in records)) { records[model] = []; }
                records[model].push(parseInt(el.dataset.id));
            }
            this._rpc({ route: '/website_mail/is_follower', params: { records: records, }, }).then(always).guardedCatch(always); if (!this.editableMode) { $('.js_follow > .input-group-append.d-none').removeClass('d-none'); this.$target.find('.js_follow_btn, .js_unfollow_btn').on('click', function (event) { event.preventDefault(); self._onClick(event); }); }
            return this._super.apply(this, arguments);
        }, _toggleSubscription: function (follow, email, $jsFollowEls) { if (follow) { this._updateSubscriptionDOM(follow, email, $jsFollowEls); } else { for (const el of $jsFollowEls) { const follow = !email && el.getAttribute('data-unsubscribe'); this._updateSubscriptionDOM(follow, email, $(el)); } } }, _updateSubscriptionDOM: function (follow, email, $jsFollowEls) { $jsFollowEls.find('input.js_follow_email').val(email || "").attr("disabled", email && (follow || this.isUser) ? "disabled" : false); $jsFollowEls.attr("data-follow", follow ? 'on' : 'off'); }, _onClick: function (ev) {
            var self = this; var $jsFollow = $(ev.currentTarget).closest('.js_follow'); var $email = $jsFollow.find(".js_follow_email"); if ($email.length && !$email.val().match(/.+@.+/)) { $jsFollow.addClass('o_has_error').find('.form-control, .custom-select').addClass('is-invalid'); return false; }
            $jsFollow.removeClass('o_has_error').find('.form-control, .custom-select').removeClass('is-invalid'); var email = $email.length ? $email.val() : false; if (email || this.isUser) { this._rpc({ route: '/website_mail/follow', params: { 'id': +$jsFollow.data('id'), 'object': $jsFollow.data('object'), 'message_is_follower': $jsFollow.attr("data-follow") || "off", 'email': email, }, }).then(function (follow) { self._toggleSubscription(follow, email, $jsFollow); }); }
        },
    });
});;

/* /sale/static/src/js/variant_mixin.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('sale.VariantMixin', function (require) {
    'use strict'; var concurrency = require('web.concurrency'); var core = require('web.core'); var utils = require('web.utils'); var ajax = require('web.ajax'); var _t = core._t; var VariantMixin = {
        events: { 'change .css_attribute_color input': '_onChangeColorAttribute', 'change .main_product:not(.in_cart) input.js_quantity': 'onChangeAddQuantity', 'change [data-attribute_exclusions]': 'onChangeVariant' }, onChangeVariant: function (ev) {
            var $parent = $(ev.target).closest('.js_product'); if (!$parent.data('uniqueId')) { $parent.data('uniqueId', _.uniqueId()); }
            this._throttledGetCombinationInfo($parent.data('uniqueId'))(ev);
        }, _getCombinationInfo: function (ev) {
            var self = this; if ($(ev.target).hasClass('variant_custom_value')) { return Promise.resolve(); }
            var $parent = $(ev.target).closest('.js_product'); var qty = $parent.find('input[name="add_qty"]').val(); var combination = this.getSelectedVariantValues($parent); var parentCombination = $parent.find('ul[data-attribute_exclusions]').data('attribute_exclusions').parent_combination; var productTemplateId = parseInt($parent.find('.product_template_id').val()); self._checkExclusions($parent, combination); return ajax.jsonRpc(this._getUri('/sale/get_combination_info'), 'call', { 'product_template_id': productTemplateId, 'product_id': this._getProductId($parent), 'combination': combination, 'add_qty': parseInt(qty), 'pricelist_id': this.pricelistId || false, 'parent_combination': parentCombination, }).then(function (combinationData) { self._onChangeCombination(ev, $parent, combinationData); });
        }, handleCustomValues: function ($target) {
            var $variantContainer; var $customInput = false; if ($target.is('input[type=radio]') && $target.is(':checked')) { $variantContainer = $target.closest('ul').closest('li'); $customInput = $target; } else if ($target.is('select')) { $variantContainer = $target.closest('li'); $customInput = $target.find('option[value="' + $target.val() + '"]'); }
            if ($variantContainer) { if ($customInput && $customInput.data('is_custom') === 'True') { var attributeValueId = $customInput.data('value_id'); var attributeValueName = $customInput.data('value_name'); if ($variantContainer.find('.variant_custom_value').length === 0 || $variantContainer.find('.variant_custom_value').data('custom_product_template_attribute_value_id') !== parseInt(attributeValueId)) { $variantContainer.find('.variant_custom_value').remove(); var $input = $('<input>', { type: 'text', 'data-custom_product_template_attribute_value_id': attributeValueId, 'data-attribute_value_name': attributeValueName, class: 'variant_custom_value form-control' }); var isRadioInput = $target.is('input[type=radio]') && $target.closest('label.css_attribute_color').length === 0; if (isRadioInput && $customInput.data('is_single_and_custom') !== 'True') { $input.addClass('custom_value_radio'); $target.closest('div').after($input); } else { $input.attr('placeholder', attributeValueName); $input.addClass('custom_value_own_line'); $variantContainer.append($input); } } } else { $variantContainer.find('.variant_custom_value').remove(); } }
        }, onClickAddCartJSON: function (ev) {
            ev.preventDefault(); var $link = $(ev.currentTarget); var $input = $link.closest('.input-group').find("input"); var min = parseFloat($input.data("min") || 0); var max = parseFloat($input.data("max") || Infinity); var previousQty = parseFloat($input.val() || 0, 10); var quantity = ($link.has(".fa-minus").length ? -1 : 1) + previousQty; var newQty = quantity > min ? (quantity < max ? quantity : max) : min; if (newQty !== previousQty) { $input.val(newQty).trigger('change'); }
            return false;
        }, onChangeAddQuantity: function (ev) {
            var $parent; if ($(ev.currentTarget).closest('.oe_optional_products_modal').length > 0) { $parent = $(ev.currentTarget).closest('.oe_optional_products_modal'); } else if ($(ev.currentTarget).closest('form').length > 0) { $parent = $(ev.currentTarget).closest('form'); } else { $parent = $(ev.currentTarget).closest('.o_product_configurator'); }
            this.triggerVariantChange($parent);
        }, triggerVariantChange: function ($container) { var self = this; $container.find('ul[data-attribute_exclusions]').trigger('change'); $container.find('input.js_variant_change:checked, select.js_variant_change').each(function () { self.handleCustomValues($(this)); }); }, getCustomVariantValues: function ($container) { var variantCustomValues = []; $container.find('.variant_custom_value').each(function () { var $variantCustomValueInput = $(this); if ($variantCustomValueInput.length !== 0) { variantCustomValues.push({ 'custom_product_template_attribute_value_id': $variantCustomValueInput.data('custom_product_template_attribute_value_id'), 'attribute_value_name': $variantCustomValueInput.data('attribute_value_name'), 'custom_value': $variantCustomValueInput.val(), }); } }); return variantCustomValues; }, getNoVariantAttributeValues: function ($container) {
            var noVariantAttributeValues = []; var variantsValuesSelectors = ['input.no_variant.js_variant_change:checked', 'select.no_variant.js_variant_change']; $container.find(variantsValuesSelectors.join(',')).each(function () {
                var $variantValueInput = $(this); var singleNoCustom = $variantValueInput.data('is_single') && !$variantValueInput.data('is_custom'); if ($variantValueInput.is('select')) { $variantValueInput = $variantValueInput.find('option[value=' + $variantValueInput.val() + ']'); }
                if ($variantValueInput.length !== 0 && !singleNoCustom) { noVariantAttributeValues.push({ 'custom_product_template_attribute_value_id': $variantValueInput.data('value_id'), 'attribute_value_name': $variantValueInput.data('value_name'), 'value': $variantValueInput.val(), 'attribute_name': $variantValueInput.data('attribute_name'), 'is_custom': $variantValueInput.data('is_custom') }); }
            }); return noVariantAttributeValues;
        }, getSelectedVariantValues: function ($container) { var values = []; var unchangedValues = $container.find('div.oe_unchanged_value_ids').data('unchanged_value_ids') || []; var variantsValuesSelectors = ['input.js_variant_change:checked', 'select.js_variant_change']; _.each($container.find(variantsValuesSelectors.join(', ')), function (el) { values.push(+$(el).val()); }); return values.concat(unchangedValues); }, selectOrCreateProduct: function ($container, productId, productTemplateId, useAjax) {
            var self = this; productId = parseInt(productId); productTemplateId = parseInt(productTemplateId); var productReady = Promise.resolve(); if (productId) { productReady = Promise.resolve(productId); } else { var params = { product_template_id: productTemplateId, product_template_attribute_value_ids: JSON.stringify(self.getSelectedVariantValues($container)), }; var route = '/sale/create_product_variant'; if (useAjax) { productReady = ajax.jsonRpc(route, 'call', params); } else { productReady = this._rpc({ route: route, params: params }); } }
            return productReady;
        }, _checkExclusions: function ($parent, combination) {
            var self = this; var combinationData = $parent.find('ul[data-attribute_exclusions]').data('attribute_exclusions'); $parent.find('option, input, label').removeClass('css_not_available').attr('title', function () { return $(this).data('value_name') || ''; }).data('excluded-by', ''); if (combinationData.exclusions) { _.each(combination, function (current_ptav) { if (combinationData.exclusions.hasOwnProperty(current_ptav)) { _.each(combinationData.exclusions[current_ptav], function (excluded_ptav) { self._disableInput($parent, excluded_ptav, current_ptav, combinationData.mapped_attribute_names); }); } }); }
            _.each(combinationData.parent_exclusions, function (exclusions, excluded_by) { _.each(exclusions, function (ptav) { self._disableInput($parent, ptav, excluded_by, combinationData.mapped_attribute_names, combinationData.parent_product_name); }); });
        }, _getProductId: function ($parent) { return parseInt($parent.find('.product_id').val()); }, _disableInput: function ($parent, attributeValueId, excludedBy, attributeNames, productName) {
            var $input = $parent.find('option[value=' + attributeValueId + '], input[value=' + attributeValueId + ']'); $input.addClass('css_not_available'); $input.closest('label').addClass('css_not_available'); if (excludedBy && attributeNames) {
                var $target = $input.is('option') ? $input : $input.closest('label').add($input); var excludedByData = []; if ($target.data('excluded-by')) { excludedByData = JSON.parse($target.data('excluded-by')); }
                var excludedByName = attributeNames[excludedBy]; if (productName) { excludedByName = productName + ' (' + excludedByName + ')'; }
                excludedByData.push(excludedByName); $target.attr('title', _.str.sprintf(_t('Not available with %s'), excludedByData.join(', '))); $target.data('excluded-by', JSON.stringify(excludedByData));
            }
        }, _onChangeCombination: function (ev, $parent, combination) {
            var self = this; var $price = $parent.find(".oe_price:first .oe_currency_value"); var $default_price = $parent.find(".oe_default_price:first .oe_currency_value"); var $optional_price = $parent.find(".oe_optional:first .oe_currency_value"); $price.text(self._priceToStr(combination.price)); $default_price.text(self._priceToStr(combination.list_price)); var isCombinationPossible = true; if (!_.isUndefined(combination.is_combination_possible)) { isCombinationPossible = combination.is_combination_possible; }
            this._toggleDisable($parent, isCombinationPossible); if (combination.has_discounted_price) { $default_price.closest('.oe_website_sale').addClass("discount"); $optional_price.closest('.oe_optional').removeClass('d-none').css('text-decoration', 'line-through'); $default_price.parent().removeClass('d-none'); } else { $default_price.closest('.oe_website_sale').removeClass("discount"); $optional_price.closest('.oe_optional').addClass('d-none'); $default_price.parent().addClass('d-none'); }
            var rootComponentSelectors = ['tr.js_product', '.oe_website_sale', '.o_product_configurator']; if (!combination.product_id || !this.last_product_id || combination.product_id !== this.last_product_id) { this.last_product_id = combination.product_id; self._updateProductImage($parent.closest(rootComponentSelectors.join(', ')), combination.display_image, combination.product_id, combination.product_template_id, combination.carousel, isCombinationPossible); }
            $parent.find('.product_id').first().val(combination.product_id || 0).trigger('change'); $parent.find('.product_display_name').first().text(combination.display_name); $parent.find('.js_raw_price').first().text(combination.price).trigger('change'); this.handleCustomValues($(ev.target));
        }, _priceToStr: function (price) {
            var l10n = _t.database.parameters; var precision = 2; if ($('.decimal_precision').length) { precision = parseInt($('.decimal_precision').last().data('precision')); }
            var formatted = _.str.sprintf('%.' + precision + 'f', price).split('.'); formatted[0] = utils.insert_thousand_seps(formatted[0]); return formatted.join(l10n.decimal_point);
        }, _throttledGetCombinationInfo: _.memoize(function (uniqueId) { var dropMisordered = new concurrency.DropMisordered(); var _getCombinationInfo = _.throttle(this._getCombinationInfo.bind(this), 500); return function (ev, params) { return dropMisordered.add(_getCombinationInfo(ev, params)); }; }), _toggleDisable: function ($parent, isCombinationPossible) { $parent.toggleClass('css_not_available', !isCombinationPossible); }, _updateProductImage: function ($productContainer, displayImage, productId, productTemplateId) { var model = productId ? 'product.product' : 'product.template'; var modelId = productId || productTemplateId; var imageUrl = '/web/image/{0}/{1}/' + (this._productImageField ? this._productImageField : 'image_1024'); var imageSrc = imageUrl.replace("{0}", model).replace("{1}", modelId); var imagesSelectors = ['span[data-oe-model^="product."][data-oe-type="image"] img:first', 'img.product_detail_img', 'span.variant_image img', 'img.variant_image',]; var $img = $productContainer.find(imagesSelectors.join(', ')); if (displayImage) { $img.removeClass('invisible').attr('src', imageSrc); } else { $img.addClass('invisible'); } }, _onChangeColorAttribute: function (ev) { var $parent = $(ev.target).closest('.js_product'); $parent.find('.css_attribute_color').removeClass("active").filter(':has(input:checked)').addClass("active"); }, _getUri: function (uri) { return uri; }
    }; return VariantMixin;
});;

/* /website_sale/static/src/js/variant_mixin.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website_sale.VariantMixin', function (require) { 'use strict'; var VariantMixin = require('sale.VariantMixin'); VariantMixin._getUri = function (uri) { if (this.isWebsite) { return uri + '_website'; } else { return uri; } }; return VariantMixin; });;

/* /sale_product_configurator/static/src/js/product_configurator_modal.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('sale_product_configurator.OptionalProductsModal', function (require) {
    "use strict"; var ajax = require('web.ajax'); var Dialog = require('web.Dialog'); const OwlDialog = require('web.OwlDialog'); var ServicesMixin = require('web.ServicesMixin'); var VariantMixin = require('sale.VariantMixin'); var OptionalProductsModal = Dialog.extend(ServicesMixin, VariantMixin, {
        events: _.extend({}, Dialog.prototype.events, VariantMixin.events, { 'click a.js_add, a.js_remove': '_onAddOrRemoveOption', 'click button.js_add_cart_json': 'onClickAddCartJSON', 'change .in_cart input.js_quantity': '_onChangeQuantity', 'change .js_raw_price': '_computePriceTotal' }), init: function (parent, params) { var self = this; var options = _.extend({ size: 'large', buttons: [{ text: params.okButtonText, click: this._onConfirmButtonClick, classes: 'btn-primary' }, { text: params.cancelButtonText, click: this._onCancelButtonClick }], technical: !params.isWebsite, }, params || {}); this._super(parent, options); this.context = params.context; this.rootProduct = params.rootProduct; this.container = parent; this.pricelistId = params.pricelistId; this.previousModalHeight = params.previousModalHeight; this.dialogClass = 'oe_optional_products_modal'; this._productImageField = 'image_128'; this._opened.then(function () { if (self.previousModalHeight) { self.$el.closest('.modal-content').css('min-height', self.previousModalHeight + 'px'); } }); }, willStart: function () { var self = this; var uri = this._getUri("/sale_product_configurator/show_optional_products"); var getModalContent = ajax.jsonRpc(uri, 'call', { product_id: self.rootProduct.product_id, variant_values: self.rootProduct.variant_values, pricelist_id: self.pricelistId || false, add_qty: self.rootProduct.quantity, kwargs: { context: _.extend({ 'quantity': self.rootProduct.quantity }, this.context), } }).then(function (modalContent) { if (modalContent) { var $modalContent = $(modalContent); $modalContent = self._postProcessContent($modalContent); self.$content = $modalContent; } else { self.trigger('options_empty'); self.preventOpening = true; } }); var parentInit = self._super.apply(self, arguments); return Promise.all([getModalContent, parentInit]); }, open: function (options) {
            $('.tooltip').remove(); var self = this; this.appendTo($('<div/>')).then(function () { if (!self.preventOpening) { self.$modal.find(".modal-body").replaceWith(self.$el); self.$modal.attr('open', true); self.$modal.modal().appendTo(self.container); self.$modal.focus(); self._openedResolver(); OwlDialog.display(self); } }); if (options && options.shouldFocusButtons) { self._onFocusControlButton(); }
            return self;
        }, start: function () { var def = this._super.apply(this, arguments); var self = this; this.$el.find('input[name="add_qty"]').val(this.rootProduct.quantity); var $products = this.$el.find('tr.js_product'); _.each($products, function (el) { var $el = $(el); var uniqueId = self._getUniqueId(el); var productId = parseInt($el.find('input.product_id').val(), 10); if (productId === self.rootProduct.product_id) { self.rootProduct.unique_id = uniqueId; } else { el.dataset.parentUniqueId = self.rootProduct.unique_id; } }); return def.then(function () { self._opened.then(function () { self.triggerVariantChange(self.$el); }); }); }, getSelectedProducts: function () { var self = this; var products = [this.rootProduct]; this.$modal.find('.js_product.in_cart:not(.main_product)').each(function () { var $item = $(this); var quantity = parseFloat($item.find('input[name="add_qty"]').val().replace(',', '.') || 1); var parentUniqueId = this.dataset.parentUniqueId; var uniqueId = this.dataset.uniqueId; var productCustomVariantValues = self.getCustomVariantValues($(this)); var noVariantAttributeValues = self.getNoVariantAttributeValues($(this)); products.push({ 'product_id': parseInt($item.find('input.product_id').val(), 10), 'product_template_id': parseInt($item.find('input.product_template_id').val(), 10), 'quantity': quantity, 'parent_unique_id': parentUniqueId, 'unique_id': uniqueId, 'product_custom_attribute_values': productCustomVariantValues, 'no_variant_attribute_values': noVariantAttributeValues }); }); return products; }, _postProcessContent: function ($modalContent) {
            var productId = this.rootProduct.product_id; $modalContent.find('img:first').attr("src", "/web/image/product.product/" + productId + "/image_128"); if (this.rootProduct && (this.rootProduct.product_custom_attribute_values || this.rootProduct.no_variant_attribute_values)) { var $productDescription = $modalContent.find('.main_product').find('td.td-product_name div.text-muted.small > div:first'); var $updatedDescription = $('<div/>'); $updatedDescription.append($('<p>', { text: $productDescription.text() })); $.each(this.rootProduct.product_custom_attribute_values, function () { $updatedDescription.append($('<div>', { text: this.attribute_value_name + ': ' + this.custom_value })); }); $.each(this.rootProduct.no_variant_attribute_values, function () { if (this.is_custom !== 'True') { $updatedDescription.append($('<div>', { text: this.attribute_name + ': ' + this.attribute_value_name })); } }); $productDescription.replaceWith($updatedDescription); }
            return $modalContent;
        }, _onConfirmButtonClick: function () { this.trigger('confirm'); this.close(); }, _onCancelButtonClick: function () { this.trigger('back'); this.close(); }, _onAddOrRemoveOption: function (ev) {
            ev.preventDefault(); var self = this; var $target = $(ev.currentTarget); var $modal = $target.parents('.oe_optional_products_modal'); var $parent = $target.parents('.js_product:first'); $parent.find("a.js_add, span.js_remove").toggleClass('d-none'); $parent.find(".js_remove"); var productTemplateId = $parent.find(".product_template_id").val(); if ($target.hasClass('js_add')) { self._onAddOption($modal, $parent, productTemplateId); } else { self._onRemoveOption($modal, $parent); }
            self._computePriceTotal();
        }, _onAddOption: function ($modal, $parent, productTemplateId) {
            var self = this; var $selectOptionsText = $modal.find('.o_select_options'); var parentUniqueId = $parent[0].dataset.parentUniqueId; var $optionParent = $modal.find('tr.js_product[data-unique-id="' + parentUniqueId + '"]'); $parent.find('.td-product_name').removeAttr("colspan"); $parent.find('.td-qty').removeClass('d-none'); var productCustomVariantValues = self.getCustomVariantValues($parent); var noVariantAttributeValues = self.getNoVariantAttributeValues($parent); if (productCustomVariantValues || noVariantAttributeValues) {
                var $productDescription = $parent.find('td.td-product_name div.float-left'); var $customAttributeValuesDescription = $('<div>', { class: 'custom_attribute_values_description text-muted small' }); if (productCustomVariantValues.length !== 0 || noVariantAttributeValues.length !== 0) { $customAttributeValuesDescription.append($('<br/>')); }
                $.each(productCustomVariantValues, function () { $customAttributeValuesDescription.append($('<div>', { text: this.attribute_value_name + ': ' + this.custom_value })); }); $.each(noVariantAttributeValues, function () { if (this.is_custom !== 'True') { $customAttributeValuesDescription.append($('<div>', { text: this.attribute_name + ': ' + this.attribute_value_name })); } }); $productDescription.append($customAttributeValuesDescription);
            }
            var $tmpOptionParent = $optionParent; while ($tmpOptionParent.length) { $optionParent = $tmpOptionParent; $tmpOptionParent = $modal.find('tr.js_product.in_cart[data-parent-unique-id="' + $optionParent[0].dataset.uniqueId + '"]').last(); }
            $optionParent.after($parent); $parent.addClass('in_cart'); this.selectOrCreateProduct($parent, $parent.find('.product_id').val(), productTemplateId, true).then(function (productId) { $parent.find('.product_id').val(productId); ajax.jsonRpc(self._getUri("/sale_product_configurator/optional_product_items"), 'call', { 'product_id': productId, 'pricelist_id': self.pricelistId || false, }).then(function (addedItem) { var $addedItem = $(addedItem); $modal.find('tr:last').after($addedItem); self.$el.find('input[name="add_qty"]').trigger('change'); self.triggerVariantChange($addedItem); var parentUniqueId = $parent[0].dataset.uniqueId; var parentQty = $parent.find('input[name="add_qty"]').val(); $addedItem.filter('.js_product').each(function () { var $el = $(this); var uniqueId = self._getUniqueId(this); this.dataset.uniqueId = uniqueId; this.dataset.parentUniqueId = parentUniqueId; $el.find('input[name="add_qty"]').val(parentQty); }); if ($selectOptionsText.nextAll('.js_product').length === 0) { $selectOptionsText.hide(); } }); });
        }, _onRemoveOption: function ($modal, $parent) { var uniqueId = $parent[0].dataset.parentUniqueId; var qty = $modal.find('tr.js_product.in_cart[data-unique-id="' + uniqueId + '"]').find('input[name="add_qty"]').val(); $parent.removeClass('in_cart'); $parent.find('.td-product_name').attr("colspan", 2); $parent.find('.td-qty').addClass('d-none'); $parent.find('input[name="add_qty"]').val(qty); $parent.find('.custom_attribute_values_description').remove(); $modal.find('.o_select_options').show(); var productUniqueId = $parent[0].dataset.uniqueId; this._removeOptionOption($modal, productUniqueId); $modal.find('tr:last').after($parent); }, _removeOptionOption: function ($modal, optionUniqueId) { var self = this; $modal.find('tr.js_product[data-parent-unique-id="' + optionUniqueId + '"]').each(function () { var uniqueId = this.dataset.uniqueId; $(this).remove(); self._removeOptionOption($modal, uniqueId); }); }, _onChangeCombination: function (ev, $parent, combination) { $parent.find('.td-product_name .product-name').first().text(combination.display_name); VariantMixin._onChangeCombination.apply(this, arguments); this._computePriceTotal(); }, _onChangeQuantity: function (ev) {
            var $product = $(ev.target.closest('tr.js_product')); var qty = parseFloat($(ev.currentTarget).val()); var uniqueId = $product[0].dataset.uniqueId; this.$el.find('tr.js_product:not(.in_cart)[data-parent-unique-id="' + uniqueId + '"] input[name="add_qty"]').each(function () { $(this).val(qty); }); if (this._triggerPriceUpdateOnChangeQuantity()) { this.onChangeAddQuantity(ev); }
            if ($product.hasClass('main_product')) { this.rootProduct.quantity = qty; }
            this.trigger('update_quantity', this.rootProduct.quantity); this._computePriceTotal();
        }, _computePriceTotal: function () { if (this.$modal.find('.js_price_total').length) { var price = 0; this.$modal.find('.js_product.in_cart').each(function () { var quantity = parseFloat($(this).find('input[name="add_qty"]').first().val().replace(',', '.') || 1); price += parseFloat($(this).find('.js_raw_price').html()) * quantity; }); this.$modal.find('.js_price_total .oe_currency_value').text(this._priceToStr(parseFloat(price))); } }, _triggerPriceUpdateOnChangeQuantity: function () { return true; }, _getUniqueId: function (el) {
            if (!el.dataset.uniqueId) { el.dataset.uniqueId = parseInt(_.uniqueId(), 10); }
            return el.dataset.uniqueId;
        },
    }); return OptionalProductsModal;
});;

/* /website_sale_product_configurator/static/src/js/product_configurator_modal.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website_sale_product_configurator.OptionalProductsModal', function (require) { "use strict"; var OptionalProductsModal = require('sale_product_configurator.OptionalProductsModal'); OptionalProductsModal.include({ init: function (parent, params) { this._super.apply(this, arguments); this.isWebsite = params.isWebsite; this.dialogClass = 'oe_optional_products_modal' + (params.isWebsite ? ' oe_website_sale' : ''); }, _triggerPriceUpdateOnChangeQuantity: function () { return !this.isWebsite; } }); });;

/* /website_sale/static/src/js/website_sale.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website_sale.cart', function (require) {
    'use strict'; var publicWidget = require('web.public.widget'); var core = require('web.core'); var _t = core._t; var timeout; publicWidget.registry.websiteSaleCartLink = publicWidget.Widget.extend({
        selector: '#top_menu a[href$="/shop/cart"]', events: { 'mouseenter': '_onMouseEnter', 'mouseleave': '_onMouseLeave', 'click': '_onClick', }, init: function () { this._super.apply(this, arguments); this._popoverRPC = null; }, start: function () { this.$el.popover({ trigger: 'manual', animation: true, html: true, title: function () { return _t("My Cart"); }, container: 'body', placement: 'auto', template: '<div class="popover mycart-popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>' }); return this._super.apply(this, arguments); }, _onMouseEnter: function (ev) {
            var self = this; clearTimeout(timeout); $(this.selector).not(ev.currentTarget).popover('hide'); timeout = setTimeout(function () {
                if (!self.$el.is(':hover') || $('.mycart-popover:visible').length) { return; }
                self._popoverRPC = $.get("/shop/cart", { type: 'popover', }).then(function (data) { self.$el.data("bs.popover").config.content = data; self.$el.popover("show"); $('.popover').on('mouseleave', function () { self.$el.trigger('mouseleave'); }); });
            }, 300);
        }, _onMouseLeave: function (ev) {
            var self = this; setTimeout(function () {
                if ($('.popover:hover').length) { return; }
                if (!self.$el.is(':hover')) { self.$el.popover('hide'); }
            }, 1000);
        }, _onClick: function (ev) { clearTimeout(timeout); if (this._popoverRPC && this._popoverRPC.state() === 'pending') { ev.preventDefault(); var href = ev.currentTarget.href; this._popoverRPC.then(function () { window.location.href = href; }); } },
    });
}); odoo.define('website_sale.website_sale_category', function (require) { 'use strict'; var publicWidget = require('web.public.widget'); publicWidget.registry.websiteSaleCategory = publicWidget.Widget.extend({ selector: '#o_shop_collapse_category', events: { 'click .fa-chevron-right': '_onOpenClick', 'click .fa-chevron-down': '_onCloseClick', }, _onOpenClick: function (ev) { var $fa = $(ev.currentTarget); $fa.parent().siblings().find('.fa-chevron-down:first').click(); $fa.parents('li').find('ul:first').show('normal'); $fa.toggleClass('fa-chevron-down fa-chevron-right'); }, _onCloseClick: function (ev) { var $fa = $(ev.currentTarget); $fa.parent().find('ul:first').hide('normal'); $fa.toggleClass('fa-chevron-down fa-chevron-right'); }, }); }); odoo.define('website_sale.website_sale', function (require) {
    'use strict'; var core = require('web.core'); var config = require('web.config'); var publicWidget = require('web.public.widget'); var VariantMixin = require('sale.VariantMixin'); var wSaleUtils = require('website_sale.utils'); const wUtils = require('website.utils'); require("web.zoomodoo"); publicWidget.registry.WebsiteSale = publicWidget.Widget.extend(VariantMixin, {
        selector: '.oe_website_sale', events: _.extend({}, VariantMixin.events || {}, { 'change form .js_product:first input[name="add_qty"]': '_onChangeAddQuantity', 'mouseup .js_publish': '_onMouseupPublish', 'touchend .js_publish': '_onMouseupPublish', 'change .oe_cart input.js_quantity[data-product-id]': '_onChangeCartQuantity', 'click .oe_cart a.js_add_suggested_products': '_onClickSuggestedProduct', 'click a.js_add_cart_json': '_onClickAddCartJSON', 'click .a-submit': '_onClickSubmit', 'change form.js_attributes input, form.js_attributes select': '_onChangeAttribute', 'mouseup form.js_add_cart_json label': '_onMouseupAddCartLabel', 'touchend form.js_add_cart_json label': '_onMouseupAddCartLabel', 'click .show_coupon': '_onClickShowCoupon', 'submit .o_wsale_products_searchbar_form': '_onSubmitSaleSearch', 'change select[name="country_id"]': '_onChangeCountry', 'change #shipping_use_same': '_onChangeShippingUseSame', 'click .toggle_summary': '_onToggleSummary', 'click #add_to_cart, #buy_now, #products_grid .o_wsale_product_btn .a-submit': 'async _onClickAdd', 'click input.js_product_change': 'onChangeVariant', 'change .js_main_product [data-attribute_exclusions]': 'onChangeVariant', 'change oe_optional_products_modal [data-attribute_exclusions]': 'onChangeVariant', }), init: function () { this._super.apply(this, arguments); this._changeCartQuantity = _.debounce(this._changeCartQuantity.bind(this), 500); this._changeCountry = _.debounce(this._changeCountry.bind(this), 500); this.isWebsite = true; delete this.events['change .main_product:not(.in_cart) input.js_quantity']; delete this.events['change [data-attribute_exclusions]']; }, start() { const def = this._super(...arguments); this._applyHashFromSearch(); _.each(this.$('div.js_product'), function (product) { $('input.js_product_change', product).first().trigger('change'); }); this.triggerVariantChange(this.$el); this.$('select[name="country_id"]').change(); core.bus.on('resize', this, function () { if (config.device.size_class === config.device.SIZES.XL) { $('.toggle_summary_div').addClass('d-none d-xl-block'); } }); this._startZoom(); window.addEventListener('hashchange', () => { this._applyHash(); this.triggerVariantChange(this.$el); }); return def; }, getSelectedVariantValues: function ($container) {
            var combination = $container.find('input.js_product_change:checked').data('combination'); if (combination) { return combination; }
            return VariantMixin.getSelectedVariantValues.apply(this, arguments);
        }, _applyHash: function () { var hash = window.location.hash.substring(1); if (hash) { var params = $.deparam(hash); if (params['attr']) { var attributeIds = params['attr'].split(','); var $inputs = this.$('input.js_variant_change, select.js_variant_change option'); _.each(attributeIds, function (id) { var $toSelect = $inputs.filter('[data-value_id="' + id + '"]'); if ($toSelect.is('input[type="radio"]')) { $toSelect.prop('checked', true); } else if ($toSelect.is('option')) { $toSelect.prop('selected', true); } }); this._changeColorAttribute(); } } }, _setUrlHash: function ($parent) { var $attributes = $parent.find('input.js_variant_change:checked, select.js_variant_change option:selected'); var attributeIds = _.map($attributes, function (elem) { return $(elem).data('value_id'); }); history.replaceState(undefined, undefined, '#attr=' + attributeIds.join(',')); }, _changeColorAttribute: function () { $('.css_attribute_color').removeClass("active").filter(':has(input:checked)').addClass("active"); }, _changeCartQuantity: function ($input, value, $dom_optional, line_id, productIDs) {
            _.each($dom_optional, function (elem) { $(elem).find('.js_quantity').text(value); productIDs.push($(elem).find('span[data-product-id]').data('product-id')); }); $input.data('update_change', true); this._rpc({ route: "/shop/cart/update_json", params: { line_id: line_id, product_id: parseInt($input.data('product-id'), 10), set_qty: value }, }).then(function (data) {
                $input.data('update_change', false); var check_value = parseInt($input.val() || 0, 10); if (isNaN(check_value)) { check_value = 1; }
                if (value !== check_value) { $input.trigger('change'); return; }
                if (!data.cart_quantity) { return window.location = '/shop/cart'; }
                $input.val(data.quantity); wSaleUtils.updateCartNavBar(data); wSaleUtils.showWarning(data.warning);
            });
        }, _changeCountry: function () {
            if (!$("#country_id").val()) { return; }
            this._rpc({ route: "/shop/country_infos/" + $("#country_id").val(), params: { mode: $("#country_id").attr('mode'), }, }).then(function (data) {
                $("input[name='phone']").attr('placeholder', data.phone_code !== 0 ? '+' + data.phone_code : ''); var selectStates = $("select[name='state_id']"); if (selectStates.data('init') === 0 || selectStates.find('option').length === 1) {
                    if (data.states.length || data.state_required) { selectStates.html(''); _.each(data.states, function (x) { var opt = $('<option>').text(x[1]).attr('value', x[0]).attr('data-code', x[2]); selectStates.append(opt); }); selectStates.parent('div').show(); } else { selectStates.val('').parent('div').hide(); }
                    selectStates.data('init', 0);
                } else { selectStates.data('init', 0); }
                if (data.fields) {
                    if ($.inArray('zip', data.fields) > $.inArray('city', data.fields)) { $(".div_zip").before($(".div_city")); } else { $(".div_zip").after($(".div_city")); }
                    var all_fields = ["street", "zip", "city", "country_name"]; _.each(all_fields, function (field) { $(".checkout_autoformat .div_" + field.split('_')[0]).toggle($.inArray(field, data.fields) >= 0); });
                }
                if ($("label[for='zip']").length) { $("label[for='zip']").toggleClass('label-optional', !data.zip_required); $("label[for='zip']").get(0).toggleAttribute('required', !!data.zip_required); }
                if ($("label[for='zip']").length) { $("label[for='state_id']").toggleClass('label-optional', !data.state_required); $("label[for='state_id']").get(0).toggleAttribute('required', !!data.state_required); }
            });
        }, _getProductId: function ($parent) {
            if ($parent.find('input.js_product_change').length !== 0) { return parseInt($parent.find('input.js_product_change:checked').val()); }
            else { return VariantMixin._getProductId.apply(this, arguments); }
        }, _startZoom: function () {
            if (!config.device.isMobile) { var autoZoom = $('.ecom-zoomable').data('ecom-zoom-auto') || false, attach = '#o-carousel-product'; _.each($('.ecom-zoomable img[data-zoom]'), function (el) { onImageLoaded(el, function () { var $img = $(el); $img.zoomOdoo({ event: autoZoom ? 'mouseenter' : 'click', attach: attach }); $img.attr('data-zoom', 1); }); }); }
            function onImageLoaded(img, callback) { $(img).on('load', function () { callback(); }); if (img.complete) { callback(); } }
        }, _updateProductImage: function ($productContainer, displayImage, productId, productTemplateId, newCarousel, isCombinationPossible) {
            var $carousel = $productContainer.find('#o-carousel-product'); if (window.location.search.indexOf('enable_editor') === -1) { var $newCarousel = $(newCarousel); $carousel.after($newCarousel); $carousel.remove(); $carousel = $newCarousel; $carousel.carousel(0); this._startZoom(); this.trigger_up('widgets_start_request', { $target: $carousel }); }
            $carousel.toggleClass('css_not_available', !isCombinationPossible);
        }, _onClickAdd: function (ev) {
            ev.preventDefault(); var def = () => { this.isBuyNow = $(ev.currentTarget).attr('id') === 'buy_now'; return this._handleAdd($(ev.currentTarget).closest('form')); }; if ($('.js_add_cart_variants').children().length) { return this._getCombinationInfo(ev).then(() => { return !$(ev.target).closest('.js_product').hasClass("css_not_available") ? def() : Promise.resolve(); }); }
            return def();
        }, _handleAdd: function ($form) { var self = this; this.$form = $form; var productSelector = ['input[type="hidden"][name="product_id"]', 'input[type="radio"][name="product_id"]:checked']; var productReady = this.selectOrCreateProduct($form, parseInt($form.find(productSelector.join(', ')).first().val(), 10), $form.find('.product_template_id').val(), false); return productReady.then(function (productId) { $form.find(productSelector.join(', ')).val(productId); self.rootProduct = { product_id: productId, quantity: parseFloat($form.find('input[name="add_qty"]').val() || 1), product_custom_attribute_values: self.getCustomVariantValues($form.find('.js_product')), variant_values: self.getSelectedVariantValues($form.find('.js_product')), no_variant_attribute_values: self.getNoVariantAttributeValues($form.find('.js_product')) }; return self._onProductReady(); }); }, _onProductReady: function () { return this._submitForm(); }, _submitForm: function () {
            let params = this.rootProduct; params.add_qty = params.quantity; params.product_custom_attribute_values = JSON.stringify(params.product_custom_attribute_values); params.no_variant_attribute_values = JSON.stringify(params.no_variant_attribute_values); if (this.isBuyNow) { params.express = true; }
            return wUtils.sendRequest('/shop/cart/update', params);
        }, _onClickAddCartJSON: function (ev) { this.onClickAddCartJSON(ev); }, _onChangeAddQuantity: function (ev) { this.onChangeAddQuantity(ev); }, _onMouseupPublish: function (ev) { $(ev.currentTarget).parents('.thumbnail').toggleClass('disabled'); }, _onChangeCartQuantity: function (ev) {
            var $input = $(ev.currentTarget); if ($input.data('update_change')) { return; }
            var value = parseInt($input.val() || 0, 10); if (isNaN(value)) { value = 1; }
            var $dom = $input.closest('tr'); var $dom_optional = $dom.nextUntil(':not(.optional_product.info)'); var line_id = parseInt($input.data('line-id'), 10); var productIDs = [parseInt($input.data('product-id'), 10)]; this._changeCartQuantity($input, value, $dom_optional, line_id, productIDs);
        }, _onClickSuggestedProduct: function (ev) { $(ev.currentTarget).prev('input').val(1).trigger('change'); }, _onClickSubmit: function (ev, forceSubmit) {
            if ($(ev.currentTarget).is('#add_to_cart, #products_grid .a-submit') && !forceSubmit) { return; }
            var $aSubmit = $(ev.currentTarget); if (!ev.isDefaultPrevented() && !$aSubmit.is(".disabled")) { ev.preventDefault(); $aSubmit.closest('form').submit(); }
            if ($aSubmit.hasClass('a-submit-disable')) { $aSubmit.addClass("disabled"); }
            if ($aSubmit.hasClass('a-submit-loading')) { var loading = '<span class="fa fa-cog fa-spin"/>'; var fa_span = $aSubmit.find('span[class*="fa"]'); if (fa_span.length) { fa_span.replaceWith(loading); } else { $aSubmit.append(loading); } }
        }, _onChangeAttribute: function (ev) { if (!ev.isDefaultPrevented()) { ev.preventDefault(); $(ev.currentTarget).closest("form").submit(); } }, _onMouseupAddCartLabel: function (ev) {
            var $label = $(ev.currentTarget); var $price = $label.parents("form:first").find(".oe_price .oe_currency_value"); if (!$price.data("price")) { $price.data("price", parseFloat($price.text())); }
            var value = $price.data("price") + parseFloat($label.find(".badge span").text() || 0); var dec = value % 1; $price.html(value + (dec < 0.01 ? ".00" : (dec < 1 ? "0" : "")));
        }, _onClickShowCoupon: function (ev) { $(ev.currentTarget).hide(); $('.coupon_form').removeClass('d-none'); }, _onSubmitSaleSearch: function (ev) {
            if (!this.$('.dropdown_sorty_by').length) { return; }
            var $this = $(ev.currentTarget); if (!ev.isDefaultPrevented() && !$this.is(".disabled")) { ev.preventDefault(); var oldurl = $this.attr('action'); oldurl += (oldurl.indexOf("?") === -1) ? "?" : ""; var search = $this.find('input.search-query'); window.location = oldurl + '&' + search.attr('name') + '=' + encodeURIComponent(search.val()); }
        }, _onChangeCountry: function (ev) {
            if (!this.$('.checkout_autoformat').length) { return; }
            this._changeCountry();
        }, _onChangeShippingUseSame: function (ev) { $('.ship_to_other').toggle(!$(ev.currentTarget).prop('checked')); }, _toggleDisable: function ($parent, isCombinationPossible) { VariantMixin._toggleDisable.apply(this, arguments); $parent.find("#add_to_cart").toggleClass('disabled', !isCombinationPossible); $parent.find("#buy_now").toggleClass('disabled', !isCombinationPossible); }, onChangeVariant: function (ev) { var $component = $(ev.currentTarget).closest('.js_product'); $component.find('input').each(function () { var $el = $(this); $el.attr('checked', $el.is(':checked')); }); $component.find('select option').each(function () { var $el = $(this); $el.attr('selected', $el.is(':selected')); }); this._setUrlHash($component); return VariantMixin.onChangeVariant.apply(this, arguments); }, _onToggleSummary: function () { $('.toggle_summary_div').toggleClass('d-none'); $('.toggle_summary_div').removeClass('d-xl-block'); }, _applyHashFromSearch() {
            const params = $.deparam(window.location.search.slice(1)); if (params.attrib) {
                const dataValueIds = []; for (const attrib of [].concat(params.attrib)) { const attribSplit = attrib.split('-'); const attribValueSelector = `.js_variant_change[name="ptal-${attribSplit[0]}"][value="${attribSplit[1]}"]`; const attribValue = this.el.querySelector(attribValueSelector); if (attribValue !== null) { dataValueIds.push(attribValue.dataset.value_id); } }
                if (dataValueIds.length) { history.replaceState(undefined, undefined, `#attr=${dataValueIds.join(',')}`); }
            }
            this._applyHash();
        },
    }); publicWidget.registry.WebsiteSaleLayout = publicWidget.Widget.extend({
        selector: '.oe_website_sale', disabledInEditableMode: false, events: { 'change .o_wsale_apply_layout': '_onApplyShopLayoutChange', }, _onApplyShopLayoutChange: function (ev) {
            var switchToList = $(ev.currentTarget).find('.o_wsale_apply_list input').is(':checked'); if (!this.editableMode) { this._rpc({ route: '/shop/save_shop_layout_mode', params: { 'layout_mode': switchToList ? 'list' : 'grid', }, }); }
            var $grid = this.$('#products_grid'); $grid.find('*').css('transition', 'none'); $grid.toggleClass('o_wsale_layout_list', switchToList); void $grid[0].offsetWidth; $grid.find('*').css('transition', '');
        },
    }); publicWidget.registry.websiteSaleCart = publicWidget.Widget.extend({ selector: '.oe_website_sale .oe_cart', events: { 'click .js_change_shipping': '_onClickChangeShipping', 'click .js_edit_address': '_onClickEditAddress', 'click .js_delete_product': '_onClickDeleteProduct', }, _onClickChangeShipping: function (ev) { var $old = $('.all_shipping').find('.card.border.border-primary'); $old.find('.btn-ship').toggle(); $old.addClass('js_change_shipping'); $old.removeClass('border border-primary'); var $new = $(ev.currentTarget).parent('div.one_kanban').find('.card'); $new.find('.btn-ship').toggle(); $new.removeClass('js_change_shipping'); $new.addClass('border border-primary'); var $form = $(ev.currentTarget).parent('div.one_kanban').find('form.d-none'); $.post($form.attr('action'), $form.serialize() + '&xhr=1'); }, _onClickEditAddress: function (ev) { ev.preventDefault(); $(ev.currentTarget).closest('div.one_kanban').find('form.d-none').attr('action', '/shop/address').submit(); }, _onClickDeleteProduct: function (ev) { ev.preventDefault(); $(ev.currentTarget).closest('tr').find('.js_quantity').val(0).trigger('change'); }, });
});;

/* /website_sale/static/src/js/website_sale_utils.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website_sale.utils', function (require) {
    'use strict'; function animateClone($cart, $elem, offsetTop, offsetLeft) {
        if (!$cart.length) { return Promise.resolve(); }
        $cart.find('.o_animate_blink').addClass('o_red_highlight o_shadow_animation').delay(500).queue(function () { $(this).removeClass("o_shadow_animation").dequeue(); }).delay(2000).queue(function () { $(this).removeClass("o_red_highlight").dequeue(); }); return new Promise(function (resolve, reject) { var $imgtodrag = $elem.find('img').eq(0); if ($imgtodrag.length) { var $imgclone = $imgtodrag.clone().offset({ top: $imgtodrag.offset().top, left: $imgtodrag.offset().left }).addClass('o_website_sale_animate').appendTo(document.body).animate({ top: $cart.offset().top + offsetTop, left: $cart.offset().left + offsetLeft, width: 75, height: 75, }, 1000, 'easeInOutExpo'); $imgclone.animate({ width: 0, height: 0, }, function () { resolve(); $(this).detach(); }); } else { resolve(); } });
    }
    function updateCartNavBar(data) { $(".my_cart_quantity").parents('li.o_wsale_my_cart').removeClass('d-none').end().toggleClass('fa fa-warning', !data.cart_quantity).attr('title', data.warning).text(data.cart_quantity || '').hide().fadeIn(600); $(".js_cart_lines").first().before(data['website_sale.cart_lines']).end().remove(); $(".js_cart_summary").first().before(data['website_sale.short_cart_summary']).end().remove(); }
    function showWarning(message) {
        if (!message) { return; }
        var $page = $('.oe_website_sale'); var cart_alert = $page.children('#data_warning'); if (!cart_alert.length) { cart_alert = $('<div class="alert alert-danger alert-dismissible" role="alert" id="data_warning">' + '<button type="button" class="close" data-dismiss="alert">&times;</button> ' + '<span></span>' + '</div>').prependTo($page); }
        cart_alert.children('span:last-child').text(message);
    }
    return { animateClone: animateClone, updateCartNavBar: updateCartNavBar, showWarning: showWarning, };
});;

/* /website_sale/static/src/js/website_sale_payment.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website_sale.payment', function (require) { 'use strict'; var publicWidget = require('web.public.widget'); publicWidget.registry.WebsiteSalePayment = publicWidget.Widget.extend({ selector: '#wrapwrap:has(#checkbox_cgv)', events: { 'change #checkbox_cgv': '_onCGVCheckboxClick', }, start: function () { this.$checkbox = this.$('#checkbox_cgv'); this.$payButton = $('button#o_payment_form_pay'); this.$checkbox.trigger('change'); return this._super.apply(this, arguments); }, _adaptPayButton: function () { var disabledReasons = this.$payButton.data('disabled_reasons') || {}; disabledReasons.cgv = !this.$checkbox.prop('checked'); this.$payButton.data('disabled_reasons', disabledReasons); this.$payButton.prop('disabled', _.contains(disabledReasons, true)); }, _onCGVCheckboxClick: function () { this._adaptPayButton(); }, }); });;

/* /website_sale/static/src/js/website_sale_validate.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website_sale.validate', function (require) {
    'use strict'; var publicWidget = require('web.public.widget'); var core = require('web.core'); var _t = core._t; publicWidget.registry.websiteSaleValidate = publicWidget.Widget.extend({
        selector: 'div.oe_website_sale_tx_status[data-order-id]', start: function () { var def = this._super.apply(this, arguments); this._poll_nbr = 0; this._paymentTransationPollStatus(); return def; }, _paymentTransationPollStatus: function () {
            var self = this; this._rpc({ route: '/shop/payment/get_status/' + parseInt(this.$el.data('order-id')), }).then(function (result) {
                self._poll_nbr += 1; if (result.recall) { if (self._poll_nbr < 20) { setTimeout(function () { self._paymentTransationPollStatus(); }, Math.ceil(self._poll_nbr / 3) * 1000); } else { var $message = $(result.message); var $warning = $("<i class='fa fa-warning' style='margin-right:10px;'>"); $warning.attr("title", _t("We are waiting for confirmation from the bank or the payment provider")); $message.find('span:first').prepend($warning); result.message = $message.html(); } }
                self.$el.html(result.message);
            });
        },
    });
});;

/* /website_sale/static/src/js/website_sale_recently_viewed.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website_sale.recently_viewed', function (require) {
    var concurrency = require('web.concurrency'); var config = require('web.config'); var core = require('web.core'); var publicWidget = require('web.public.widget'); var utils = require('web.utils'); var wSaleUtils = require('website_sale.utils'); var qweb = core.qweb; publicWidget.registry.productsRecentlyViewedSnippet = publicWidget.Widget.extend({
        selector: '.s_wsale_products_recently_viewed', xmlDependencies: ['/website_sale/static/src/xml/website_sale_recently_viewed.xml'], disabledInEditableMode: false, read_events: { 'click .js_add_cart': '_onAddToCart', 'click .js_remove': '_onRemove', }, init: function () { this._super.apply(this, arguments); this._dp = new concurrency.DropPrevious(); this.uniqueId = _.uniqueId('o_carousel_recently_viewed_products_'); this._onResizeChange = _.debounce(this._addCarousel, 100); }, start: function () { this._dp.add(this._fetch()).then(this._render.bind(this)); $(window).resize(() => { this._onResizeChange(); }); return this._super.apply(this, arguments); }, destroy: function () { this._super(...arguments); this.$el.addClass('d-none'); this.$el.find('.slider').html(''); }, _fetch: function () {
            return this._rpc({ route: '/shop/products/recently_viewed', }).then(res => {
                var products = res['products']; if (this.editableMode && (!products || !products.length)) { return { 'products': [{ id: 0, website_url: '#', display_name: 'Product 1', price: '$ <span class="oe_currency_value">750.00</span>', }, { id: 0, website_url: '#', display_name: 'Product 2', price: '$ <span class="oe_currency_value">750.00</span>', }, { id: 0, website_url: '#', display_name: 'Product 3', price: '$ <span class="oe_currency_value">750.00</span>', }, { id: 0, website_url: '#', display_name: 'Product 4', price: '$ <span class="oe_currency_value">750.00</span>', }], }; }
                return res;
            });
        }, _render: function (res) {
            var products = res['products']; var mobileProducts = [], webProducts = [], productsTemp = []; _.each(products, function (product) {
                if (productsTemp.length === 4) { webProducts.push(productsTemp); productsTemp = []; }
                productsTemp.push(product); mobileProducts.push([product]);
            }); if (productsTemp.length) { webProducts.push(productsTemp); }
            this.mobileCarousel = $(qweb.render('website_sale.productsRecentlyViewed', { uniqueId: this.uniqueId, productFrame: 1, productsGroups: mobileProducts, })); this.webCarousel = $(qweb.render('website_sale.productsRecentlyViewed', { uniqueId: this.uniqueId, productFrame: 4, productsGroups: webProducts, })); this._addCarousel(); this.$el.toggleClass('d-none', !(products && products.length));
        }, _addCarousel: function () { var carousel = config.device.size_class <= config.device.SIZES.SM ? this.mobileCarousel : this.webCarousel; this.$('.slider').html(carousel).css('display', ''); }, _onAddToCart: function (ev) { var self = this; var $card = $(ev.currentTarget).closest('.card'); this._rpc({ route: "/shop/cart/update_json", params: { product_id: $card.find('input[data-product-id]').data('product-id'), add_qty: 1 }, }).then(function (data) { wSaleUtils.updateCartNavBar(data); var $navButton = $('header .o_wsale_my_cart').first(); var fetch = self._fetch(); var animation = wSaleUtils.animateClone($navButton, $(ev.currentTarget).parents('.o_carousel_product_card'), 25, 40); Promise.all([fetch, animation]).then(function (values) { self._render(values[0]); }); }); }, _onRemove: function (ev) { var self = this; var $card = $(ev.currentTarget).closest('.card'); this._rpc({ route: "/shop/products/recently_viewed_delete", params: { product_id: $card.find('input[data-product-id]').data('product-id'), }, }).then(function (data) { self._render(data); }); },
    }); publicWidget.registry.productsRecentlyViewedUpdate = publicWidget.Widget.extend({
        selector: '#product_detail', events: { 'change input.product_id[name="product_id"]': '_onProductChange', }, debounceValue: 8000, init: function () { this._super.apply(this, arguments); this._onProductChange = _.debounce(this._onProductChange, this.debounceValue); }, _updateProductView: function ($input) {
            var productId = parseInt($input.val()); var cookieName = 'seen_product_id_' + productId; if (!parseInt(this.el.dataset.viewTrack, 10)) { return; }
            if (utils.get_cookie(cookieName)) { return; }
            if ($(this.el).find('.js_product.css_not_available').length) { return; }
            this._rpc({ route: '/shop/products/recently_viewed_update', params: { product_id: productId, } }).then(function (res) {
                if (res && res.visitor_uuid) { utils.set_cookie('visitor_uuid', res.visitor_uuid); }
                utils.set_cookie(cookieName, productId, 30 * 60);
            });
        }, _onProductChange: function (ev) { this._updateProductView($(ev.currentTarget)); },
    });
});;

/* /website_sale/static/src/js/website_sale_tracking.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website_sale.tracking', function (require) {
    var publicWidget = require('web.public.widget'); publicWidget.registry.websiteSaleTracking = publicWidget.Widget.extend({
        selector: '.oe_website_sale', events: { 'click form[action="/shop/cart/update"] a.a-submit': '_onAddProductIntoCart', 'click a[href="/shop/checkout"]': '_onCheckoutStart', 'click div.oe_cart a[href^="/web?redirect"][href$="/shop/checkout"]': '_onCustomerSignin', 'click form[action="/shop/confirm_order"] a.a-submit': '_onOrder', 'click form[target="_self"] button[type=submit]': '_onOrderPayment', }, start: function () {
            var self = this; if (this.$el.is('#product_detail')) { var productID = this.$('input[name="product_id"]').attr('value'); this._vpv('/stats/ecom/product_view/' + productID); }
            if (this.$('div.oe_website_sale_tx_status').length) {
                this._trackGA('require', 'ecommerce'); var orderID = this.$('div.oe_website_sale_tx_status').data('order-id'); this._vpv('/stats/ecom/order_confirmed/' + orderID); this._rpc({ route: '/shop/tracking_last_order/', }).then(function (o) {
                    self._trackGA('ecommerce:clear'); if (o.transaction && o.lines) { self._trackGA('ecommerce:addTransaction', o.transaction); _.forEach(o.lines, function (line) { self._trackGA('ecommerce:addItem', line); }); }
                    self._trackGA('ecommerce:send');
                });
            }
            return this._super.apply(this, arguments);
        }, _trackGA: function () { var websiteGA = window.ga || function () { }; websiteGA.apply(this, arguments); }, _vpv: function (page) { this._trackGA('send', 'pageview', { 'page': page, 'title': document.title, }); }, _onAddProductIntoCart: function () { var productID = this.$('input[name="product_id"]').attr('value'); this._vpv('/stats/ecom/product_add_to_cart/' + productID); }, _onCheckoutStart: function () { this._vpv('/stats/ecom/customer_checkout'); }, _onCustomerSignin: function () { this._vpv('/stats/ecom/customer_signin'); }, _onOrder: function () {
            if ($('#top_menu [href="/web/login"]').length) { this._vpv('/stats/ecom/customer_signup'); }
            this._vpv('/stats/ecom/order_checkout');
        }, _onOrderPayment: function () { var method = $('#payment_method input[name=acquirer]:checked').nextAll('span:first').text(); this._vpv('/stats/ecom/order_payment/' + method); },
    });
});;

/* /website_sale/static/src/snippets/s_products_searchbar/000.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website_sale.s_products_searchbar', function (require) {
    'use strict'; const concurrency = require('web.concurrency'); const publicWidget = require('web.public.widget'); const { qweb } = require('web.core'); publicWidget.registry.productsSearchBar = publicWidget.Widget.extend({
        selector: '.o_wsale_products_searchbar_form', xmlDependencies: ['/website_sale/static/src/xml/website_sale_utils.xml'], events: { 'input .search-query': '_onInput', 'focusout': '_onFocusOut', 'keydown .search-query': '_onKeydown', }, autocompleteMinWidth: 300, init: function () { this._super.apply(this, arguments); this._dp = new concurrency.DropPrevious(); this._onInput = _.debounce(this._onInput, 400); this._onFocusOut = _.debounce(this._onFocusOut, 100); }, start: function () {
            this.$input = this.$('.search-query'); this.order = this.$('.o_wsale_search_order_by').val(); this.limit = parseInt(this.$input.data('limit')); this.displayDescription = !!this.$input.data('displayDescription'); this.displayPrice = !!this.$input.data('displayPrice'); this.displayImage = !!this.$input.data('displayImage'); if (this.limit) { this.$input.attr('autocomplete', 'off'); }
            return this._super.apply(this, arguments);
        }, destroy() { this._super(...arguments); this._render(null); }, _adaptToScrollingParent() { const bcr = this.el.getBoundingClientRect(); this.$menu[0].style.setProperty('position', 'fixed', 'important'); this.$menu[0].style.setProperty('top', `${bcr.bottom}px`, 'important'); this.$menu[0].style.setProperty('left', `${bcr.left}px`, 'important'); this.$menu[0].style.setProperty('max-width', `${bcr.width}px`, 'important'); this.$menu[0].style.setProperty('max-height', `${document.body.clientHeight - bcr.bottom - 16}px`, 'important'); }, _fetch: function () { return this._rpc({ route: '/shop/products/autocomplete', params: { 'term': this.$input.val(), 'options': { 'order': this.order, 'limit': this.limit, 'display_description': this.displayDescription, 'display_price': this.displayPrice, 'max_nb_chars': Math.round(Math.max(this.autocompleteMinWidth, parseInt(this.$el.width())) * 0.22), }, }, }); }, _render: function (res) {
            if (this._scrollingParentEl) { this._scrollingParentEl.removeEventListener('scroll', this._menuScrollAndResizeHandler); window.removeEventListener('resize', this._menuScrollAndResizeHandler); delete this._scrollingParentEl; delete this._menuScrollAndResizeHandler; }
            var $prevMenu = this.$menu; this.$el.toggleClass('dropdown show', !!res); if (res) {
                var products = res['products']; this.$menu = $(qweb.render('website_sale.productsSearchBar.autocomplete', { products: products, hasMoreProducts: products.length < res['products_count'], currency: res['currency'], widget: this, })); const mutedItemTextEl = this.$menu.find('span.dropdown-item-text.text-muted')[0]; if (mutedItemTextEl) { const newItemTextEl = document.createElement('span'); newItemTextEl.classList.add('dropdown-item-text'); mutedItemTextEl.after(newItemTextEl); mutedItemTextEl.classList.remove('dropdown-item-text'); newItemTextEl.appendChild(mutedItemTextEl); }
                this.$menu.css('min-width', this.autocompleteMinWidth); const megaMenuEl = this.el.closest('.o_mega_menu'); if (megaMenuEl) { const navbarEl = this.el.closest('.navbar'); const navbarTogglerEl = navbarEl ? navbarEl.querySelector('.navbar-toggler') : null; if (navbarTogglerEl && navbarTogglerEl.clientWidth < 1) { this._scrollingParentEl = megaMenuEl; this._menuScrollAndResizeHandler = () => this._adaptToScrollingParent(); this._scrollingParentEl.addEventListener('scroll', this._menuScrollAndResizeHandler); window.addEventListener('resize', this._menuScrollAndResizeHandler); this._adaptToScrollingParent(); } }
                this.$el.append(this.$menu);
            }
            if ($prevMenu) { $prevMenu.remove(); }
        }, _onInput: function () {
            if (!this.limit) { return; }
            this._dp.add(this._fetch()).then(this._render.bind(this));
        }, _onFocusOut: function () { if (!this.$el.has(document.activeElement).length) { this._render(); } }, _onKeydown: function (ev) {
            switch (ev.which) {
                case $.ui.keyCode.ESCAPE: this._render(); break; case $.ui.keyCode.UP: case $.ui.keyCode.DOWN: ev.preventDefault(); if (this.$menu) { let $element = ev.which === $.ui.keyCode.UP ? this.$menu.children().last() : this.$menu.children().first(); $element.focus(); }
                    break;
            }
        },
    });
});;

/* /website_sale_stock/static/src/js/variant_mixin.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website_sale_stock.VariantMixin', function (require) {
    'use strict'; var VariantMixin = require('sale.VariantMixin'); var publicWidget = require('web.public.widget'); var ajax = require('web.ajax'); var core = require('web.core'); var QWeb = core.qweb; var xml_load = ajax.loadXML('/website_sale_stock/static/src/xml/website_sale_stock_product_availability.xml', QWeb); VariantMixin._onChangeCombinationStock = function (ev, $parent, combination) {
        var product_id = 0; if ($parent.find('input.product_id:checked').length) { product_id = $parent.find('input.product_id:checked').val(); } else { product_id = $parent.find('.product_id').val(); }
        var isMainProduct = combination.product_id && ($parent.is('.js_main_product') || $parent.is('.main_product')) && combination.product_id === parseInt(product_id); if (!this.isWebsite || !isMainProduct) { return; }
        var qty = $parent.find('input[name="add_qty"]').val(); $parent.find('#add_to_cart').removeClass('out_of_stock'); $parent.find('#buy_now').removeClass('out_of_stock'); if (combination.product_type === 'product' && _.contains(['always', 'threshold'], combination.inventory_availability)) {
            combination.virtual_available -= parseInt(combination.cart_qty); if (combination.virtual_available < 0) { combination.virtual_available = 0; }
            if (qty > combination.virtual_available) { var $input_add_qty = $parent.find('input[name="add_qty"]'); qty = combination.virtual_available || 1; $input_add_qty.val(qty); }
            if (qty > combination.virtual_available || combination.virtual_available < 1 || qty < 1) { $parent.find('#add_to_cart').addClass('disabled out_of_stock'); $parent.find('#buy_now').addClass('disabled out_of_stock'); }
        }
        xml_load.then(function () { $('.oe_website_sale').find('.availability_message_' + combination.product_template).remove(); var $message = $(QWeb.render('website_sale_stock.product_availability', combination)); $('div.availability_messages').html($message); });
    }; publicWidget.registry.WebsiteSale.include({ _onChangeCombination: function () { this._super.apply(this, arguments); VariantMixin._onChangeCombinationStock.apply(this, arguments); } }); return VariantMixin;
});;

/* /website_sale_delivery/static/src/js/website_sale_delivery.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website_sale_delivery.checkout', function (require) {
    'use strict'; var core = require('web.core'); var publicWidget = require('web.public.widget'); var _t = core._t; var concurrency = require('web.concurrency'); var dp = new concurrency.DropPrevious(); publicWidget.registry.websiteSaleDelivery = publicWidget.Widget.extend({
        selector: '.oe_website_sale', events: { 'change select[name="shipping_id"]': '_onSetAddress', 'click #delivery_carrier .o_delivery_carrier_select': '_onCarrierClick', }, start: function () {
            var self = this; var $carriers = $('#delivery_carrier input[name="delivery_type"]'); var $payButton = $('#o_payment_form_pay'); if ($carriers.length > 0) {
                if ($carriers.filter(':checked').length === 0) { $payButton.prop('disabled', true); var disabledReasons = $payButton.data('disabled_reasons') || {}; disabledReasons.carrier_selection = true; $payButton.data('disabled_reasons', disabledReasons); }
                $carriers.filter(':checked').click();
            }
            _.each($carriers, function (carrierInput, k) { self._showLoading($(carrierInput)); self._rpc({ route: '/shop/carrier_rate_shipment', params: { 'carrier_id': carrierInput.value, }, }).then(self._handleCarrierUpdateResultBadge.bind(self)); }); return this._super.apply(this, arguments);
        }, _showLoading: function ($carrierInput) { $carrierInput.siblings('.o_wsale_delivery_badge_price').html('<span class="fa fa-spinner fa-spin"/>'); }, _handleCarrierUpdateResult: function (result) { this._handleCarrierUpdateResultBadge(result); var $payButton = $('#o_payment_form_pay'); var $amountDelivery = $('#order_delivery .monetary_field'); var $amountUntaxed = $('#order_total_untaxed .monetary_field'); var $amountTax = $('#order_total_taxes .monetary_field'); var $amountTotal = $('#order_total .monetary_field, #amount_total_summary.monetary_field'); if (result.status === true) { $amountDelivery.html(result.new_amount_delivery); $amountUntaxed.html(result.new_amount_untaxed); $amountTax.html(result.new_amount_tax); $amountTotal.html(result.new_amount_total); var disabledReasons = $payButton.data('disabled_reasons') || {}; disabledReasons.carrier_selection = false; $payButton.data('disabled_reasons', disabledReasons); $payButton.prop('disabled', _.contains($payButton.data('disabled_reasons'), true)); } else { $amountDelivery.html(result.new_amount_delivery); $amountUntaxed.html(result.new_amount_untaxed); $amountTax.html(result.new_amount_tax); $amountTotal.html(result.new_amount_total); } }, _handleCarrierUpdateResultBadge: function (result) {
            var $carrierBadge = $('#delivery_carrier input[name="delivery_type"][value=' + result.carrier_id + '] ~ .o_wsale_delivery_badge_price'); if (result.status === true) {
                if (result.is_free_delivery) { $carrierBadge.text(_t('Free')); } else { $carrierBadge.html(result.new_amount_delivery); }
                $carrierBadge.removeClass('o_wsale_delivery_carrier_error');
            } else { $carrierBadge.addClass('o_wsale_delivery_carrier_error'); $carrierBadge.text(result.error_message); }
        }, _onCarrierClick: function (ev) { var $radio = $(ev.currentTarget).find('input[type="radio"]'); this._showLoading($radio); $radio.prop("checked", true); var $payButton = $('#o_payment_form_pay'); $payButton.prop('disabled', true); var disabledReasons = $payButton.data('disabled_reasons') || {}; disabledReasons.carrier_selection = true; $payButton.data('disabled_reasons', disabledReasons); dp.add(this._rpc({ route: '/shop/update_carrier', params: { carrier_id: $radio.val(), }, })).then(this._handleCarrierUpdateResult.bind(this)); }, _onSetAddress: function (ev) { var value = $(ev.currentTarget).val(); var $providerFree = $('select[name="country_id"]:not(.o_provider_restricted), select[name="state_id"]:not(.o_provider_restricted)'); var $providerRestricted = $('select[name="country_id"].o_provider_restricted, select[name="state_id"].o_provider_restricted'); if (value === 0) { $providerFree.hide().attr('disabled', true); $providerRestricted.show().attr('disabled', false).change(); } else { $providerFree.show().attr('disabled', false).change(); $providerRestricted.hide().attr('disabled', true); } },
    });
});;

/* /website_sale_wishlist/static/src/js/website_sale_wishlist.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website_sale_wishlist.wishlist', function (require) {
    "use strict"; var publicWidget = require('web.public.widget'); var wSaleUtils = require('website_sale.utils'); var VariantMixin = require('sale.VariantMixin'); publicWidget.registry.ProductWishlist = publicWidget.Widget.extend(VariantMixin, {
        selector: '.oe_website_sale', events: { 'click .o_wsale_my_wish': '_onClickMyWish', 'click .o_add_wishlist, .o_add_wishlist_dyn': '_onClickAddWish', 'change input.product_id': '_onChangeVariant', 'change input.js_product_change': '_onChangeProduct', 'click .wishlist-section .o_wish_rm': '_onClickWishRemove', 'click .wishlist-section .o_wish_add': '_onClickWishAdd', }, init: function (parent) { this._super.apply(this, arguments); this.wishlistProductIDs = []; }, willStart: function () { var self = this; var def = this._super.apply(this, arguments); var wishDef = $.get('/shop/wishlist', { count: 1, }).then(function (res) { self.wishlistProductIDs = JSON.parse(res); }); return Promise.all([def, wishDef]); }, start: function () {
            var def = this._super.apply(this, arguments); this._updateWishlistView(); if (this.$('input.js_product_change').length) { this.$('input.js_product_change:checked').first().trigger('change'); } else { this.$('input.product_id').first().trigger('change'); }
            return def;
        }, _addNewProducts: function ($el) {
            var self = this; var productID = $el.data('product-product-id'); if ($el.hasClass('o_add_wishlist_dyn')) { productID = parseInt($el.closest('.js_product').find('.product_id:checked').val());; }
            var $form = $el.closest('form'); var templateId = $form.find('.product_template_id').val(); if (!templateId) { templateId = $el.data('product-template-id'); }
            $el.prop("disabled", true).addClass('disabled'); var productReady = this.selectOrCreateProduct($el.closest('form'), productID, templateId, false); productReady.then(function (productId) {
                productId = parseInt(productId, 10); if (productId && !_.contains(self.wishlistProductIDs, productId)) {
                    return self._rpc({ route: '/shop/wishlist/add', params: { product_id: productId, }, }).then(function () {
                        var $navButton = $('header .o_wsale_my_wish').first(); self.wishlistProductIDs.push(productId); self._updateWishlistView(); wSaleUtils.animateClone($navButton, $el.closest('form'), 25, 40); let currentProductId = $el.data('product-product-id'); if ($el.hasClass('o_add_wishlist_dyn')) { currentProductId = parseInt($el.closest('.js_product').find('.product_id:checked').val()); }
                        if (productId === currentProductId) { $el.prop("disabled", true).addClass('disabled'); }
                    }).guardedCatch(function () { $el.prop("disabled", false).removeClass('disabled'); });
                }
            }).guardedCatch(function () { $el.prop("disabled", false).removeClass('disabled'); });
        }, _updateWishlistView: function () {
            const $wishButton = $('.o_wsale_my_wish'); if ($wishButton.hasClass('o_wsale_my_wish_hide_empty')) { $wishButton.toggleClass('d-none', !this.wishlistProductIDs.length); }
            $wishButton.find('.my_wish_quantity').text(this.wishlistProductIDs.length);
        }, _removeWish: function (e, deferred_redirect) {
            var tr = $(e.currentTarget).parents('tr'); var wish = tr.data('wish-id'); var product = tr.data('product-id'); var self = this; this._rpc({ route: '/shop/wishlist/remove/' + wish, }).then(function () { $(tr).hide(); }); this.wishlistProductIDs = _.without(this.wishlistProductIDs, product); if (this.wishlistProductIDs.length === 0) { if (deferred_redirect) { deferred_redirect.then(function () { self._redirectNoWish(); }); } }
            this._updateWishlistView();
        }, _addOrMoveWish: function (e) { var $navButton = $('header .o_wsale_my_cart').first(); var tr = $(e.currentTarget).parents('tr'); var product = tr.data('product-id'); $('.o_wsale_my_cart').removeClass('d-none'); wSaleUtils.animateClone($navButton, tr, 25, 40); if ($('#b2b_wish').is(':checked')) { return this._addToCart(product, tr.find('add_qty').val() || 1); } else { var adding_deffered = this._addToCart(product, tr.find('add_qty').val() || 1); this._removeWish(e, adding_deffered); return adding_deffered; } }, _addToCart: function (productID, qty_id) { return this._rpc({ route: "/shop/cart/update_json", params: { product_id: parseInt(productID, 10), add_qty: parseInt(qty_id, 10), display: false, }, }).then(function (data) { wSaleUtils.updateCartNavBar(data); wSaleUtils.showWarning(data.warning); }); }, _redirectNoWish: function () { window.location.href = '/shop/cart'; }, _onClickMyWish: function () {
            if (this.wishlistProductIDs.length === 0) { this._updateWishlistView(); this._redirectNoWish(); return; }
            window.location = '/shop/wishlist';
        }, _onClickAddWish: function (ev) { this._addNewProducts($(ev.currentTarget)); }, _onChangeVariant: function (ev) {
            var $input = $(ev.target); var $parent = $input.closest('.js_product'); var $el = $parent.find("[data-action='o_wishlist']"); if (!_.contains(this.wishlistProductIDs, parseInt($input.val(), 10))) { $el.prop("disabled", false).removeClass('disabled').removeAttr('disabled'); } else { $el.prop("disabled", true).addClass('disabled').attr('disabled', 'disabled'); }
            $el.data('product-product-id', parseInt($input.val(), 10));
        }, _onChangeProduct: function (ev) {
            var productID = ev.currentTarget.value; var $el = $(ev.target).closest('.js_add_cart_variants').find("[data-action='o_wishlist']"); if (!_.contains(this.wishlistProductIDs, parseInt(productID, 10))) { $el.prop("disabled", false).removeClass('disabled').removeAttr('disabled'); } else { $el.prop("disabled", true).addClass('disabled').attr('disabled', 'disabled'); }
            $el.data('product-product-id', productID);
        }, _onClickWishRemove: function (ev) { this._removeWish(ev, false); }, _onClickWishAdd: function (ev) { var self = this; this.$('.wishlist-section .o_wish_add').addClass('disabled'); this._addOrMoveWish(ev).then(function () { self.$('.wishlist-section .o_wish_add').removeClass('disabled'); }); },
    });
});;

/* /website_sale_coupon_delivery/static/src/js/website_sale_coupon_delivery.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website_sale_coupon_delivery.checkout', function (require) { 'use strict'; var core = require('web.core'); var publicWidget = require('web.public.widget'); require('website_sale_delivery.checkout'); var _t = core._t; publicWidget.registry.websiteSaleDelivery.include({ _handleCarrierUpdateResult: function (result) { this._super.apply(this, arguments); if (result.new_amount_order_discounted) { $('#order_discounted').html(result.new_amount_order_discounted); } }, _handleCarrierUpdateResultBadge: function (result) { this._super.apply(this, arguments); if (result.new_amount_order_discounted) { $('#delivery_carrier .badge:not(.o_wsale_delivery_carrier_error)').text(_t('Free')); } }, }); });;

/* /website_blog/static/src/js/contentshare.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website_blog.contentshare', function (require) {
    'use strict'; const dom = require('web.dom'); $.fn.share = function (options) {
        var option = $.extend($.fn.share.defaults, options); var selected_text = ""; $.extend($.fn.share, {
            init: function (shareable) { var self = this; $.fn.share.defaults.shareable = shareable; $.fn.share.defaults.shareable.on('mouseup', function () { if ($(this).parents('body.editor_enable').length === 0) { self.popOver(); } }); $.fn.share.defaults.shareable.on('mousedown', function () { self.destroy(); }); }, getContent: function () {
                var $popover_content = $('<div class="h4 m-0"/>'); if ($('.o_wblog_title, .o_wblog_post_content_field').hasClass('js_comment')) { selected_text = this.getSelection('string'); var $btn_c = $('<a class="o_share_comment btn btn-link px-2" href="#"/>').append($('<i class="fa fa-lg fa-comment"/>')); $popover_content.append($btn_c); }
                if ($('.o_wblog_title, .o_wblog_post_content_field').hasClass('js_tweet')) { var tweet = '"%s" - %s'; var baseLength = tweet.replace(/%s/g, '').length; var selectedText = this.getSelection('string').substring(0, option.maxLength - baseLength - 23); var text = window.btoa(encodeURIComponent(_.str.sprintf(tweet, selectedText, window.location.href))); $popover_content.append(_.str.sprintf("<a onclick=\"window.open('%s' + atob('%s'), '_%s','location=yes,height=570,width=520,scrollbars=yes,status=yes')\"><i class=\"ml4 mr4 fa fa-twitter fa-lg\"/></a>", option.shareLink, text, option.target)); }
                return $popover_content;
            }, commentEdition: function () { $(".o_portal_chatter_composer_form textarea").val('"' + selected_text + '" ').focus(); const commentsEl = $('#o_wblog_post_comments')[0]; if (commentsEl) { dom.scrollTo(commentsEl).then(() => { window.location.hash = 'blog_post_comment_quote'; }); } }, getSelection: function (share) {
                if (window.getSelection) {
                    var selection = window.getSelection(); if (!selection || selection.rangeCount === 0) { return ""; }
                    if (share === 'string') { return String(selection.getRangeAt(0)).replace(/\s{2,}/g, ' '); } else { return selection.getRangeAt(0); }
                } else if (document.selection) { if (share === 'string') { return document.selection.createRange().text.replace(/\s{2,}/g, ' '); } else { return document.selection.createRange(); } }
            }, popOver: function () {
                this.destroy(); if (this.getSelection('string').length < option.minLength) { return; }
                var data = this.getContent(); var range = this.getSelection(); var newNode = document.createElement("span"); range.insertNode(newNode); newNode.className = option.className; var $pop = $(newNode); $pop.popover({ trigger: 'manual', placement: option.placement, html: true, content: function () { return data; } }).popover('show'); $('.o_share_comment').on('click', this.commentEdition);
            }, destroy: function () { var $span = $('span.' + option.className); $span.popover('hide'); $span.remove(); }
        }); $.fn.share.init(this);
    }; $.fn.share.defaults = { shareLink: "http://twitter.com/intent/tweet?text=", minLength: 5, maxLength: 140, target: "blank", className: "share", placement: "top", };
});;

/* /website_blog/static/src/js/website_blog.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website_blog.website_blog', function (require) {
    'use strict'; var core = require('web.core'); const dom = require('web.dom'); const publicWidget = require('web.public.widget'); publicWidget.registry.websiteBlog = publicWidget.Widget.extend({
        selector: '.website_blog', events: { 'click #o_wblog_next_container': '_onNextBlogClick', 'click #o_wblog_post_content_jump': '_onContentAnchorClick', 'click .o_twitter, .o_facebook, .o_linkedin, .o_google, .o_twitter_complete, .o_facebook_complete, .o_linkedin_complete, .o_google_complete': '_onShareArticle', }, start: function () { $('.js_tweet, .js_comment').share({}); return this._super.apply(this, arguments); }, _onNextBlogClick: function (ev) { ev.preventDefault(); var self = this; var $el = $(ev.currentTarget); var nexInfo = $el.find('#o_wblog_next_post_info').data(); $el.find('.o_record_cover_container').addClass(nexInfo.size + ' ' + nexInfo.text).end().find('.o_wblog_toggle').toggleClass('d-none'); const placeholder = document.createElement('div'); placeholder.style.minHeight = '100vh'; this.$('#o_wblog_next_container').append(placeholder); _.defer(function () { self._forumScrollAction($el, 300, function () { window.location.href = nexInfo.url; }); }); }, _onContentAnchorClick: function (ev) { ev.preventDefault(); ev.stopImmediatePropagation(); var $el = $(ev.currentTarget.hash); this._forumScrollAction($el, 500, function () { window.location.hash = 'blog_content'; }); }, _onShareArticle: function (ev) {
            ev.preventDefault(); var url = ''; var $element = $(ev.currentTarget); var blogPostTitle = encodeURIComponent($('#o_wblog_post_name').html() || ''); var articleURL = encodeURIComponent(window.location.href); if ($element.hasClass('o_twitter')) { var twitterText = core._t("Amazing blog article: %s! Check it live: %s"); var tweetText = _.string.sprintf(twitterText, blogPostTitle, articleURL); url = 'https://twitter.com/intent/tweet?tw_p=tweetbutton&text=' + tweetText; } else if ($element.hasClass('o_facebook')) { url = 'https://www.facebook.com/sharer/sharer.php?u=' + articleURL; } else if ($element.hasClass('o_linkedin')) { url = 'https://www.linkedin.com/sharing/share-offsite/?url=' + articleURL; }
            window.open(url, '', 'menubar=no, width=500, height=400');
        }, _forumScrollAction: function ($el, duration, callback) { dom.scrollTo($el[0], { duration: duration }).then(() => callback()); },
    });
});;

/* /website_blog/static/src/snippets/s_latest_posts/000.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website_blog.s_latest_posts_frontend', function (require) {
    'use strict'; var core = require('web.core'); var wUtils = require('website.utils'); var publicWidget = require('web.public.widget'); var _t = core._t; publicWidget.registry.js_get_posts = publicWidget.Widget.extend({
        selector: '.js_get_posts', disabledInEditableMode: false, start: function () {
            var self = this; const data = self.$target[0].dataset; const limit = parseInt(data.postsLimit) || 4; const blogID = parseInt(data.filterByBlogId); if (data.template && data.template.endsWith('.s_latest_posts_big_orizontal_template')) { data.template = 'website_blog.s_latest_posts_horizontal_template'; }
            const template = data.template || 'website_blog.s_latest_posts_list_template'; const loading = data.loading === 'true'; const order = data.order || 'published_date desc'; this.$target.empty(); this.$target.attr('contenteditable', 'False'); var domain = []; if (blogID) { domain.push(['blog_id', '=', blogID]); }
            if (order.includes('visits')) { domain.push(['visits', '!=', false]); }
            var prom = new Promise(function (resolve) {
                self._rpc({ route: '/blog/render_latest_posts', params: { template: template, domain: domain, limit: limit, order: order, }, }).then(function (posts) {
                    var $posts = $(posts).filter('.s_latest_posts_post'); if (!$posts.length) { self.$target.append($('<div/>', { class: 'col-md-6 offset-md-3' }).append($('<div/>', { class: 'alert alert-warning alert-dismissible text-center', text: _t("No blog post was found. Make sure your posts are published."), }))); resolve(); }
                    if (loading) { self._showLoading($posts); } else { self.$target.html($posts); }
                    resolve();
                }).guardedCatch(function () {
                    if (self.editableMode) { self.$target.append($('<p/>', { class: 'text-danger', text: _t("An error occured with this latest posts block. If the problem persists, please consider deleting it and adding a new one"), })); }
                    resolve();
                });
            }); return Promise.all([this._super.apply(this, arguments), prom]);
        }, destroy: function () { this.$target.empty(); this._super.apply(this, arguments); }, _showLoading: function ($posts) {
            var self = this; _.each($posts, function (post, i) {
                var $post = $(post); var $progress = $post.find('.s_latest_posts_loader'); var bgUrl = $post.find('.o_record_cover_image').css('background-image').replace('url(', '').replace(')', '').replace(/\"/gi, "") || 'none'; $post.appendTo(self.$target); if (bgUrl === 'none') { $post.addClass('s_latest_posts_loader_no_cover'); $progress.remove(); return; }
                $progress.find('> div').removeClass('d-none').css('animation-delay', i * 200 + 'ms'); var $dummyImg = $('<img/>', { src: bgUrl }); var timer = setTimeout(function () { $post.find('.o_record_cover_image').addClass('bg-200'); $progress.remove(); }, 10000); wUtils.onceAllImagesLoaded($dummyImg).then(function () { $progress.fadeOut(500, function () { $progress.removeClass('d-flex'); }); $dummyImg.remove(); clearTimeout(timer); });
            });
        },
    });
});;

/* /mail/static/src/js/utils.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('mail.utils', function (require) {
    "use strict"; var core = require('web.core'); var _t = core._t; function parseAndTransform(htmlString, transformFunction) {
        var openToken = "OPEN" + Date.now(); var string = htmlString.replace(/&lt;/g, openToken); var children; try { children = $('<div>').html(string).contents(); } catch (e) { children = $('<div>').html('<pre>' + string + '</pre>').contents(); }
        return _parseAndTransform(children, transformFunction).replace(new RegExp(openToken, "g"), "&lt;");
    }
    function _parseAndTransform(nodes, transformFunction) { return _.map(nodes, function (node) { return transformFunction(node, function () { return _parseAndTransform(node.childNodes, transformFunction); }); }).join(""); }
    var _escapeEntities = (function () { var map = { "&": "&amp;", "<": "&lt;", ">": "&gt;" }; var escaper = function (match) { return map[match]; }; var testRegexp = RegExp('(?:&|<|>)'); var replaceRegexp = RegExp('(?:&|<|>)', 'g'); return function (string) { string = string == null ? '' : '' + string; return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string; }; })(); var urlRegexp = /\b(?:https?:\/\/\d{1,3}(?:\.\d{1,3}){3}|(?:https?:\/\/|(?:www\.))[-a-z0-9@:%._+~#=\u00C0-\u024F\u1E00-\u1EFF]{2,256}\.[a-z]{2,13})\b(?:[-a-z0-9@:%_+.~#?&'$//=;\u00C0-\u024F\u1E00-\u1EFF]*)/gi; function linkify(text, attrs) {
        attrs = attrs || {}; if (attrs.target === undefined) { attrs.target = '_blank'; }
        if (attrs.target === '_blank') { attrs.rel = 'noreferrer noopener'; }
        attrs = _.map(attrs, function (value, key) { return key + '="' + _.escape(value) + '"'; }).join(' '); var curIndex = 0; var result = ""; var match; while ((match = urlRegexp.exec(text)) !== null) { result += _escapeEntities(text.slice(curIndex, match.index)); var url = match[0]; var href = (!/^https?:\/\//i.test(url)) ? "http://" + _.escape(url) : _.escape(url); result += '<a ' + attrs + ' href="' + href + '">' + _escapeEntities(url) + '</a>'; curIndex = match.index + match[0].length; }
        return result + _escapeEntities(text.slice(curIndex));
    }
    function addLink(node, transformChildren) {
        if (node.nodeType === 3) {
            const linkified = linkify(node.data); if (linkified !== node.data) {
                const div = document.createElement('div'); div.innerHTML = linkified; for (const childNode of [...div.childNodes]) { node.parentNode.insertBefore(childNode, node); }
                node.parentNode.removeChild(node); return linkified;
            }
            return node.textContent;
        }
        if (node.tagName === "A") return node.outerHTML; transformChildren(); return node.outerHTML;
    }
    function htmlToTextContentInline(htmlString) {
        const fragment = document.createDocumentFragment(); const div = document.createElement('div'); fragment.appendChild(div); htmlString = htmlString.replace(/<br\s*\/?>/gi, ' '); try { div.innerHTML = htmlString; } catch (e) { div.innerHTML = `<pre>${htmlString}</pre>`; }
        return div.textContent.trim().replace(/[\n\r]/g, '').replace(/\s\s+/g, ' ');
    }
    function stripHTML(node, transformChildren) { if (node.nodeType === 3) return node.data; if (node.tagName === "BR") return "\n"; return transformChildren(); }
    function inline(node, transform_children) { if (node.nodeType === 3) return node.data; if (node.nodeType === 8) return ""; if (node.tagName === "BR") return " "; if (node.tagName.match(/^(A|P|DIV|PRE|BLOCKQUOTE)$/)) return transform_children(); node.innerHTML = transform_children(); return node.outerHTML; }
    function parseEmail(text) {
        if (text) {
            var result = text.match(/(.*)<(.*@.*)>/); if (result) { return [_.str.trim(result[1]), _.str.trim(result[2])]; }
            result = text.match(/(.*@.*)/); if (result) { return [_.str.trim(result[1]), _.str.trim(result[1])]; }
            return [text, false];
        }
    }
    function escapeAndCompactTextContent(content) { let value = owl.utils.escape(content).trim(); value = value.replace(/(\r|\n){2,}/g, '<br/><br/>'); value = value.replace(/(\r|\n)/g, '<br/>'); value = value.replace(/ /g, '&nbsp;').replace(/([^>])&nbsp;([^<])/g, '$1 $2'); return value; }
    function getTextToHTML(text) { return text.replace(/((?:https?|ftp):\/\/[\S]+)/g, '<a href="$1">$1</a> ').replace(/[\n\r]/g, '<br/>'); }
    function timeFromNow(date) {
        if (moment().diff(date, 'seconds') < 45) { return _t("now"); }
        return date.fromNow();
    }
    return { addLink: addLink, getTextToHTML: getTextToHTML, htmlToTextContentInline, inline: inline, linkify: linkify, parseAndTransform: parseAndTransform, parseEmail: parseEmail, stripHTML: stripHTML, timeFromNow: timeFromNow, escapeAndCompactTextContent, };
});;

/* /website_livechat/static/src/bugfix/public_bugfix.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website_livechat/static/src/bugfix/bugfix.js', function (require) { 'use strict'; const { LivechatButton } = require('im_livechat.legacy.im_livechat.im_livechat'); LivechatButton.include({ className: `${LivechatButton.prototype.className} o_bottom_fixed_element`, start() { $(window).trigger('resize'); return this._super(...arguments); }, }); });;

/* /im_livechat/static/src/legacy/public_livechat.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('im_livechat.legacy.im_livechat.im_livechat', function (require) {
    "use strict"; require('bus.BusService'); var concurrency = require('web.concurrency'); var config = require('web.config'); var core = require('web.core'); var session = require('web.session'); var time = require('web.time'); var utils = require('web.utils'); var Widget = require('web.Widget'); var WebsiteLivechat = require('im_livechat.legacy.im_livechat.model.WebsiteLivechat'); var WebsiteLivechatMessage = require('im_livechat.legacy.im_livechat.model.WebsiteLivechatMessage'); var WebsiteLivechatWindow = require('im_livechat.legacy.im_livechat.WebsiteLivechatWindow'); var _t = core._t; var QWeb = core.qweb; var LIVECHAT_COOKIE_HISTORY = 'im_livechat_history'; var HISTORY_LIMIT = 15; var RATING_TO_EMOJI = { "5": "😊", "3": "😐", "1": "😞" }; var page = window.location.href.replace(/^.*\/\/[^/]+/, ''); var pageHistory = utils.get_cookie(LIVECHAT_COOKIE_HISTORY); var urlHistory = []; if (pageHistory) { urlHistory = JSON.parse(pageHistory) || []; }
    if (!_.contains(urlHistory, page)) {
        urlHistory.push(page); while (urlHistory.length > HISTORY_LIMIT) { urlHistory.shift(); }
        utils.set_cookie(LIVECHAT_COOKIE_HISTORY, JSON.stringify(urlHistory), 60 * 60 * 24);
    }
    var LivechatButton = Widget.extend({
        className: 'openerp o_livechat_button d-print-none', custom_events: { 'close_chat_window': '_onCloseChatWindow', 'post_message_chat_window': '_onPostMessageChatWindow', 'save_chat_window': '_onSaveChatWindow', 'updated_typing_partners': '_onUpdatedTypingPartners', 'updated_unread_counter': '_onUpdatedUnreadCounter', }, events: { 'click': '_openChat' }, init: function (parent, serverURL, options) { this._super(parent); this.options = _.defaults(options || {}, { input_placeholder: _t("Ask something ..."), default_username: _t("Visitor"), button_text: _t("Chat with one of our collaborators"), default_message: _t("How may I help you?"), }); this._history = null; this._livechat = null; this._chatWindow = null; this._messages = []; this._serverURL = serverURL; }, willStart: function () {
            var self = this; var cookie = utils.get_cookie('im_livechat_session'); var ready; if (!cookie) {
                ready = session.rpc('/im_livechat/init', { channel_id: this.options.channel_id }).then(function (result) {
                    if (!result.available_for_me) { return Promise.reject(); }
                    self._rule = result.rule;
                });
            } else { var channel = JSON.parse(cookie); ready = session.rpc('/mail/chat_history', { uuid: channel.uuid, limit: 100 }).then(function (history) { self._history = history; }); }
            return ready.then(this._loadQWebTemplate.bind(this));
        }, start: function () {
            this.$el.text(this.options.button_text); if (this._history) { _.each(this._history.reverse(), this._addMessage.bind(this)); this._openChat(); } else if (!config.device.isMobile && this._rule.action === 'auto_popup') { var autoPopupCookie = utils.get_cookie('im_livechat_auto_popup'); if (!autoPopupCookie || JSON.parse(autoPopupCookie)) { this._autoPopupTimeout = setTimeout(this._openChat.bind(this), this._rule.auto_popup_timer * 1000); } }
            this.call('bus_service', 'onNotification', this, this._onNotification); if (this.options.button_background_color) { this.$el.css('background-color', this.options.button_background_color); }
            if (this.options.button_text_color) { this.$el.css('color', this.options.button_text_color); }
            var pwaBannerHeight = $('.o_pwa_install_banner').outerHeight(true); if (pwaBannerHeight) { this.$el.css('bottom', pwaBannerHeight + 'px'); }
            return this._super();
        }, _addMessage: function (data, options) {
            options = _.extend({}, this.options, options, { serverURL: this._serverURL, }); var message = new WebsiteLivechatMessage(this, data, options); var hasAlreadyMessage = _.some(this._messages, function (msg) { return message.getID() === msg.getID(); }); if (hasAlreadyMessage) { return; }
            if (this._livechat) { this._livechat.addMessage(message); }
            if (options && options.prepend) { this._messages.unshift(message); } else { this._messages.push(message); }
        }, _askFeedback: function () { this._chatWindow.$('.o_thread_composer input').prop('disabled', true); var feedback = new Feedback(this, this._livechat); this._chatWindow.replaceContentWith(feedback); feedback.on('send_message', this, this._sendMessage); feedback.on('feedback_sent', this, this._closeChat); }, _closeChat: function () { this._chatWindow.destroy(); utils.set_cookie('im_livechat_session', "", -1); }, _handleNotification: function (notification) {
            const [livechatUUID, notificationData] = notification; if (this._livechat && (livechatUUID === this._livechat.getUUID())) {
                if (notificationData._type === 'history_command') { const cookie = utils.get_cookie(LIVECHAT_COOKIE_HISTORY); const history = cookie ? JSON.parse(cookie) : []; session.rpc('/im_livechat/history', { pid: this._livechat.getOperatorPID()[0], channel_uuid: this._livechat.getUUID(), page_history: history, }); } else if (notificationData.info === 'typing_status') {
                    const partnerID = notificationData.partner_id; if (partnerID === this.options.current_partner_id) { return; }
                    if (notificationData.is_typing) { this._livechat.registerTyping({ partnerID }); } else { this._livechat.unregisterTyping({ partnerID }); }
                } else if ('body' in notificationData) {
                    if (this._messages.some(message => message.getID() === notificationData.id)) { return; }
                    this._addMessage(notificationData); if (this._chatWindow.isFolded() || !this._chatWindow.isAtBottom()) { this._livechat.incrementUnreadCounter(); }
                    this._renderMessages();
                }
            }
        }, _loadQWebTemplate: function () { return session.rpc('/im_livechat/load_templates').then(function (templates) { _.each(templates, function (template) { QWeb.add_template(template); }); }); }, _openChat: _.debounce(function () {
            if (this._openingChat) { return; }
            var self = this; var cookie = utils.get_cookie('im_livechat_session'); var def; this._openingChat = true; clearTimeout(this._autoPopupTimeout); if (cookie) { def = Promise.resolve(JSON.parse(cookie)); } else { this._messages = []; def = session.rpc('/im_livechat/get_session', { channel_id: this.options.channel_id, anonymous_name: this.options.default_username, previous_operator_id: this._get_previous_operator_id(), }, { shadow: true }); }
            def.then(function (livechatData) {
                if (!livechatData || !livechatData.operator_pid) { try { self.displayNotification({ message: _t("No available collaborator, please try again later."), sticky: true, }); } catch (err) { console.warn(_t("No available collaborator, please try again later.")); } } else {
                    self._livechat = new WebsiteLivechat({ parent: self, data: livechatData }); return self._openChatWindow().then(function () {
                        if (!self._history) { self._sendWelcomeMessage(); }
                        self._renderMessages(); self.call('bus_service', 'addChannel', self._livechat.getUUID()); self.call('bus_service', 'startPolling'); utils.set_cookie('im_livechat_session', utils.unaccent(JSON.stringify(self._livechat.toData())), 60 * 60); utils.set_cookie('im_livechat_auto_popup', JSON.stringify(false), 60 * 60); if (livechatData.operator_pid[0]) { var operatorPidId = livechatData.operator_pid[0]; var oneWeek = 7 * 24 * 60 * 60; utils.set_cookie('im_livechat_previous_operator_pid', operatorPidId, oneWeek); }
                    });
                }
            }).then(function () { self._openingChat = false; }).guardedCatch(function () { self._openingChat = false; });
        }, 200, true), _get_previous_operator_id: function () {
            var cookie = utils.get_cookie('im_livechat_previous_operator_pid'); if (cookie) { return cookie; }
            return null;
        }, _openChatWindow: function () { var self = this; var options = { displayStars: false, headerBackgroundColor: this.options.header_background_color, placeholder: this.options.input_placeholder || "", titleColor: this.options.title_color, }; this._chatWindow = new WebsiteLivechatWindow(this, this._livechat, options); return this._chatWindow.appendTo($('body')).then(function () { var cssProps = { bottom: 0 }; cssProps[_t.database.parameters.direction === 'rtl' ? 'left' : 'right'] = 0; self._chatWindow.$el.css(cssProps); self.$el.hide(); }); }, _renderMessages: function () { var shouldScroll = !this._chatWindow.isFolded() && this._chatWindow.isAtBottom(); this._livechat.setMessages(this._messages); this._chatWindow.render(); if (shouldScroll) { this._chatWindow.scrollToBottom(); } }, _sendMessage: function (message) {
            var self = this; this._livechat._notifyMyselfTyping({ typing: false }); return session.rpc('/mail/chat_post', { uuid: this._livechat.getUUID(), message_content: message.content }).then(function (messageId) {
                if (!messageId) {
                    try { self.displayNotification({ message: _t("Session expired... Please refresh and try again."), sticky: true, }); } catch (err) { console.warn(_t("Session expired... Please refresh and try again.")); }
                    self._closeChat();
                }
                self._chatWindow.scrollToBottom();
            });
        }, _sendWelcomeMessage: function () { if (this.options.default_message) { this._addMessage({ id: '_welcome', attachment_ids: [], author_id: this._livechat.getOperatorPID(), body: this.options.default_message, channel_ids: [this._livechat.getID()], date: time.datetime_to_str(new Date()), }, { prepend: true }); } }, _onCloseChatWindow: function (ev) {
            ev.stopPropagation(); var isComposerDisabled = this._chatWindow.$('.o_thread_composer input').prop('disabled'); var shouldAskFeedback = !isComposerDisabled && _.find(this._messages, function (message) { return message.getID() !== '_welcome'; }); if (shouldAskFeedback) { this._chatWindow.toggleFold(false); this._askFeedback(); } else { this._closeChat(); }
            this._visitorLeaveSession();
        }, _onNotification: function (notifications) { var self = this; _.each(notifications, function (notification) { self._handleNotification(notification); }); }, _onPostMessageChatWindow: function (ev) { ev.stopPropagation(); var self = this; var messageData = ev.data.messageData; this._sendMessage(messageData).guardedCatch(function (reason) { reason.event.preventDefault(); return self._sendMessage(messageData); }); }, _onSaveChatWindow: function (ev) { ev.stopPropagation(); utils.set_cookie('im_livechat_session', utils.unaccent(JSON.stringify(this._livechat.toData())), 60 * 60); }, _onUpdatedTypingPartners(ev) { ev.stopPropagation(); this._chatWindow.renderHeader(); }, _onUpdatedUnreadCounter: function (ev) { ev.stopPropagation(); this._chatWindow.renderHeader(); }, _visitorLeaveSession: function () { var cookie = utils.get_cookie('im_livechat_session'); if (cookie) { var channel = JSON.parse(cookie); session.rpc('/im_livechat/visitor_leave_session', { uuid: channel.uuid }); utils.set_cookie('im_livechat_session', "", -1); } },
    }); var Feedback = Widget.extend({
        template: 'im_livechat.legacy.im_livechat.FeedBack', events: { 'click .o_livechat_rating_choices img': '_onClickSmiley', 'click .o_livechat_no_feedback span': '_onClickNoFeedback', 'click .o_rating_submit_button': '_onClickSend', 'click .o_email_chat_button': '_onEmailChat', 'click .o_livechat_email_error .alert-link': '_onTryAgain', }, init: function (parent, livechat) { this._super(parent); this._livechat = livechat; this.server_origin = session.origin; this.rating = undefined; this.dp = new concurrency.DropPrevious(); }, _sendFeedback: function (reason) {
            var self = this; var args = { uuid: this._livechat.getUUID(), rate: this.rating, reason: reason, }; this.dp.add(session.rpc('/im_livechat/feedback', args)).then(function () {
                var emoji = RATING_TO_EMOJI[self.rating] || "??"; var content = _.str.sprintf(_t("Rating: %s"), emoji); if (reason) { content += " \n" + reason; }
                self.trigger('send_message', { content: content, isFeedback: true });
            });
        }, _showThanksMessage: function () { this.$('.o_livechat_rating_box').empty().append($('<div />', { text: _t('Thank you for your feedback'), class: 'text-muted' })); }, _onClickNoFeedback: function () { this.trigger('feedback_sent'); }, _onClickSend: function () { this.$('.o_livechat_rating_reason').hide(); this._showThanksMessage(); if (_.isNumber(this.rating)) { this._sendFeedback(this.$('textarea').val()); } }, _onClickSmiley: function (ev) { this.rating = parseInt($(ev.currentTarget).data('value')); this.$('.o_livechat_rating_choices img').removeClass('selected'); this.$('.o_livechat_rating_choices img[data-value="' + this.rating + '"]').addClass('selected'); if (this.rating !== 5) { this.$('.o_livechat_rating_reason').show(); } else { this.$('.o_livechat_rating_reason').hide(); this._showThanksMessage(); this._sendFeedback(); } }, _onEmailChat: function () { var self = this; var $email = this.$('#o_email'); if (utils.is_email($email.val())) { $email.removeAttr('title').removeClass('is-invalid').prop('disabled', true); this.$('.o_email_chat_button').prop('disabled', true); this._rpc({ route: '/im_livechat/email_livechat_transcript', params: { uuid: this._livechat.getUUID(), email: $email.val(), } }).then(function () { self.$('.o_livechat_email').html($('<strong />', { text: _t('Conversation Sent') })); }).guardedCatch(function () { self.$('.o_livechat_email').hide(); self.$('.o_livechat_email_error').show(); }); } else { $email.addClass('is-invalid').prop('title', _t('Invalid email address')); } }, _onTryAgain: function () { this.$('#o_email').prop('disabled', false); this.$('.o_email_chat_button').prop('disabled', false); this.$('.o_livechat_email_error').hide(); this.$('.o_livechat_email').show(); },
    }); return { LivechatButton: LivechatButton, Feedback: Feedback, };
}); odoo.define('im_livechat.legacy.im_livechat.model.WebsiteLivechat', function (require) {
    "use strict"; var AbstractThread = require('im_livechat.legacy.mail.model.AbstractThread'); var ThreadTypingMixin = require('im_livechat.legacy.mail.model.ThreadTypingMixin'); var session = require('web.session'); var WebsiteLivechat = AbstractThread.extend(ThreadTypingMixin, {
        init: function (params) {
            this._super.apply(this, arguments); ThreadTypingMixin.init.call(this, arguments); this._members = []; this._operatorPID = params.data.operator_pid; this._uuid = params.data.uuid; if (params.data.message_unread_counter !== undefined) { this._unreadCounter = params.data.message_unread_counter; }
            if (_.isBoolean(params.data.folded)) { this._folded = params.data.folded; } else { this._folded = params.data.state === 'folded'; }
            this._members.push({ id: this._operatorPID[0], name: this._operatorPID[1] });
        }, getMessages: function () { return this._messages; }, getOperatorPID: function () { return this._operatorPID; }, getUUID: function () { return this._uuid; }, incrementUnreadCounter: function () { this._incrementUnreadCounter(); }, setMessages: function (messages) { this._messages = messages; }, toData: function () { return { folded: this.isFolded(), id: this.getID(), message_unread_counter: this.getUnreadCounter(), operator_pid: this.getOperatorPID(), name: this.getName(), uuid: this.getUUID(), }; }, _isTypingMyselfInfo: function (params) { return params.isWebsiteUser; }, _notifyMyselfTyping: function (params) { return session.rpc('/im_livechat/notify_typing', { uuid: this.getUUID(), is_typing: params.typing, }, { shadow: true }); }, _warnUpdatedTypingPartners: function () { this.trigger_up('updated_typing_partners'); }, _warnUpdatedUnreadCounter: function () { this.trigger_up('updated_unread_counter'); }, _onTypingMessageAdded: function (message) { var operatorID = this.getOperatorPID()[0]; if (message.hasAuthor() && message.getAuthorID() === operatorID) { this.unregisterTyping({ partnerID: operatorID }); } },
    }); return WebsiteLivechat;
}); odoo.define('im_livechat.legacy.im_livechat.model.WebsiteLivechatMessage', function (require) {
    "use strict"; var AbstractMessage = require('im_livechat.legacy.mail.model.AbstractMessage'); var WebsiteLivechatMessage = AbstractMessage.extend({
        init: function (parent, data, options) { this._super.apply(this, arguments); this._defaultUsername = options.default_username; this._serverURL = options.serverURL; }, getAvatarSource: function () {
            var source = this._serverURL; if (this.hasAuthor()) { source += '/web/partner_image/' + this.getAuthorID(); } else { source += '/mail/static/src/img/smiley/avatar.jpg'; }
            return source;
        }, getDisplayedAuthor: function () { return this._super.apply(this, arguments) || this._defaultUsername; },
    }); return WebsiteLivechatMessage;
}); odoo.define('im_livechat.legacy.im_livechat.WebsiteLivechatWindow', function (require) {
    "use strict"; var AbstractThreadWindow = require('im_livechat.legacy.mail.AbstractThreadWindow'); var LivechatWindow = AbstractThreadWindow.extend({
        events: _.extend(AbstractThreadWindow.prototype.events, { 'input .o_composer_text_field': '_onInput', }), init(parent, thread, options = {}) { this._super.apply(this, arguments); this._thread = thread; }, async start() {
            await this._super(...arguments); if (this.options.headerBackgroundColor) { this.$('.o_thread_window_header').css('background-color', this.options.headerBackgroundColor); }
            if (this.options.titleColor) { this.$('.o_thread_window_header').css('color', this.options.titleColor); }
        }, close: function () { this.trigger_up('close_chat_window'); }, replaceContentWith: function ($element) { $element.replace(this._threadWidget.$el); }, toggleFold: function () { this._super.apply(this, arguments); this.trigger_up('save_chat_window'); this.updateVisualFoldState(); }, _postMessage: function (messageData) { this.trigger_up('post_message_chat_window', { messageData: messageData }); this._super.apply(this, arguments); }, _onInput: function () { if (this.hasThread() && this._thread.hasTypingNotification()) { var isTyping = this.$input.val().length > 0; this._thread.setMyselfTyping({ typing: isTyping }); } },
    }); return LivechatWindow;
}); odoo.define('im_livechat.legacy.mail.model.AbstractThread', function (require) {
    "use strict"; var Class = require('web.Class'); var Mixins = require('web.mixins'); var AbstractThread = Class.extend(Mixins.EventDispatcherMixin, {
        init: function (params) { Mixins.EventDispatcherMixin.init.call(this, arguments); this.setParent(params.parent); this._folded = false; this._id = params.data.id; this._name = params.data.name; this._status = params.data.status || ''; this._unreadCounter = 0; }, addMessage: function (message) { this._addMessage.apply(this, arguments); this.trigger('message_added', message); }, fold: function (folded) { this._folded = folded; }, getID: function () { return this._id; }, getMessages: function () { }, getName: function () { return this._name; }, getStatus: function () { return this._status; }, getTitle: function () { return this.getName(); }, getType: function () { }, getUnreadCounter: function () { return this._unreadCounter; }, hasMessages: function () { return !_.isEmpty(this.getMessages()); }, hasSeenFeature: function () { return false; }, isFolded: function () { return this._folded; }, markAsRead: function () {
            if (this._unreadCounter > 0) { return this._markAsRead(); }
            return Promise.resolve();
        }, postMessage: function () { return this._postMessage.apply(this, arguments).then(this.trigger.bind(this, 'message_posted')); }, resetUnreadCounter: function () { this._unreadCounter = 0; this._warnUpdatedUnreadCounter(); }, _addMessage: function (message) { }, _incrementUnreadCounter: function () { this._unreadCounter++; }, _markAsRead: function () { this.resetUnreadCounter(); return Promise.resolve(); }, _postMessage: function () { return Promise.resolve(); }, _warnUpdatedUnreadCounter: function () { },
    }); return AbstractThread;
}); odoo.define('im_livechat.legacy.mail.model.ThreadTypingMixin', function (require) {
    "use strict"; var CCThrottleFunction = require('im_livechat.legacy.mail.model.CCThrottleFunction'); var Timer = require('im_livechat.legacy.mail.model.Timer'); var Timers = require('im_livechat.legacy.mail.model.Timers'); var core = require('web.core'); var _t = core._t; var ThreadTypingMixin = {
        _DEFAULT_TYPING_PARTNER_ID: '_default', _DEFAULT_TYPING_PARTNER_NAME: 'Someone', init: function () { this._lastNotifiedMyselfTyping = false; this._myselfLongTypingTimer = new Timer({ duration: 50 * 1000, onTimeout: this._onMyselfLongTypingTimeout.bind(this), }); this._myselfTypingInactivityTimer = new Timer({ duration: 5 * 1000, onTimeout: this._onMyselfTypingInactivityTimeout.bind(this), }); this._othersTypingTimers = new Timers({ duration: 60 * 1000, onTimeout: this._onOthersTypingTimeout.bind(this), }); this._throttleNotifyMyselfTyping = CCThrottleFunction({ duration: 2.5 * 1000, func: this._onNotifyMyselfTyping.bind(this), }); this._typingPartnerIDs = []; this.on('message_added', this, this._onTypingMessageAdded); this.on('message_posted', this, this._onTypingMessagePosted); }, getTypingMembersToText: function () { var typingPartnerIDs = this._typingPartnerIDs; var typingMembers = _.filter(this._members, function (member) { return _.contains(typingPartnerIDs, member.id); }); var sortedTypingMembers = _.sortBy(typingMembers, function (member) { return _.indexOf(typingPartnerIDs, member.id); }); var displayableTypingMembers = sortedTypingMembers.slice(0, 3); if (displayableTypingMembers.length === 0) { return ''; } else if (displayableTypingMembers.length === 1) { return _.str.sprintf(_t("%s is typing..."), displayableTypingMembers[0].name); } else if (displayableTypingMembers.length === 2) { return _.str.sprintf(_t("%s and %s are typing..."), displayableTypingMembers[0].name, displayableTypingMembers[1].name); } else { return _.str.sprintf(_t("%s, %s and more are typing..."), displayableTypingMembers[0].name, displayableTypingMembers[1].name); } }, hasTypingNotification: function () { return true; }, isSomeoneTyping: function () { return !(_.isEmpty(this._typingPartnerIDs)); }, registerTyping: function (params) {
            if (this._isTypingMyselfInfo(params)) { return; }
            var partnerID = params.partnerID; this._othersTypingTimers.registerTimer({ timeoutCallbackArguments: [partnerID], timerID: partnerID, }); if (_.contains(this._typingPartnerIDs, partnerID)) { return; }
            this._typingPartnerIDs.push(partnerID); this._warnUpdatedTypingPartners();
        }, setMyselfTyping: function (params) {
            var typing = params.typing; if (this._lastNotifiedMyselfTyping === typing) { this._throttleNotifyMyselfTyping.cancel(); } else { this._throttleNotifyMyselfTyping(params); }
            if (typing) { this._myselfTypingInactivityTimer.reset(); } else { this._myselfTypingInactivityTimer.clear(); }
        }, unregisterTyping: function (params) {
            var partnerID = params.partnerID; this._othersTypingTimers.unregisterTimer({ timerID: partnerID }); if (!_.contains(this._typingPartnerIDs, partnerID)) { return; }
            this._typingPartnerIDs = _.reject(this._typingPartnerIDs, function (id) { return id === partnerID; }); this._warnUpdatedTypingPartners();
        }, _isTypingMyselfInfo: function (params) { return false; }, _notifyMyselfTyping: function (params) { return Promise.resolve(); }, _warnUpdatedTypingPartners: function () { }, _onMyselfLongTypingTimeout: function () { this._throttleNotifyMyselfTyping.clear(); this._throttleNotifyMyselfTyping({ typing: true }); }, _onMyselfTypingInactivityTimeout: function () { this._throttleNotifyMyselfTyping.clear(); this._throttleNotifyMyselfTyping({ typing: false }); }, _onNotifyMyselfTyping: function (params) { var typing = params.typing; this._lastNotifiedMyselfTyping = typing; this._notifyMyselfTyping(params); if (typing) { this._myselfLongTypingTimer.reset(); } else { this._myselfLongTypingTimer.clear(); } }, _onOthersTypingTimeout: function (partnerID) { this.unregisterTyping({ partnerID: partnerID }); }, _onTypingMessageAdded: function (message) { var partnerID = message.hasAuthor() ? message.getAuthorID() : this._DEFAULT_TYPING_PARTNER_ID; this.unregisterTyping({ partnerID: partnerID }); }, _onTypingMessagePosted: function () { this._lastNotifiedMyselfTyping = false; this._throttleNotifyMyselfTyping.clear(); this._myselfLongTypingTimer.clear(); this._myselfTypingInactivityTimer.clear(); },
    }; return ThreadTypingMixin;
}); odoo.define('im_livechat.legacy.mail.model.AbstractMessage', function (require) {
    "use strict"; var mailUtils = require('mail.utils'); var Class = require('web.Class'); var core = require('web.core'); var session = require('web.session'); var time = require('web.time'); var _t = core._t; var AbstractMessage = Class.extend({
        init: function (parent, data) { this._attachmentIDs = data.attachment_ids || []; this._body = data.body || ""; this._date = data.date ? moment(time.str_to_datetime(data.date)) : moment(); this._id = data.id; this._isDiscussion = data.is_discussion; this._isNotification = data.is_notification; this._serverAuthorID = data.author_id; this._type = data.message_type || undefined; this._processAttachmentURL(); this._attachmentIDs.forEach(function (attachment) { attachment.filename = attachment.filename || attachment.name || _t("unnamed"); }); }, getAttachments: function () { return this._attachmentIDs; }, getAuthorID: function () {
            if (!this.hasAuthor()) { return -1; }
            return this._serverAuthorID[0];
        }, getAuthorImStatus: function () { return undefined; }, getAvatarSource: function () { if (this.hasAuthor()) { return '/web/image/res.partner/' + this.getAuthorID() + '/image_128'; } }, getBody: function () { return this._body; }, getDate: function () { return this._date; }, getDateDay: function () {
            var date = this.getDate().format('YYYY-MM-DD'); if (date === moment().format('YYYY-MM-DD')) { return _t("Today"); } else if (date === moment().subtract(1, 'days').format('YYYY-MM-DD')) { return _t("Yesterday"); }
            return this.getDate().format('LL');
        }, getDisplayedAuthor: function () { return this.hasAuthor() ? this._getAuthorName() : null; }, getID: function () { return this._id; }, getImageAttachments: function () { return _.filter(this.getAttachments(), function (attachment) { return attachment.mimetype && attachment.mimetype.split('/')[0] === 'image'; }); }, getNonImageAttachments: function () { return _.difference(this.getAttachments(), this.getImageAttachments()); }, getNotificationIcon() {
            if (!this.hasNotificationsError()) { return 'fa fa-envelope-o'; }
            return 'fa fa-envelope';
        }, getNotifications() { return []; }, getNotificationText() { return ''; }, getTimeElapsed: function () { return mailUtils.timeFromNow(this.getDate()); }, getType: function () { return this._type; }, hasAttachments: function () { return this.getAttachments().length > 0; }, hasAuthor: function () { return !!(this._serverAuthorID && this._serverAuthorID[0]); }, hasEmailFrom: function () { return false; }, hasImageAttachments: function () { return _.some(this.getAttachments(), function (attachment) { return attachment.mimetype && attachment.mimetype.split('/')[0] === 'image'; }); }, hasNonImageAttachments: function () { return _.some(this.getAttachments(), function (attachment) { return !(attachment.mimetype && attachment.mimetype.split('/')[0] === 'image'); }); }, hasNotifications() { return this.getNotifications().length > 0; }, hasNotificationsError() { return this.getNotifications().some(notif => notif.notification_status === 'exception' || notif.notification_status === 'bounce'); }, originatesFromChannel: function () { return false; }, hasSubject: function () { return false; }, isEmpty: function () { return !this.hasTrackingValues() && !this.hasAttachments() && !this.getBody(); }, hasSubtypeDescription: function () { return false; }, hasTrackingValues: function () { return false; }, isDiscussion: function () { return this._isDiscussion; }, isLinkedToDocumentThread: function () { return false; }, isNeedaction: function () { return false; }, isNote: function () { return this._isNote; }, isNotification: function () { return this._isNotification; }, isStarred: function () { return false; }, isSystemNotification: function () { return false; }, needsModeration: function () { return false; }, removeAttachments: function (attachmentIDs) { this._attachmentIDs = _.reject(this._attachmentIDs, function (attachment) { return _.contains(attachmentIDs, attachment.id); }); }, shouldRedirectToAuthor: function () { return !this._isMyselfAuthor(); }, _getAuthorName: function () {
            if (!this.hasAuthor()) { return ""; }
            return this._serverAuthorID[1];
        }, _isMyselfAuthor: function () { return this.hasAuthor() && (this.getAuthorID() === session.partner_id); }, _processAttachmentURL: function () { _.each(this.getAttachments(), function (attachment) { attachment.url = '/web/content/' + attachment.id + '?download=true'; }); },
    }); return AbstractMessage;
}); odoo.define('im_livechat.legacy.mail.AbstractThreadWindow', function (require) {
    "use strict"; var ThreadWidget = require('im_livechat.legacy.mail.widget.Thread'); var config = require('web.config'); var core = require('web.core'); var Widget = require('web.Widget'); var QWeb = core.qweb; var _t = core._t; var AbstractThreadWindow = Widget.extend({
        template: 'im_livechat.legacy.mail.AbstractThreadWindow', custom_events: { document_viewer_closed: '_onDocumentViewerClose', }, events: { 'click .o_thread_window_close': '_onClickClose', 'click .o_thread_window_title': '_onClickFold', 'click .o_composer_text_field': '_onComposerClick', 'click .o_mail_thread': '_onThreadWindowClicked', 'keydown .o_composer_text_field': '_onKeydown', 'keypress .o_composer_text_field': '_onKeypress', }, FOLD_ANIMATION_DURATION: 200, HEIGHT_OPEN: '400px', HEIGHT_FOLDED: '34px', init: function (parent, thread, options) { this._super(parent); this.options = _.defaults(options || {}, { autofocus: true, displayStars: true, displayReplyIcons: false, displayNotificationIcons: false, placeholder: _t("Say something"), }); this._hidden = false; this._thread = thread || null; this._debouncedOnScroll = _.debounce(this._onScroll.bind(this), 100); if (!this.hasThread()) { this._folded = false; } }, start: function () {
            var self = this; this.$input = this.$('.o_composer_text_field'); this.$header = this.$('.o_thread_window_header'); var options = { displayMarkAsRead: false, displayStars: this.options.displayStars, }; if (this._thread && this._thread._type === 'document_thread') { options.displayDocumentLinks = false; }
            this._threadWidget = new ThreadWidget(this, options); this.$el.css({ transition: 'height ' + this.FOLD_ANIMATION_DURATION + 'ms linear' }); if (this.isFolded()) { this.$el.css('height', this.HEIGHT_FOLDED); } else if (this.options.autofocus) { this._focusInput(); }
            if (!config.device.isMobile) { var margin_dir = _t.database.parameters.direction === "rtl" ? "margin-left" : "margin-right"; this.$el.css(margin_dir, $.position.scrollbarWidth()); }
            var def = this._threadWidget.replace(this.$('.o_thread_window_content')).then(function () { self._threadWidget.$el.on('scroll', self, self._debouncedOnScroll); }); return Promise.all([this._super(), def]);
        }, do_hide: function () { this._hidden = true; this._super.apply(this, arguments); }, do_show: function () { this._hidden = false; this._super.apply(this, arguments); }, do_toggle: function (display) { this._hidden = _.isBoolean(display) ? !display : !this._hidden; this._super.apply(this, arguments); }, close: function () { }, getID: function () { return this._getThreadID(); }, getThread: function () {
            if (!this.hasThread()) { return undefined; }
            return this._thread;
        }, getThreadStatus: function () {
            if (!this.hasThread()) { return undefined; }
            return this._thread.getStatus();
        }, getTitle: function () {
            if (!this.hasThread()) { return _t("Undefined"); }
            return this._thread.getTitle();
        }, getUnreadCounter: function () {
            if (!this.hasThread()) { return 0; }
            return this._thread.getUnreadCounter();
        }, hasThread: function () { return !!this._thread; }, isAtBottom: function () { return this._threadWidget.isAtBottom(); }, isFolded: function () {
            if (!this.hasThread()) { return this._folded; }
            return this._thread.isFolded();
        }, isMobile: function () { return config.device.isMobile; }, isHidden: function () { return this._hidden; }, needsComposer: function () { return this.hasThread(); }, render: function () { this.renderHeader(); if (this.hasThread()) { this._threadWidget.render(this._thread, { displayLoadMore: false }); } }, renderHeader: function () { var options = this._getHeaderRenderingOptions(); this.$header.html(QWeb.render('im_livechat.legacy.mail.AbstractThreadWindow.HeaderContent', options)); }, scrollToBottom: function () { this._threadWidget.scrollToBottom(); }, toggleFold: function (folded) {
            if (!_.isBoolean(folded)) { folded = !this.isFolded(); }
            this._updateThreadFoldState(folded);
        }, updateVisualFoldState: function () {
            if (!this.isFolded()) { this._threadWidget.scrollToBottom(); if (this.options.autofocus) { this._focusInput(); } }
            var height = this.isFolded() ? this.HEIGHT_FOLDED : this.HEIGHT_OPEN; this.$el.css({ height: height });
        }, _focusInput: function () {
            if (config.device.touch && config.device.size_class <= config.device.SIZES.SM) { return; }
            this.$input.focus();
        }, _getHeaderRenderingOptions: function () { return { status: this.getThreadStatus(), thread: this.getThread(), title: this.getTitle(), unreadCounter: this.getUnreadCounter(), widget: this, }; }, _getThreadID: function () {
            if (!this.hasThread()) { return '_blank'; }
            return this._thread.getID();
        }, _hasFocus: function () { return this.$input.is(':focus'); }, _postMessage: function (messageData) {
            var self = this; if (!this.hasThread()) { return; }
            this._thread.postMessage(messageData).then(function () { self._threadWidget.scrollToBottom(); });
        }, _updateThreadFoldState: function (folded) { if (this.hasThread()) { this._thread.fold(folded); } else { this._folded = folded; this.updateVisualFoldState(); } }, _onClickClose: function (ev) {
            ev.stopPropagation(); ev.preventDefault(); if (this.hasThread() && this._thread.getUnreadCounter() > 0 && !this.isFolded()) { this._thread.markAsRead(); }
            this.close();
        }, _onClickFold: function () { if (!config.device.isMobile) { this.toggleFold(); } }, _onComposerClick: function (ev) {
            if ($(ev.target).closest('a, button').length) { return; }
            this._focusInput();
        }, _onDocumentViewerClose: function () { this._focusInput(); }, _onKeydown: function (ev) { ev.stopPropagation(); if (ev.which === 13) { var content = _.str.trim(this.$input.val()); var messageData = { content: content, attachment_ids: [], partner_ids: [], }; this.$input.val(''); if (content) { this._postMessage(messageData); } } }, _onKeypress: function (ev) { ev.stopPropagation(); }, _onScroll: function () { if (this.hasThread() && this.isAtBottom()) { this._thread.markAsRead(); } }, _onThreadWindowClicked: function () { var selectObj = window.getSelection(); if (selectObj.anchorOffset === selectObj.focusOffset) { this.$input.focus(); } },
    }); return AbstractThreadWindow;
}); odoo.define('im_livechat.legacy.mail.model.CCThrottleFunctionObject', function (require) { "use strict"; var Class = require('web.Class'); var CCThrottleFunctionObject = Class.extend({ init: function (params) { this._arguments = undefined; this._cooldownTimeout = undefined; this._duration = params.duration; this._func = params.func; this._shouldCallFunctionAfterCD = false; }, cancel: function () { this._arguments = undefined; this._shouldCallFunctionAfterCD = false; }, clear: function () { if (this._cooldownTimeout) { clearTimeout(this._cooldownTimeout); this._onCooldownTimeout(); } }, do: function () { this._arguments = Array.prototype.slice.call(arguments); if (this._cooldownTimeout === undefined) { this._callFunction(); } else { this._shouldCallFunctionAfterCD = true; } }, _callFunction: function () { this._func.apply(null, this._arguments); this._cooldown(); }, _cooldown: function () { this.cancel(); this._cooldownTimeout = setTimeout(this._onCooldownTimeout.bind(this), this._duration); }, _onCooldownTimeout: function () { if (this._shouldCallFunctionAfterCD) { this._callFunction(); } else { this._cooldownTimeout = undefined; } }, }); return CCThrottleFunctionObject; }); odoo.define('im_livechat.legacy.mail.model.CCThrottleFunction', function (require) { "use strict"; var CCThrottleFunctionObject = require('im_livechat.legacy.mail.model.CCThrottleFunctionObject'); var CCThrottleFunction = function (params) { var duration = params.duration; var func = params.func; var throttleFunctionObject = new CCThrottleFunctionObject({ duration: duration, func: func, }); var callable = function () { return throttleFunctionObject.do.apply(throttleFunctionObject, arguments); }; callable.cancel = function () { throttleFunctionObject.cancel(); }; callable.clear = function () { throttleFunctionObject.clear(); }; return callable; }; return CCThrottleFunction; }); odoo.define('im_livechat.legacy.mail.model.Timer', function (require) { "use strict"; var Class = require('web.Class'); var Timer = Class.extend({ init: function (params) { this._duration = params.duration; this._timeout = undefined; this._timeoutCallback = params.onTimeout; }, clear: function () { clearTimeout(this._timeout); }, reset: function () { this.clear(); this.start(); }, start: function () { this._timeout = setTimeout(this._onTimeout.bind(this), this._duration); }, _onTimeout: function () { this._timeoutCallback(); }, }); return Timer; }); odoo.define('im_livechat.legacy.mail.model.Timers', function (require) {
    "use strict"; var Timer = require('im_livechat.legacy.mail.model.Timer'); var Class = require('web.Class'); var Timers = Class.extend({
        init: function (params) { this._duration = params.duration; this._timeoutCallback = params.onTimeout; this._timers = {}; }, registerTimer: function (params) {
            var timerID = params.timerID; if (this._timers[timerID]) { this._timers[timerID].clear(); }
            var timerParams = { duration: this._duration, onTimeout: this._timeoutCallback, }; if ('timeoutCallbackArguments' in params) { timerParams.onTimeout = this._timeoutCallback.bind.apply(this._timeoutCallback, [null].concat(params.timeoutCallbackArguments)); } else { timerParams.onTimeout = this._timeoutCallback; }
            this._timers[timerID] = new Timer(timerParams); this._timers[timerID].start();
        }, unregisterTimer: function (params) { var timerID = params.timerID; if (this._timers[timerID]) { this._timers[timerID].clear(); delete this._timers[timerID]; } },
    }); return Timers;
}); odoo.define('im_livechat.legacy.mail.widget.Thread', function (require) {
    "use strict"; var DocumentViewer = require('im_livechat.legacy.mail.DocumentViewer'); var mailUtils = require('mail.utils'); var core = require('web.core'); var time = require('web.time'); var Widget = require('web.Widget'); var QWeb = core.qweb; var _lt = core._lt; var ORDER = { ASC: 1, DESC: -1, }; var READ_MORE = _lt("read more"); var READ_LESS = _lt("read less"); var ThreadWidget = Widget.extend({
        className: 'o_mail_thread', events: { 'click a': '_onClickRedirect', 'click img': '_onClickRedirect', 'click strong': '_onClickRedirect', 'click .o_thread_show_more': '_onClickShowMore', 'click .o_attachment_download': '_onAttachmentDownload', 'click .o_attachment_view': '_onAttachmentView', 'click .o_attachment_delete_cross': '_onDeleteAttachment', 'click .o_thread_message_needaction': '_onClickMessageNeedaction', 'click .o_thread_message_star': '_onClickMessageStar', 'click .o_thread_message_reply': '_onClickMessageReply', 'click .oe_mail_expand': '_onClickMailExpand', 'click .o_thread_message': '_onClickMessage', 'click': '_onClick', 'click .o_thread_message_notification_error': '_onClickMessageNotificationError', 'click .o_thread_message_moderation': '_onClickMessageModeration', 'change .moderation_checkbox': '_onChangeModerationCheckbox', }, init: function (parent, options) { this._super.apply(this, arguments); this.attachments = []; this._enabledOptions = _.defaults(options || {}, { displayOrder: ORDER.ASC, displayMarkAsRead: true, displayModerationCommands: false, displayStars: true, displayDocumentLinks: true, displayAvatars: true, squashCloseMessages: true, displayNotificationIcons: true, displayReplyIcons: false, loadMoreOnScroll: false, hasMessageAttachmentDeletable: false, }); this._disabledOptions = { displayOrder: this._enabledOptions.displayOrder, displayMarkAsRead: false, displayModerationCommands: false, displayStars: false, displayDocumentLinks: false, displayAvatars: this._enabledOptions.displayAvatars, squashCloseMessages: false, displayNotificationIcons: false, displayReplyIcons: false, loadMoreOnScroll: this._enabledOptions.loadMoreOnScroll, hasMessageAttachmentDeletable: false, }; this._selectedMessageID = null; this._currentThreadID = null; this._messageMailPopover = null; this._messageSeenPopover = null; this._openedSeenPopoverIDs = []; }, destroy: function () {
            clearInterval(this._updateTimestampsInterval); if (this._messageMailPopover) { this._messageMailPopover.popover('hide'); }
            if (this._messageSeenPopover) { this._messageSeenPopover.popover('hide'); }
            this._destroyOpenSeenPopoverIDs(); this._super();
        }, render: function (thread, options) {
            var self = this; var shouldScrollToBottomAfterRendering = false; if (this._currentThreadID === thread.getID() && this.isAtBottom()) { shouldScrollToBottomAfterRendering = true; }
            this._currentThreadID = thread.getID(); var messages = _.clone(thread.getMessages({ domain: options.domain || [] })); var modeOptions = options.isCreateMode ? this._disabledOptions : this._enabledOptions; this.attachments = _.uniq(_.flatten(_.map(messages, function (message) { return message.getAttachments(); }))); options = _.extend({}, modeOptions, options, { selectedMessageID: this._selectedMessageID, }); var displayAuthorMessages = {}; var prevMessage; _.each(messages, function (message) {
                if (!prevMessage || (Math.abs(message.getDate().diff(prevMessage.getDate())) > 60000) || prevMessage.getType() !== 'comment' || message.getType() !== 'comment' || (prevMessage.getAuthorID() !== message.getAuthorID()) || ((prevMessage.isLinkedToDocumentThread() && message.isLinkedToDocumentThread()) && (prevMessage.getDocumentModel() !== message.getDocumentModel() || prevMessage.getDocumentID() !== message.getDocumentID()))) { displayAuthorMessages[message.getID()] = true; } else { displayAuthorMessages[message.getID()] = !options.squashCloseMessages; }
                prevMessage = message;
            }); if (modeOptions.displayOrder === ORDER.DESC) { messages.reverse(); }
            this.$el.html(QWeb.render('im_livechat.legacy.mail.widget.Thread', { thread: thread, displayAuthorMessages: displayAuthorMessages, options: options, ORDER: ORDER, dateFormat: time.getLangDatetimeFormat(), })); _.each(messages, function (message) { var $message = self.$('.o_thread_message[data-message-id="' + message.getID() + '"]'); $message.find('.o_mail_timestamp').data('date', message.getDate()); self._insertReadMore($message); }); if (shouldScrollToBottomAfterRendering) { this.scrollToBottom(); }
            if (!this._updateTimestampsInterval) { this.updateTimestampsInterval = setInterval(function () { self._updateTimestamps(); }, 1000 * 60); }
            this._renderMessageNotificationPopover(messages); if (thread.hasSeenFeature()) { this._renderMessageSeenPopover(thread, messages); }
        }, renderLoading: function () { this.$el.html(QWeb.render('im_livechat.legacy.mail.widget.ThreadLoading')); }, getScrolltop: function () { return this.$el.scrollTop(); }, isAtBottom: function () { var fullHeight = this.el.scrollHeight; var topHiddenHeight = this.$el.scrollTop(); var visibleHeight = this.$el.outerHeight(); var bottomHiddenHeight = fullHeight - topHiddenHeight - visibleHeight; return bottomHiddenHeight < 5; }, removeMessageAndRender: function (messageID, thread, options) {
            var self = this; this._currentThreadID = thread.getID(); return new Promise(function (resolve, reject) {
                self.$('.o_thread_message[data-message-id="' + messageID + '"]').fadeOut({
                    done: function () {
                        if (self._currentThreadID === thread.getID()) { self.render(thread, options); }
                        resolve();
                    }, duration: 200,
                });
            });
        }, scrollToBottom: function () { this.$el.scrollTop(this.el.scrollHeight); }, scrollToMessage: function (options) { var $target = this.$('.o_thread_message[data-message-id="' + options.messageID + '"]'); if (options.onlyIfNecessary) { var delta = $target.parent().height() - $target.height(); var offset = delta < 0 ? 0 : delta - ($target.offset().top - $target.offsetParent().offset().top); offset = -Math.min(offset, 0); this.$el.scrollTo("+=" + offset + "px", options.duration); } else if ($target.length) { this.$el.scrollTo($target); } }, scrollToPosition: function (position) { if (position) { this.$el.scrollTop(position); } else { this.scrollToBottom(); } }, toggleModerationCheckboxes: function (checked) { this.$('.moderation_checkbox').prop('checked', checked); }, unselectMessage: function () { this.$('.o_thread_message').removeClass('o_thread_selected_message'); this._selectedMessageID = null; }, _destroyOpenSeenPopoverIDs: function () { _.each(this._openedSeenPopoverIDs, function (popoverID) { $('#' + popoverID).remove(); }); this._openedSeenPopoverIDs = []; }, _insertReadMore: function ($element) {
            var self = this; var groups = []; var readMoreNodes; var $children = $element.contents().filter(function () { return this.nodeType === 1 || this.nodeType === 3 && this.nodeValue.trim(); }); _.each($children, function (child) {
                var $child = $(child); if (child.nodeType === 3 && $child.prevAll('[id*="stopSpelling"]').length > 0) { $child = $('<span>', { text: child.textContent, 'data-o-mail-quote': '1', }); child.parentNode.replaceChild($child[0], child); }
                if ($child.attr('data-o-mail-quote') || ($child.get(0).nodeName === 'BR' && $child.prev('[data-o-mail-quote="1"]').length > 0)) {
                    if (!readMoreNodes) { readMoreNodes = []; groups.push(readMoreNodes); }
                    $child.hide(); readMoreNodes.push($child);
                } else { readMoreNodes = undefined; self._insertReadMore($child); }
            }); _.each(groups, function (group) { var $readMore = $('<a>', { class: 'o_mail_read_more', href: '#', text: READ_MORE, }).insertBefore(group[0]); var isReadMore = true; $readMore.click(function (e) { e.preventDefault(); isReadMore = !isReadMore; _.each(group, function ($child) { $child.hide(); $child.toggle(!isReadMore); }); $readMore.text(isReadMore ? READ_MORE : READ_LESS); }); });
        }, _onDeleteAttachment: function (ev) { ev.stopPropagation(); var $target = $(ev.currentTarget); this.trigger_up('delete_attachment', { attachmentId: $target.data('id'), attachmentName: $target.data('name') }); }, _redirect: _.debounce(function (options) { if ('channelID' in options) { this.trigger('redirect_to_channel', options.channelID); } else { this.trigger('redirect', options.model, options.id); } }, 500, true), _renderMessageNotificationPopover(messages) {
            if (this._messageMailPopover) { this._messageMailPopover.popover('hide'); }
            if (!this.$('.o_thread_tooltip').length) { return; }
            this._messageMailPopover = this.$('.o_thread_tooltip').popover({ html: true, boundary: 'viewport', placement: 'auto', trigger: 'hover', offset: '0, 1', content: function () { var messageID = $(this).data('message-id'); var message = _.find(messages, function (message) { return message.getID() === messageID; }); return QWeb.render('im_livechat.legacy.mail.widget.Thread.Message.MailTooltip', { notifications: message.getNotifications(), }); }, });
        }, _renderMessageSeenPopover: function (thread, messages) {
            var self = this; this._destroyOpenSeenPopoverIDs(); if (this._messageSeenPopover) { this._messageSeenPopover.popover('hide'); }
            if (!this.$('.o_thread_message_core .o_mail_thread_message_seen_icon').length) { return; }
            this._messageSeenPopover = this.$('.o_thread_message_core .o_mail_thread_message_seen_icon').popover({ html: true, boundary: 'viewport', placement: 'auto', trigger: 'hover', offset: '0, 1', content: function () { var $this = $(this); self._openedSeenPopoverIDs.push($this.attr('aria-describedby')); var messageID = $this.data('message-id'); var message = _.find(messages, function (message) { return message.getID() === messageID; }); return QWeb.render('im_livechat.legacy.mail.widget.Thread.Message.SeenIconPopoverContent', { thread: thread, message: message, }); }, });
        }, _updateTimestamps: function () { var isAtBottom = this.isAtBottom(); this.$('.o_mail_timestamp').each(function () { var date = $(this).data('date'); $(this).html(mailUtils.timeFromNow(date)); }); if (isAtBottom && !this.isAtBottom()) { this.scrollToBottom(); } }, _onAttachmentDownload: function (event) { event.stopPropagation(); }, _onAttachmentView: function (event) { event.stopPropagation(); var activeAttachmentID = $(event.currentTarget).data('id'); if (activeAttachmentID) { var attachmentViewer = new DocumentViewer(this, this.attachments, activeAttachmentID); attachmentViewer.appendTo($('body')); } }, _onChangeModerationCheckbox: function (ev) { this.trigger_up('update_moderation_buttons'); }, _onClick: function () { if (this._selectedMessageID) { this.unselectMessage(); this.trigger('unselect_message'); } }, _onClickMailExpand: function (ev) { ev.preventDefault(); }, _onClickMessage: function (ev) { $(ev.currentTarget).toggleClass('o_thread_selected_message'); }, _onClickMessageNeedaction: function (ev) { var messageID = $(ev.currentTarget).data('message-id'); this.trigger('mark_as_read', messageID); }, _onClickMessageNotificationError(ev) { const messageID = $(ev.currentTarget).data('message-id'); this.do_action('mail.mail_resend_message_action', { additional_context: { mail_message_to_resend: messageID, } }); }, _onClickMessageReply: function (ev) { this._selectedMessageID = $(ev.currentTarget).data('message-id'); this.$('.o_thread_message').removeClass('o_thread_selected_message'); this.$('.o_thread_message[data-message-id="' + this._selectedMessageID + '"]').addClass('o_thread_selected_message'); this.trigger('select_message', this._selectedMessageID); ev.stopPropagation(); }, _onClickMessageStar: function (ev) { var messageID = $(ev.currentTarget).data('message-id'); this.trigger('toggle_star_status', messageID); }, _onClickMessageModeration: function (ev) { var $button = $(ev.currentTarget); var messageID = $button.data('message-id'); var decision = $button.data('decision'); this.trigger_up('message_moderation', { messageID: messageID, decision: decision, }); }, _onClickRedirect: function (ev) {
            if ($(ev.target).data('oe-field') !== undefined) { return; }
            var id = $(ev.target).data('oe-id'); if (id) {
                ev.preventDefault(); var model = $(ev.target).data('oe-model'); var options; if (model && (model !== 'mail.channel')) { options = { model: model, id: id }; } else { options = { channelID: id }; }
                this._redirect(options);
            }
        }, _onClickShowMore: function () { this.trigger('load_more_messages'); },
    }); ThreadWidget.ORDER = ORDER; return ThreadWidget;
}); odoo.define('im_livechat.legacy.mail.DocumentViewer', function (require) {
    "use strict"; var core = require('web.core'); var Widget = require('web.Widget'); var QWeb = core.qweb; var SCROLL_ZOOM_STEP = 0.1; var ZOOM_STEP = 0.5; var DocumentViewer = Widget.extend({
        template: "im_livechat.legacy.mail.DocumentViewer", events: { 'click .o_download_btn': '_onDownload', 'click .o_viewer_img': '_onImageClicked', 'click .o_viewer_video': '_onVideoClicked', 'click .move_next': '_onNext', 'click .move_previous': '_onPrevious', 'click .o_rotate': '_onRotate', 'click .o_zoom_in': '_onZoomIn', 'click .o_zoom_out': '_onZoomOut', 'click .o_zoom_reset': '_onZoomReset', 'click .o_close_btn, .o_viewer_img_wrapper': '_onClose', 'click .o_print_btn': '_onPrint', 'DOMMouseScroll .o_viewer_content': '_onScroll', 'mousewheel .o_viewer_content': '_onScroll', 'keydown': '_onKeydown', 'keyup': '_onKeyUp', 'mousedown .o_viewer_img': '_onStartDrag', 'mousemove .o_viewer_content': '_onDrag', 'mouseup .o_viewer_content': '_onEndDrag' }, init: function (parent, attachments, activeAttachmentID) {
            this._super.apply(this, arguments); this.attachment = _.filter(attachments, function (attachment) {
                var match = attachment.type === 'url' ? attachment.url.match("(youtu|.png|.jpg|.gif)") : attachment.mimetype.match("(image|video|application/pdf|text)"); if (match) {
                    attachment.fileType = match[1]; if (match[1].match("(.png|.jpg|.gif)")) { attachment.fileType = 'image'; }
                    if (match[1] === 'youtu') {
                        var youtube_array = attachment.url.split('/'); var youtube_token = youtube_array[youtube_array.length - 1]; if (youtube_token.indexOf('watch') !== -1) { youtube_token = youtube_token.split('v=')[1]; var amp = youtube_token.indexOf('&'); if (amp !== -1) { youtube_token = youtube_token.substring(0, amp); } }
                        attachment.youtube = youtube_token;
                    }
                    return true;
                }
            }); this.activeAttachment = _.findWhere(attachments, { id: activeAttachmentID }); this.modelName = 'ir.attachment'; this._reset();
        }, start: function () { this.$el.modal('show'); this.$el.on('hidden.bs.modal', _.bind(this._onDestroy, this)); this.$('.o_viewer_img').on("load", _.bind(this._onImageLoaded, this)); this.$('[data-toggle="tooltip"]').tooltip({ delay: 0 }); return this._super.apply(this, arguments); }, destroy: function () {
            if (this.isDestroyed()) { return; }
            this.trigger_up('document_viewer_closed'); this.$el.modal('hide'); this.$el.remove(); this._super.apply(this, arguments);
        }, _next: function () { var index = _.findIndex(this.attachment, this.activeAttachment); index = (index + 1) % this.attachment.length; this.activeAttachment = this.attachment[index]; this._updateContent(); }, _previous: function () { var index = _.findIndex(this.attachment, this.activeAttachment); index = index === 0 ? this.attachment.length - 1 : index - 1; this.activeAttachment = this.attachment[index]; this._updateContent(); }, _reset: function () { this.scale = 1; this.dragStartX = this.dragstopX = 0; this.dragStartY = this.dragstopY = 0; }, _updateContent: function () { this.$('.o_viewer_content').html(QWeb.render('im_livechat.legacy.mail.DocumentViewer.Content', { widget: this })); this.$('.o_viewer_img').on("load", _.bind(this._onImageLoaded, this)); this.$('[data-toggle="tooltip"]').tooltip({ delay: 0 }); this._reset(); }, _getTransform: function (scale, angle) { return 'scale3d(' + scale + ', ' + scale + ', 1) rotate(' + angle + 'deg)'; }, _rotate: function (angle) { this._reset(); var new_angle = (this.angle || 0) + angle; this.$('.o_viewer_img').css('transform', this._getTransform(this.scale, new_angle)); this.$('.o_viewer_img').css('max-width', new_angle % 180 !== 0 ? $(document).height() : '100%'); this.$('.o_viewer_img').css('max-height', new_angle % 180 !== 0 ? $(document).width() : '100%'); this.angle = new_angle; }, _zoom: function (scale) {
            if (scale > 0.5) { this.$('.o_viewer_img').css('transform', this._getTransform(scale, this.angle || 0)); this.scale = scale; }
            this.$('.o_zoom_reset').add('.o_zoom_out').toggleClass('disabled', scale === 1);
        }, _onClose: function (e) { e.preventDefault(); this.destroy(); }, _onDestroy: function () { this.destroy(); }, _onDownload: function (e) { e.preventDefault(); window.location = '/web/content/' + this.modelName + '/' + this.activeAttachment.id + '/' + 'datas' + '?download=true'; }, _onDrag: function (e) { e.preventDefault(); if (this.enableDrag) { var $image = this.$('.o_viewer_img'); var $zoomer = this.$('.o_viewer_zoomer'); var top = $image.prop('offsetHeight') * this.scale > $zoomer.height() ? e.clientY - this.dragStartY : 0; var left = $image.prop('offsetWidth') * this.scale > $zoomer.width() ? e.clientX - this.dragStartX : 0; $zoomer.css("transform", "translate3d(" + left + "px, " + top + "px, 0)"); $image.css('cursor', 'move'); } }, _onEndDrag: function (e) { e.preventDefault(); if (this.enableDrag) { this.enableDrag = false; this.dragstopX = e.clientX - this.dragStartX; this.dragstopY = e.clientY - this.dragStartY; this.$('.o_viewer_img').css('cursor', ''); } }, _onImageClicked: function (e) { e.stopPropagation(); }, _onImageLoaded: function () { this.$('.o_loading_img').hide(); }, _onKeydown: function (e) { switch (e.which) { case $.ui.keyCode.RIGHT: e.preventDefault(); this._next(); break; case $.ui.keyCode.LEFT: e.preventDefault(); this._previous(); break; } }, _onKeyUp: function (e) { switch (e.which) { case $.ui.keyCode.ESCAPE: e.preventDefault(); this._onClose(e); break; } }, _onNext: function (e) { e.preventDefault(); this._next(); }, _onPrevious: function (e) { e.preventDefault(); this._previous(); }, _onPrint: function (e) { e.preventDefault(); var src = this.$('.o_viewer_img').prop('src'); var script = QWeb.render('im_livechat.legacy.mail.PrintImage', { src: src }); var printWindow = window.open('about:blank', "_new"); printWindow.document.open(); printWindow.document.write(script); printWindow.document.close(); }, _onScroll: function (e) { var scale; if (e.originalEvent.wheelDelta > 0 || e.originalEvent.detail < 0) { scale = this.scale + SCROLL_ZOOM_STEP; this._zoom(scale); } else { scale = this.scale - SCROLL_ZOOM_STEP; this._zoom(scale); } }, _onStartDrag: function (e) { e.preventDefault(); this.enableDrag = true; this.dragStartX = e.clientX - (this.dragstopX || 0); this.dragStartY = e.clientY - (this.dragstopY || 0); }, _onVideoClicked: function (e) { e.stopPropagation(); var videoElement = e.target; if (videoElement.paused) { videoElement.play(); } else { videoElement.pause(); } }, _onRotate: function (e) { e.preventDefault(); this._rotate(90); }, _onZoomIn: function (e) { e.preventDefault(); var scale = this.scale + ZOOM_STEP; this._zoom(scale); }, _onZoomOut: function (e) { e.preventDefault(); var scale = this.scale - ZOOM_STEP; this._zoom(scale); }, _onZoomReset: function (e) { e.preventDefault(); this.$('.o_viewer_zoomer').css("transform", ""); this._zoom(1); },
    }); return DocumentViewer;
});;

/* /website_livechat/static/src/legacy/public_livechat.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website_livechat.legacy.website_livechat.livechat_request', function (require) {
    "use strict"; var utils = require('web.utils'); var LivechatButton = require('im_livechat.legacy.im_livechat.im_livechat').LivechatButton; LivechatButton.include({
        willStart: function () {
            if (this.options.chat_request_session) { utils.set_cookie('im_livechat_session', JSON.stringify(this.options.chat_request_session), 60 * 60); }
            return this._super();
        },
    }); return { LivechatButton: LivechatButton, };
});;

/* /website_profile/static/src/js/website_profile.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website_profile.website_profile', function (require) {
    'use strict'; var publicWidget = require('web.public.widget'); var wysiwygLoader = require('web_editor.loader'); publicWidget.registry.websiteProfile = publicWidget.Widget.extend({ selector: '.o_wprofile_email_validation_container', read_events: { 'click .send_validation_email': '_onSendValidationEmailClick', 'click .validated_email_close': '_onCloseValidatedEmailClick', }, _onSendValidationEmailClick: function (ev) { ev.preventDefault(); var self = this; var $element = $(ev.currentTarget); this._rpc({ route: '/profile/send_validation_email', params: { 'redirect_url': $element.data('redirect_url') }, }).then(function (data) { if (data) { self.$('button.validation_email_close').click(); } }); }, _onCloseValidatedEmailClick: function () { this._rpc({ route: '/profile/validate_email/close', }); }, }); publicWidget.registry.websiteProfileEditor = publicWidget.Widget.extend({
        selector: '.o_wprofile_editor_form', read_events: { 'click .o_forum_profile_pic_edit': '_onEditProfilePicClick', 'change .o_forum_file_upload': '_onFileUploadChange', 'click .o_forum_profile_pic_clear': '_onProfilePicClearClick', 'click .o_wprofile_submit_btn': '_onSubmitClick', }, start: function () {
            var def = this._super.apply(this, arguments); if (this.editableMode) { return def; }
            var toolbar = [['style', ['style']], ['font', ['bold', 'italic', 'underline', 'clear']], ['para', ['ul', 'ol', 'paragraph']], ['table', ['table']], ['insert', ['link', 'picture']], ['history', ['undo', 'redo']],]; var $textarea = this.$('textarea.o_wysiwyg_loader'); var loadProm = wysiwygLoader.load(this, $textarea[0], { toolbar: toolbar, recordInfo: { context: this._getContext(), res_model: 'res.users', res_id: parseInt(this.$('input[name=user_id]').val()), }, disableResizeImage: true, }).then(wysiwyg => { this._wysiwyg = wysiwyg; }); return Promise.all([def, loadProm]);
        }, _onEditProfilePicClick: function (ev) { ev.preventDefault(); $(ev.currentTarget).closest('form').find('.o_forum_file_upload').trigger('click'); }, _onFileUploadChange: function (ev) {
            if (!ev.currentTarget.files.length) { return; }
            var $form = $(ev.currentTarget).closest('form'); var reader = new window.FileReader(); reader.readAsDataURL(ev.currentTarget.files[0]); reader.onload = function (ev) { $form.find('.o_forum_avatar_img').attr('src', ev.target.result); }; $form.find('#forum_clear_image').remove();
        }, _onProfilePicClearClick: function (ev) { var $form = $(ev.currentTarget).closest('form'); $form.find('.o_forum_avatar_img').attr('src', '/web/static/src/img/placeholder.png'); $form.append($('<input/>', { name: 'clear_image', id: 'forum_clear_image', type: 'hidden', })); }, _onSubmitClick: function () { if (this._wysiwyg) { this._wysiwyg.save(); } },
    }); return publicWidget.registry.websiteProfile;
});;

/* /website_forum/static/src/js/website_forum.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website_forum.website_forum', function (require) {
    'use strict'; const dom = require('web.dom'); var core = require('web.core'); var weDefaultOptions = require('web_editor.wysiwyg.default_options'); var wysiwygLoader = require('web_editor.loader'); var publicWidget = require('web.public.widget'); var session = require('web.session'); var qweb = core.qweb; var _t = core._t; publicWidget.registry.websiteForum = publicWidget.Widget.extend({
        selector: '.website_forum', xmlDependencies: ['/website_forum/static/src/xml/website_forum_share_templates.xml'], events: { 'click .karma_required': '_onKarmaRequiredClick', 'mouseenter .o_js_forum_tag_follow': '_onTagFollowBoxMouseEnter', 'mouseleave .o_js_forum_tag_follow': '_onTagFollowBoxMouseLeave', 'mouseenter .o_forum_user_info': '_onUserInfoMouseEnter', 'mouseleave .o_forum_user_info': '_onUserInfoMouseLeave', 'mouseleave .o_forum_user_bio_expand': '_onUserBioExpandMouseLeave', 'click .flag:not(.karma_required)': '_onFlagAlertClick', 'click .vote_up:not(.karma_required), .vote_down:not(.karma_required)': '_onVotePostClick', 'click .o_js_validation_queue a[href*="/validate"]': '_onValidationQueueClick', 'click .o_wforum_validate_toggler:not(.karma_required)': '_onAcceptAnswerClick', 'click .o_wforum_favourite_toggle': '_onFavoriteQuestionClick', 'click .comment_delete': '_onDeleteCommentClick', 'click .js_close_intro': '_onCloseIntroClick', 'submit .js_wforum_submit_form:has(:not(.karma_required).o_wforum_submit_post)': '_onSubmitForm', }, start: function () {
            var self = this; this.lastsearch = []; $('span[data-oe-model="forum.post"][data-oe-field="content"]').find('img.float-left').removeClass('float-left'); var forumLogin = _.string.sprintf('%s/web?redirect=%s', window.location.origin, escape(window.location.href)); $('.forum_register_url').attr('href', forumLogin); this.$('[data-toggle="tooltip"]').tooltip({ delay: 0 }); this.$('[data-toggle="popover"]').popover({ offset: 8 }); $('input.js_select2').select2({ tags: true, tokenSeparators: [',', ' ', '_'], maximumInputLength: 35, minimumInputLength: 2, maximumSelectionSize: 5, lastsearch: [], createSearchChoice: function (term) { if (_.filter(self.lastsearch, function (s) { return s.text.localeCompare(term) === 0; }).length === 0) { if (parseInt($('#karma').val()) >= parseInt($('#karma_edit_retag').val())) { return { id: '_' + $.trim(term), text: $.trim(term) + ' *', isNew: true, }; } } }, formatResult: function (term) { if (term.isNew) { return '<span class="badge badge-primary">New</span> ' + _.escape(term.text); } else { return _.escape(term.text); } }, ajax: { url: '/forum/get_tags', dataType: 'json', data: function (term) { return { query: term, limit: 50, forum_id: $('#wrapwrap').data('forum_id'), }; }, results: function (data) { var ret = []; _.each(data, function (x) { ret.push({ id: x.id, text: x.name, isNew: false, }); }); self.lastsearch = ret; return { results: ret }; } }, initSelection: function (element, callback) { var data = []; _.each(element.data('init-value'), function (x) { data.push({ id: x.id, text: x.name, isNew: false }); }); element.val(''); callback(data); }, }); _.each($('textarea.o_wysiwyg_loader'), function (textarea) {
                var $textarea = $(textarea); var editorKarma = $textarea.data('karma') || 0; var $form = $textarea.closest('form'); var hasFullEdit = parseInt($("#karma").val()) >= editorKarma; var toolbar = [['style', ['style']], ['font', ['bold', 'italic', 'underline', 'clear']], ['para', ['ul', 'ol', 'paragraph']], ['table', ['table']],]; if (hasFullEdit) { toolbar.push(['insert', ['link', 'picture']]); }
                toolbar.push(['history', ['undo', 'redo']]); var options = { height: 200, minHeight: 80, toolbar: toolbar, styleWithSpan: false, styleTags: _.without(weDefaultOptions.styleTags, 'h1', 'h2', 'h3'), recordInfo: { context: self._getContext(), res_model: 'forum.post', res_id: +window.location.pathname.split('-').pop(), }, disableFullMediaDialog: true, disableResizeImage: true, }; if (!hasFullEdit) { options.plugins = { LinkPlugin: false, MediaPlugin: false, }; }
                wysiwygLoader.load(self, $textarea[0], options).then(wysiwyg => { $form.find('.note-editable').find('img.float-left').removeClass('float-left'); $form.find('.note-editable').find('img.o_we_selected_image').removeClass('o_we_selected_image'); $form.on('click', 'button, .a-submit', () => { $form.find('.note-editable').find('img.o_we_selected_image').removeClass('o_we_selected_image'); wysiwyg.save(); }); });
            }); _.each(this.$('.o_wforum_bio_popover'), authorBox => { $(authorBox).popover({ trigger: 'hover', offset: 10, animation: false, html: true, }).popover('hide').data('bs.popover').tip.classList.add('o_wforum_bio_popover_container'); }); this.$('#post_reply').on('shown.bs.collapse', function (e) { const replyEl = document.querySelector('#post_reply'); const scrollingElement = dom.closestScrollable(replyEl.parentNode); dom.scrollTo(replyEl, { forcedOffset: $(scrollingElement).innerHeight() - $(replyEl).innerHeight(), }); }); return this._super.apply(this, arguments);
        }, _onSubmitForm: function (ev) {
            let validForm = true; let $form = $(ev.currentTarget); let $title = $form.find('input[name=post_name]'); let $textarea = $form.find('textarea[name=content]'); let textareaContent = $form.find('.o_wysiwyg_wrapper .note-editable.panel-body').text().trim(); if ($title.length && $title[0].required) { if ($title.val()) { $title.removeClass('is-invalid'); } else { $title.addClass('is-invalid'); validForm = false; } }
            if ($textarea[0] && $textarea[0].required) { let $textareaContainer = $form.find('.o_wysiwyg_wrapper .note-editor.panel.panel-default'); if (!textareaContent.length) { $textareaContainer.addClass('border border-danger rounded-top'); validForm = false; } else { $textareaContainer.removeClass('border border-danger rounded-top'); } }
            if (validForm) { if ($form.has('.oe_social_share_call').length) { sessionStorage.setItem('social_share', JSON.stringify({ targetType: $(ev.currentTarget).find('.o_wforum_submit_post').data('social-target-type'), })); } } else { ev.preventDefault(); setTimeout(function () { var $buttons = $(ev.currentTarget).find('button[type="submit"], a.a-submit'); _.each($buttons, function (btn) { let $btn = $(btn); $btn.find('i').remove(); $btn.prop('disabled', false); }); }, 0); }
        }, _onKarmaRequiredClick: function (ev) {
            var $karma = $(ev.currentTarget); var karma = $karma.data('karma'); var forum_id = $('#wrapwrap').data('forum_id'); if (!karma) { return; }
            ev.preventDefault(); var msg = karma + ' ' + _t("karma is required to perform this action. "); var title = _t("Karma Error"); if (forum_id) { msg += '<a class="alert-link" href="/forum/' + forum_id + '/faq">' + _t("Read the guidelines to know how to gain karma.") + '</a>'; }
            if (session.is_website_user) { msg = _t("Sorry you must be logged in to perform this action"); title = _t("Access Denied"); }
            this.call('crash_manager', 'show_warning', { message: msg, title: title, }, { sticky: false, });
        }, _onTagFollowBoxMouseEnter: function (ev) { $(ev.currentTarget).find('.o_forum_tag_follow_box').stop().fadeIn().css('display', 'block'); }, _onTagFollowBoxMouseLeave: function (ev) { $(ev.currentTarget).find('.o_forum_tag_follow_box').stop().fadeOut().css('display', 'none'); }, _onUserInfoMouseEnter: function (ev) { $(ev.currentTarget).parent().find('.o_forum_user_bio_expand').delay(500).toggle('fast'); }, _onUserInfoMouseLeave: function (ev) { $(ev.currentTarget).parent().find('.o_forum_user_bio_expand').clearQueue(); }, _onUserBioExpandMouseLeave: function (ev) { $(ev.currentTarget).fadeOut('fast'); }, _onFlagAlertClick: function (ev) {
            var self = this; ev.preventDefault(); var $link = $(ev.currentTarget); this._rpc({ route: $link.data('href') || ($link.attr('href') !== '#' && $link.attr('href')) || $link.closest('form').attr('action'), }).then(function (data) {
                if (data.error) {
                    var message; if (data.error === 'anonymous_user') { message = _t("Sorry you must be logged to flag a post"); } else if (data.error === 'post_already_flagged') { message = _t("This post is already flagged"); } else if (data.error === 'post_non_flaggable') { message = _t("This post can not be flagged"); }
                    self.call('crash_manager', 'show_warning', { message: message, title: _t("Access Denied"), }, { sticky: false, });
                } else if (data.success) { var elem = $link; if (data.success === 'post_flagged_moderator') { elem.data('href') && elem.html(' Flagged'); var c = parseInt($('#count_flagged_posts').html(), 10); c++; $('#count_flagged_posts').html(c); } else if (data.success === 'post_flagged_non_moderator') { elem.data('href') && elem.html(' Flagged'); var forumAnswer = elem.closest('.forum_answer'); forumAnswer.fadeIn(1000); forumAnswer.slideUp(1000); } }
            });
        }, _onVotePostClick: function (ev) {
            var self = this; ev.preventDefault(); var $btn = $(ev.currentTarget); this._rpc({ route: $btn.data('href'), }).then(function (data) {
                if (data.error) {
                    var message; if (data.error === 'own_post') { message = _t('Sorry, you cannot vote for your own posts'); } else if (data.error === 'anonymous_user') { message = _t('Sorry you must be logged to vote'); }
                    self.call('crash_manager', 'show_warning', { message: message, title: _t("Access Denied"), }, { sticky: false, });
                } else {
                    var $container = $btn.closest('.vote'); var $items = $container.children(); var $voteUp = $items.filter('.vote_up'); var $voteDown = $items.filter('.vote_down'); var $voteCount = $items.filter('.vote_count'); var userVote = parseInt(data['user_vote']); $voteUp.prop('disabled', userVote === 1); $voteDown.prop('disabled', userVote === -1); $items.removeClass('text-success text-danger text-muted o_forum_vote_animate'); void $container[0].offsetWidth; if (userVote === 1) { $voteUp.addClass('text-success'); $voteCount.addClass('text-success'); $voteDown.removeClass('karma_required'); }
                    if (userVote === -1) { $voteDown.addClass('text-danger'); $voteCount.addClass('text-danger'); $voteUp.removeClass('karma_required'); }
                    if (userVote === 0) {
                        if (!$voteDown.data('can-downvote')) { $voteDown.addClass('karma_required'); }
                        if (!$voteUp.data('can-upvote')) { $voteUp.addClass('karma_required'); }
                    }
                    $voteCount.html(data['vote_count']).addClass('o_forum_vote_animate');
                }
            });
        }, _onValidationQueueClick: function (ev) { ev.preventDefault(); var $link = $(ev.currentTarget); $link.parents('.post_to_validate').hide(); $.get($link.attr('href')).then(() => { var left = $('.o_js_validation_queue:visible').length; var type = $('h2.o_page_header a.active').data('type'); $('#count_post').text(left); $('#moderation_tools a[href*="/' + type + '_"]').find('strong').text(left); if (!left) { this.$('.o_caught_up_alert').removeClass('d-none'); } }, function () { $link.parents('.o_js_validation_queue > div').addClass('bg-danger text-white').css('background-color', '#FAA'); $link.parents('.post_to_validate').show(); }); }, _onAcceptAnswerClick: function (ev) {
            ev.preventDefault(); var $link = $(ev.currentTarget); var target = $link.data('target'); this._rpc({ route: $link.data('href'), }).then(data => {
                if (data.error) {
                    if (data.error === 'anonymous_user') { var message = _t("Sorry, anonymous users cannot choose correct answer."); }
                    this.call('crash_manager', 'show_warning', { message: message, title: _t("Access Denied"), }, { sticky: false, });
                } else { _.each(this.$('.forum_answer'), answer => { var $answer = $(answer); var isCorrect = $answer.is(target) ? data : false; var $toggler = $answer.find('.o_wforum_validate_toggler'); var newHelper = isCorrect ? $toggler.data('helper-decline') : $toggler.data('helper-accept'); $answer.toggleClass('o_wforum_answer_correct', isCorrect); $toggler.tooltip('dispose').attr('data-original-title', newHelper).tooltip({ delay: 0 }); }); }
            });
        }, _onFavoriteQuestionClick: function (ev) { ev.preventDefault(); var $link = $(ev.currentTarget); this._rpc({ route: $link.data('href'), }).then(function (data) { $link.toggleClass('o_wforum_gold fa-star', data).toggleClass('fa-star-o text-muted', !data); }); }, _onDeleteCommentClick: function (ev) { ev.preventDefault(); var $link = $(ev.currentTarget); var $container = $link.closest('.o_wforum_post_comments_container'); this._rpc({ route: $link.closest('form').attr('action'), }).then(function () { $link.closest('.o_wforum_post_comment').remove(); var count = $container.find('.o_wforum_post_comment').length; if (count) { $container.find('.o_wforum_comments_count').text(count); } else { $container.find('.o_wforum_comments_count_header').remove(); } }); }, _onCloseIntroClick: function (ev) { ev.preventDefault(); document.cookie = 'forum_welcome_message = false'; $('.forum_intro').slideUp(); return true; },
    }); publicWidget.registry.websiteForumSpam = publicWidget.Widget.extend({ selector: '.o_wforum_moderation_queue', xmlDependencies: ['/website_forum/static/src/xml/website_forum_share_templates.xml'], events: { 'click .o_wforum_select_all_spam': '_onSelectallSpamClick', 'click .o_wforum_mark_spam': 'async _onMarkSpamClick', 'input #spamSearch': '_onSpamSearchInput', }, start: function () { this.spamIDs = this.$('.modal').data('spam-ids'); return this._super.apply(this, arguments); }, _onSelectallSpamClick: function (ev) { var $spamInput = this.$('.modal .tab-pane.active input'); $spamInput.prop('checked', true); }, _onSpamSearchInput: function (ev) { var self = this; var toSearch = $(ev.currentTarget).val(); return this._rpc({ model: 'forum.post', method: 'search_read', args: [[['id', 'in', self.spamIDs], '|', ['name', 'ilike', toSearch], ['content', 'ilike', toSearch]], ['name', 'content']], kwargs: {} }).then(function (o) { _.each(o, function (r) { r.content = $('<p>' + $(r.content).html() + '</p>').text().substring(0, 250); }); self.$('div.post_spam').html(qweb.render('website_forum.spam_search_name', { posts: o, })); }); }, _onMarkSpamClick: function (ev) { var key = this.$('.modal .tab-pane.active').data('key'); var $inputs = this.$('.modal .tab-pane.active input.custom-control-input:checked'); var values = _.map($inputs, function (o) { return parseInt(o.value); }); return this._rpc({ model: 'forum.post', method: 'mark_as_offensive_batch', args: [this.spamIDs, key, values], }).then(function () { window.location.reload(); }); }, }); publicWidget.registry.WebsiteForumBackButton = publicWidget.Widget.extend({ selector: '.o_back_button', events: { 'click': '_onBackButtonClick', }, _onBackButtonClick() { window.history.back(); }, });
});;

/* /website_forum/static/src/js/website_forum.share.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website_forum.share', function (require) {
    'use strict'; var core = require('web.core'); var publicWidget = require('web.public.widget'); var qweb = core.qweb; var ForumShare = publicWidget.registry.socialShare.extend({ selector: '', xmlDependencies: publicWidget.registry.socialShare.prototype.xmlDependencies.concat(['/website_forum/static/src/xml/website_forum_share_templates.xml']), events: {}, init: function (parent, options, targetType) { this._super.apply(this, arguments); this.targetType = targetType; }, start: function () { var def = this._super.apply(this, arguments); this._onMouseEnter(); return def; }, _bindSocialEvent: function () { this._super.apply(this, arguments); $('.oe_share_bump').click($.proxy(this._postBump, this)); }, _render: function () { var $question = this.$('article.question'); if (!this.targetType) { this._super.apply(this, arguments); } else if (this.targetType === 'social-alert') { $question.before(qweb.render('website.social_alert', { medias: this.socialList })); } else { $('body').append(qweb.render('website.social_modal', { medias: this.socialList, target_type: this.targetType, state: $question.data('state'), })); $('#oe_social_share_modal').modal('show'); } }, _postBump: function () { this._rpc({ route: '/forum/post/bump', params: { post_id: this.element.data('id'), }, }); }, }); publicWidget.registry.websiteForumShare = publicWidget.Widget.extend({
        selector: '.website_forum', start: function () {
            if (sessionStorage.getItem('social_share')) { var socialData = JSON.parse(sessionStorage.getItem('social_share')); (new ForumShare(this, false, socialData.targetType)).attachTo($(document.body)); sessionStorage.removeItem('social_share'); }
            var $questionContainer = $('.oe_js_bump'); if ($questionContainer.length) { new ForumShare(this, false, 'social-alert').attachTo($questionContainer); }
            return this._super.apply(this, arguments);
        },
    });
});;

/* /website_sale_product_configurator/static/src/js/website_sale_options.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website_sale_options.website_sale', function (require) {
    'use strict'; var ajax = require('web.ajax'); var core = require('web.core'); var publicWidget = require('web.public.widget'); var OptionalProductsModal = require('sale_product_configurator.OptionalProductsModal'); require('website_sale.website_sale'); var _t = core._t; publicWidget.registry.WebsiteSale.include({
        _onProductReady: function () {
            if (this.isBuyNow) { return this._submitForm(); }
            this.optionalProductsModal = new OptionalProductsModal(this.$form, { rootProduct: this.rootProduct, isWebsite: true, okButtonText: _t('Proceed to Checkout'), cancelButtonText: _t('Continue Shopping'), title: _t('Add to cart'), context: this._getContext(), }).open(); this.optionalProductsModal.on('options_empty', null, this._submitForm.bind(this)); this.optionalProductsModal.on('update_quantity', null, this._onOptionsUpdateQuantity.bind(this)); this.optionalProductsModal.on('confirm', null, this._onModalSubmit.bind(this, true)); this.optionalProductsModal.on('back', null, this._onModalSubmit.bind(this, false)); return this.optionalProductsModal.opened();
        }, _onOptionsUpdateQuantity: function (quantity) { var $qtyInput = this.$form.find('.js_main_product input[name="add_qty"]').first(); if ($qtyInput.length) { $qtyInput.val(quantity).trigger('change'); } else { this.optionalProductsModal.triggerVariantChange(this.optionalProductsModal.$el); } }, _onModalSubmit: function (goToShop) {
            var productAndOptions = JSON.stringify(this.optionalProductsModal.getSelectedProducts()); ajax.post('/shop/cart/update_option', { product_and_options: productAndOptions }).then(function (quantity) {
                if (goToShop) { var path = "/shop/cart"; window.location.pathname = path; }
                var $quantity = $(".my_cart_quantity"); $quantity.parent().parent().removeClass('d-none'); $quantity.html(quantity).hide().fadeIn(600);
            });
        },
    }); return publicWidget.registry.WebsiteSaleOptions;
});;

/* /website_sale_comparison/static/src/js/website_sale_comparison.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website_sale_comparison.comparison', function (require) {
    'use strict'; var concurrency = require('web.concurrency'); var core = require('web.core'); var publicWidget = require('web.public.widget'); var utils = require('web.utils'); var VariantMixin = require('sale.VariantMixin'); var website_sale_utils = require('website_sale.utils'); var qweb = core.qweb; var _t = core._t; var ProductComparison = publicWidget.Widget.extend(VariantMixin, {
        xmlDependencies: ['/website_sale_comparison/static/src/xml/comparison.xml'], template: 'product_comparison_template', events: { 'click .o_product_panel_header': '_onClickPanelHeader', }, init: function () { this._super.apply(this, arguments); this.product_data = {}; this.comparelist_product_ids = JSON.parse(utils.get_cookie('comparelist_product_ids') || '[]'); this.product_compare_limit = 4; this.guard = new concurrency.Mutex(); }, start: function () { var self = this; self._loadProducts(this.comparelist_product_ids).then(function () { self._updateContent('hide'); }); self._updateComparelistView(); $('#comparelist .o_product_panel_header').popover({ trigger: 'manual', animation: true, html: true, title: function () { return _t("Compare Products"); }, container: '.o_product_feature_panel', placement: 'top', template: qweb.render('popover'), content: function () { return $('#comparelist .o_product_panel_content').html(); } }); $(window).trigger('resize'); $(document.body).on('click.product_comparaison_widget', '.comparator-popover .o_comparelist_products .o_remove', function (ev) { ev.preventDefault(); self._removeFromComparelist(ev); }); $(document.body).on('click.product_comparaison_widget', '.o_comparelist_remove', function (ev) { self._removeFromComparelist(ev); self.guard.exec(function () { var new_link = '/shop/compare/?products=' + self.comparelist_product_ids.toString(); window.location.href = _.isEmpty(self.comparelist_product_ids) ? '/shop' : new_link; }); }); return this._super.apply(this, arguments); }, destroy: function () { this._super.apply(this, arguments); $(document.body).off('.product_comparaison_widget'); }, handleCompareAddition: function ($elem) {
            var self = this; if (this.comparelist_product_ids.length < this.product_compare_limit) {
                var productId = $elem.data('product-product-id'); if ($elem.hasClass('o_add_compare_dyn')) { productId = $elem.parent().find('.product_id').val(); if (!productId) { productId = $elem.parent().find('input:checked').first().val(); } }
                this.selectOrCreateProduct($elem.closest('form'), productId, $elem.closest('form').find('.product_template_id').val(), false).then(function (productId) {
                    productId = parseInt(productId, 10) || parseInt($elem.data('product-product-id'), 10); if (!productId) { return; }
                    self._addNewProducts(productId).then(function () { website_sale_utils.animateClone($('#comparelist .o_product_panel_header'), $elem.closest('form'), -50, 10); });
                });
            } else { this.$('.o_comparelist_limit_warning').show(); $('#comparelist .o_product_panel_header').popover('show'); }
        }, _loadProducts: function (product_ids) { var self = this; return this._rpc({ route: '/shop/get_product_data', params: { product_ids: product_ids, cookies: JSON.parse(utils.get_cookie('comparelist_product_ids') || '[]'), }, }).then(function (data) { self.comparelist_product_ids = JSON.parse(data.cookies); delete data.cookies; _.each(data, function (product) { self.product_data[product.product.id] = product; }); if (product_ids.length > Object.keys(data).length) { self._updateCookie(); } }); }, _togglePanel: function () { $('#comparelist .o_product_panel_header').popover('toggle'); }, _addNewProducts: function (product_id) { return this.guard.exec(this._addNewProductsImpl.bind(this, product_id)); }, _addNewProductsImpl: function (product_id) {
            var self = this; $('.o_product_feature_panel').addClass('d-md-block'); if (!_.contains(self.comparelist_product_ids, product_id)) { self.comparelist_product_ids.push(product_id); if (_.has(self.product_data, product_id)) { self._updateContent(); } else { return self._loadProducts([product_id]).then(function () { self._updateContent(); self._updateCookie(); }); } }
            self._updateCookie();
        }, _updateContent: function (force) {
            var self = this; this.$('.o_comparelist_products .o_product_row').remove(); _.each(this.comparelist_product_ids, function (res) { if (self.product_data.hasOwnProperty(res)) { var $template = self.product_data[res].render; self.$('.o_comparelist_products').append($template); } }); if (force !== 'hide' && (this.comparelist_product_ids.length > 1 || force === 'show')) { $('#comparelist .o_product_panel_header').popover('show'); }
            else { $('#comparelist .o_product_panel_header').popover('hide'); }
        }, _removeFromComparelist: function (e) { this.guard.exec(this._removeFromComparelistImpl.bind(this, e)); }, _removeFromComparelistImpl: function (e) { var target = $(e.target.closest('.o_comparelist_remove, .o_remove')); this.comparelist_product_ids = _.without(this.comparelist_product_ids, target.data('product_product_id')); target.parents('.o_product_row').remove(); this._updateCookie(); $('.o_comparelist_limit_warning').hide(); this._updateContent('show'); }, _updateCookie: function () { document.cookie = 'comparelist_product_ids=' + JSON.stringify(this.comparelist_product_ids) + '; path=/'; this._updateComparelistView(); }, _updateComparelistView: function () { this.$('.o_product_circle').text(this.comparelist_product_ids.length); this.$('.o_comparelist_button').removeClass('d-md-block'); if (_.isEmpty(this.comparelist_product_ids)) { $('.o_product_feature_panel').removeClass('d-md-block'); } else { $('.o_product_feature_panel').addClass('d-md-block'); this.$('.o_comparelist_products').addClass('d-md-block'); if (this.comparelist_product_ids.length >= 2) { this.$('.o_comparelist_button').addClass('d-md-block'); this.$('.o_comparelist_button a').attr('href', '/shop/compare/?products=' + this.comparelist_product_ids.toString()); } } }, _onClickPanelHeader: function () { this._togglePanel(); },
    }); publicWidget.registry.ProductComparison = publicWidget.Widget.extend({ selector: '.oe_website_sale', events: { 'click .o_add_compare, .o_add_compare_dyn': '_onClickAddCompare', 'click #o_comparelist_table tr': '_onClickComparelistTr', }, start: function () { var def = this._super.apply(this, arguments); this.productComparison = new ProductComparison(this); return Promise.all([def, this.productComparison.appendTo(this.$el)]); }, _onClickAddCompare: function (ev) { this.productComparison.handleCompareAddition($(ev.currentTarget)); }, _onClickComparelistTr: function (ev) { var $target = $(ev.currentTarget); $($target.data('target')).children().slideToggle(100); $target.find('.fa-chevron-circle-down, .fa-chevron-circle-right').toggleClass('fa-chevron-circle-down fa-chevron-circle-right'); }, }); return ProductComparison;
});;

/* /atharva_theme_base/static/lib/js/owl.carousel.js defined in bundle 'web.assets_frontend_lazy' */
; (function ($, window, document, undefined) {
    function Owl(element, options) { this.settings = null; this.options = $.extend({}, Owl.Defaults, options); this.$element = $(element); this._handlers = {}; this._plugins = {}; this._supress = {}; this._current = null; this._speed = null; this._coordinates = []; this._breakpoint = null; this._width = null; this._items = []; this._clones = []; this._mergers = []; this._widths = []; this._invalidated = {}; this._pipe = []; this._drag = { time: null, target: null, pointer: null, stage: { start: null, current: null }, direction: null }; this._states = { current: {}, tags: { 'initializing': ['busy'], 'animating': ['busy'], 'dragging': ['interacting'] } }; $.each(['onResize', 'onThrottledResize'], $.proxy(function (i, handler) { this._handlers[handler] = $.proxy(this[handler], this); }, this)); $.each(Owl.Plugins, $.proxy(function (key, plugin) { this._plugins[key.charAt(0).toLowerCase() + key.slice(1)] = new plugin(this); }, this)); $.each(Owl.Workers, $.proxy(function (priority, worker) { this._pipe.push({ 'filter': worker.filter, 'run': $.proxy(worker.run, this) }); }, this)); this.setup(); this.initialize(); }
    Owl.Defaults = { items: 3, loop: false, center: false, rewind: false, checkVisibility: true, mouseDrag: true, touchDrag: true, pullDrag: true, freeDrag: false, margin: 0, stagePadding: 0, merge: false, mergeFit: true, autoWidth: false, startPosition: 0, rtl: false, smartSpeed: 250, fluidSpeed: false, dragEndSpeed: false, responsive: {}, responsiveRefreshRate: 200, responsiveBaseElement: window, fallbackEasing: 'swing', slideTransition: '', info: false, nestedItemSelector: false, itemElement: 'div', stageElement: 'div', refreshClass: 'owl-refresh', loadedClass: 'owl-loaded', loadingClass: 'owl-loading', rtlClass: 'owl-rtl', responsiveClass: 'owl-responsive', dragClass: 'owl-drag', itemClass: 'owl-item', stageClass: 'owl-stage', stageOuterClass: 'owl-stage-outer', grabClass: 'owl-grab' }; Owl.Width = { Default: 'default', Inner: 'inner', Outer: 'outer' }; Owl.Type = { Event: 'event', State: 'state' }; Owl.Plugins = {}; Owl.Workers = [{ filter: ['width', 'settings'], run: function () { this._width = this.$element.width(); } }, { filter: ['width', 'items', 'settings'], run: function (cache) { cache.current = this._items && this._items[this.relative(this._current)]; } }, { filter: ['items', 'settings'], run: function () { this.$stage.children('.cloned').remove(); } }, { filter: ['width', 'items', 'settings'], run: function (cache) { var margin = this.settings.margin || '', grid = !this.settings.autoWidth, rtl = this.settings.rtl, css = { 'width': 'auto', 'margin-left': rtl ? margin : '', 'margin-right': rtl ? '' : margin }; !grid && this.$stage.children().css(css); cache.css = css; } }, {
        filter: ['width', 'items', 'settings'], run: function (cache) {
            var width = (this.width() / this.settings.items).toFixed(3) - this.settings.margin, merge = null, iterator = this._items.length, grid = !this.settings.autoWidth, widths = []; cache.items = { merge: false, width: width }; while (iterator--) { merge = this._mergers[iterator]; merge = this.settings.mergeFit && Math.min(merge, this.settings.items) || merge; cache.items.merge = merge > 1 || cache.items.merge; widths[iterator] = !grid ? this._items[iterator].width() : width * merge; }
            this._widths = widths;
        }
    }, {
        filter: ['items', 'settings'], run: function () {
            var clones = [], items = this._items, settings = this.settings, view = Math.max(settings.items * 2, 4), size = Math.ceil(items.length / 2) * 2, repeat = settings.loop && items.length ? settings.rewind ? view : Math.max(view, size) : 0, append = '', prepend = ''; repeat /= 2; while (repeat > 0) { clones.push(this.normalize(clones.length / 2, true)); append = append + items[clones[clones.length - 1]][0].outerHTML; clones.push(this.normalize(items.length - 1 - (clones.length - 1) / 2, true)); prepend = items[clones[clones.length - 1]][0].outerHTML + prepend; repeat -= 1; }
            this._clones = clones; $(append).addClass('cloned').appendTo(this.$stage); $(prepend).addClass('cloned').prependTo(this.$stage);
        }
    }, {
        filter: ['width', 'items', 'settings'], run: function () {
            var rtl = this.settings.rtl ? 1 : -1, size = this._clones.length + this._items.length, iterator = -1, previous = 0, current = 0, coordinates = []; while (++iterator < size) { previous = coordinates[iterator - 1] || 0; current = this._widths[this.relative(iterator)] + this.settings.margin; coordinates.push(previous + current * rtl); }
            this._coordinates = coordinates;
        }
    }, { filter: ['width', 'items', 'settings'], run: function () { var padding = this.settings.stagePadding, coordinates = this._coordinates, css = { 'width': Math.ceil(Math.abs(coordinates[coordinates.length - 1])) + padding * 2, 'padding-left': padding || '', 'padding-right': padding || '' }; this.$stage.css(css); } }, { filter: ['width', 'items', 'settings'], run: function (cache) { var iterator = this._coordinates.length, grid = !this.settings.autoWidth, items = this.$stage.children(); if (grid && cache.items.merge) { while (iterator--) { cache.css.width = this._widths[this.relative(iterator)]; items.eq(iterator).css(cache.css); } } else if (grid) { cache.css.width = cache.items.width; items.css(cache.css); } } }, { filter: ['items'], run: function () { this._coordinates.length < 1 && this.$stage.removeAttr('style'); } }, { filter: ['width', 'items', 'settings'], run: function (cache) { cache.current = cache.current ? this.$stage.children().index(cache.current) : 0; cache.current = Math.max(this.minimum(), Math.min(this.maximum(), cache.current)); this.reset(cache.current); } }, { filter: ['position'], run: function () { this.animate(this.coordinates(this._current)); } }, {
        filter: ['width', 'position', 'items', 'settings'], run: function () {
            var rtl = this.settings.rtl ? 1 : -1, padding = this.settings.stagePadding * 2, begin = this.coordinates(this.current()) + padding, end = begin + this.width() * rtl, inner, outer, matches = [], i, n; for (i = 0, n = this._coordinates.length; i < n; i++) { inner = this._coordinates[i - 1] || 0; outer = Math.abs(this._coordinates[i]) + padding * rtl; if ((this.op(inner, '<=', begin) && (this.op(inner, '>', end))) || (this.op(outer, '<', begin) && this.op(outer, '>', end))) { matches.push(i); } }
            this.$stage.children('.active').removeClass('active'); this.$stage.children(':eq(' + matches.join('), :eq(') + ')').addClass('active'); this.$stage.children('.center').removeClass('center'); if (this.settings.center) { this.$stage.children().eq(this.current()).addClass('center'); }
        }
    }]; Owl.prototype.initializeStage = function () {
        this.$stage = this.$element.find('.' + this.settings.stageClass); if (this.$stage.length) { return; }
        this.$element.addClass(this.options.loadingClass); this.$stage = $('<' + this.settings.stageElement + '>', { "class": this.settings.stageClass }).wrap($('<div/>', { "class": this.settings.stageOuterClass })); this.$element.append(this.$stage.parent());
    }; Owl.prototype.initializeItems = function () {
        var $items = this.$element.find('.owl-item'); if ($items.length) { this._items = $items.get().map(function (item) { return $(item); }); this._mergers = this._items.map(function () { return 1; }); this.refresh(); return; }
        this.replace(this.$element.children().not(this.$stage.parent())); if (this.isVisible()) { this.refresh(); } else { this.invalidate('width'); }
        this.$element.removeClass(this.options.loadingClass).addClass(this.options.loadedClass);
    }; Owl.prototype.initialize = function () {
        this.enter('initializing'); this.trigger('initialize'); this.$element.toggleClass(this.settings.rtlClass, this.settings.rtl); if (this.settings.autoWidth && !this.is('pre-loading')) { var imgs, nestedSelector, width; imgs = this.$element.find('img'); nestedSelector = this.settings.nestedItemSelector ? '.' + this.settings.nestedItemSelector : undefined; width = this.$element.children(nestedSelector).width(); if (imgs.length && width <= 0) { this.preloadAutoWidthImages(imgs); } }
        this.initializeStage(); this.initializeItems(); this.registerEventHandlers(); this.leave('initializing'); this.trigger('initialized');
    }; Owl.prototype.isVisible = function () { return this.settings.checkVisibility ? this.$element.is(':visible') : true; }; Owl.prototype.setup = function () {
        var viewport = this.viewport(), overwrites = this.options.responsive, match = -1, settings = null; if (!overwrites) { settings = $.extend({}, this.options); } else {
            $.each(overwrites, function (breakpoint) { if (breakpoint <= viewport && breakpoint > match) { match = Number(breakpoint); } }); settings = $.extend({}, this.options, overwrites[match]); if (typeof settings.stagePadding === 'function') { settings.stagePadding = settings.stagePadding(); }
            delete settings.responsive; if (settings.responsiveClass) { this.$element.attr('class', this.$element.attr('class').replace(new RegExp('(' + this.options.responsiveClass + '-)\\S+\\s', 'g'), '$1' + match)); }
        }
        this.trigger('change', { property: { name: 'settings', value: settings } }); this._breakpoint = match; this.settings = settings; this.invalidate('settings'); this.trigger('changed', { property: { name: 'settings', value: this.settings } });
    }; Owl.prototype.optionsLogic = function () { if (this.settings.autoWidth) { this.settings.stagePadding = false; this.settings.merge = false; } }; Owl.prototype.prepare = function (item) {
        var event = this.trigger('prepare', { content: item }); if (!event.data) { event.data = $('<' + this.settings.itemElement + '/>').addClass(this.options.itemClass).append(item) }
        this.trigger('prepared', { content: event.data }); return event.data;
    }; Owl.prototype.update = function () {
        var i = 0, n = this._pipe.length, filter = $.proxy(function (p) { return this[p] }, this._invalidated), cache = {}; while (i < n) {
            if (this._invalidated.all || $.grep(this._pipe[i].filter, filter).length > 0) { this._pipe[i].run(cache); }
            i++;
        }
        this._invalidated = {}; !this.is('valid') && this.enter('valid');
    }; Owl.prototype.width = function (dimension) { dimension = dimension || Owl.Width.Default; switch (dimension) { case Owl.Width.Inner: case Owl.Width.Outer: return this._width; default: return this._width - this.settings.stagePadding * 2 + this.settings.margin; } }; Owl.prototype.refresh = function () { this.enter('refreshing'); this.trigger('refresh'); this.setup(); this.optionsLogic(); this.$element.addClass(this.options.refreshClass); this.update(); this.$element.removeClass(this.options.refreshClass); this.leave('refreshing'); this.trigger('refreshed'); }; Owl.prototype.onThrottledResize = function () { window.clearTimeout(this.resizeTimer); this.resizeTimer = window.setTimeout(this._handlers.onResize, this.settings.responsiveRefreshRate); }; Owl.prototype.onResize = function () {
        if (!this._items.length) { return false; }
        if (this._width === this.$element.width()) { return false; }
        if (!this.isVisible()) { return false; }
        this.enter('resizing'); if (this.trigger('resize').isDefaultPrevented()) { this.leave('resizing'); return false; }
        this.invalidate('width'); this.refresh(); this.leave('resizing'); this.trigger('resized');
    }; Owl.prototype.registerEventHandlers = function () {
        if ($.support.transition) { this.$stage.on($.support.transition.end + '.owl.core', $.proxy(this.onTransitionEnd, this)); }
        if (this.settings.responsive !== false) { this.on(window, 'resize', this._handlers.onThrottledResize); }
        if (this.settings.mouseDrag) { this.$element.addClass(this.options.dragClass); this.$stage.on('mousedown.owl.core', $.proxy(this.onDragStart, this)); this.$stage.on('dragstart.owl.core selectstart.owl.core', function () { return false }); }
        if (this.settings.touchDrag) { this.$stage.on('touchstart.owl.core', $.proxy(this.onDragStart, this)); this.$stage.on('touchcancel.owl.core', $.proxy(this.onDragEnd, this)); }
    }; Owl.prototype.onDragStart = function (event) {
        var stage = null; if (event.which === 3) { return; }
        if ($.support.transform) { stage = this.$stage.css('transform').replace(/.*\(|\)| /g, '').split(','); stage = { x: stage[stage.length === 16 ? 12 : 4], y: stage[stage.length === 16 ? 13 : 5] }; } else { stage = this.$stage.position(); stage = { x: this.settings.rtl ? stage.left + this.$stage.width() - this.width() + this.settings.margin : stage.left, y: stage.top }; }
        if (this.is('animating')) {
            $.support.transform ? this.animate(stage.x) : this.$stage.stop()
            this.invalidate('position');
        }
        this.$element.toggleClass(this.options.grabClass, event.type === 'mousedown'); this.speed(0); this._drag.time = new Date().getTime(); this._drag.target = $(event.target); this._drag.stage.start = stage; this._drag.stage.current = stage; this._drag.pointer = this.pointer(event); $(document).on('mouseup.owl.core touchend.owl.core', $.proxy(this.onDragEnd, this)); $(document).one('mousemove.owl.core touchmove.owl.core', $.proxy(function (event) {
            var delta = this.difference(this._drag.pointer, this.pointer(event)); $(document).on('mousemove.owl.core touchmove.owl.core', $.proxy(this.onDragMove, this)); if (Math.abs(delta.x) < Math.abs(delta.y) && this.is('valid')) { return; }
            event.preventDefault(); this.enter('dragging'); this.trigger('drag');
        }, this));
    }; Owl.prototype.onDragMove = function (event) {
        var minimum = null, maximum = null, pull = null, delta = this.difference(this._drag.pointer, this.pointer(event)), stage = this.difference(this._drag.stage.start, delta); if (!this.is('dragging')) { return; }
        event.preventDefault(); if (this.settings.loop) { minimum = this.coordinates(this.minimum()); maximum = this.coordinates(this.maximum() + 1) - minimum; stage.x = (((stage.x - minimum) % maximum + maximum) % maximum) + minimum; } else { minimum = this.settings.rtl ? this.coordinates(this.maximum()) : this.coordinates(this.minimum()); maximum = this.settings.rtl ? this.coordinates(this.minimum()) : this.coordinates(this.maximum()); pull = this.settings.pullDrag ? -1 * delta.x / 5 : 0; stage.x = Math.max(Math.min(stage.x, minimum + pull), maximum + pull); }
        this._drag.stage.current = stage; this.animate(stage.x);
    }; Owl.prototype.onDragEnd = function (event) {
        var delta = this.difference(this._drag.pointer, this.pointer(event)), stage = this._drag.stage.current, direction = delta.x > 0 ^ this.settings.rtl ? 'left' : 'right'; $(document).off('.owl.core'); this.$element.removeClass(this.options.grabClass); if (delta.x !== 0 && this.is('dragging') || !this.is('valid')) { this.speed(this.settings.dragEndSpeed || this.settings.smartSpeed); this.current(this.closest(stage.x, delta.x !== 0 ? direction : this._drag.direction)); this.invalidate('position'); this.update(); this._drag.direction = direction; if (Math.abs(delta.x) > 3 || new Date().getTime() - this._drag.time > 300) { this._drag.target.one('click.owl.core', function () { return false; }); } }
        if (!this.is('dragging')) { return; }
        this.leave('dragging'); this.trigger('dragged');
    }; Owl.prototype.closest = function (coordinate, direction) {
        var position = -1, pull = 30, width = this.width(), coordinates = this.coordinates(); if (!this.settings.freeDrag) {
            $.each(coordinates, $.proxy(function (index, value) {
                if (direction === 'left' && coordinate > value - pull && coordinate < value + pull) { position = index; } else if (direction === 'right' && coordinate > value - width - pull && coordinate < value - width + pull) { position = index + 1; } else if (this.op(coordinate, '<', value) && this.op(coordinate, '>', coordinates[index + 1] !== undefined ? coordinates[index + 1] : value - width)) { position = direction === 'left' ? index + 1 : index; }
                return position === -1;
            }, this));
        }
        if (!this.settings.loop) { if (this.op(coordinate, '>', coordinates[this.minimum()])) { position = coordinate = this.minimum(); } else if (this.op(coordinate, '<', coordinates[this.maximum()])) { position = coordinate = this.maximum(); } }
        return position;
    }; Owl.prototype.animate = function (coordinate) {
        var animate = this.speed() > 0; this.is('animating') && this.onTransitionEnd(); if (animate) { this.enter('animating'); this.trigger('translate'); }
        if ($.support.transform3d && $.support.transition) { this.$stage.css({ transform: 'translate3d(' + coordinate + 'px,0px,0px)', transition: (this.speed() / 1000) + 's' + (this.settings.slideTransition ? ' ' + this.settings.slideTransition : '') }); } else if (animate) { this.$stage.animate({ left: coordinate + 'px' }, this.speed(), this.settings.fallbackEasing, $.proxy(this.onTransitionEnd, this)); } else { this.$stage.css({ left: coordinate + 'px' }); }
    }; Owl.prototype.is = function (state) { return this._states.current[state] && this._states.current[state] > 0; }; Owl.prototype.current = function (position) {
        if (position === undefined) { return this._current; }
        if (this._items.length === 0) { return undefined; }
        position = this.normalize(position); if (this._current !== position) {
            var event = this.trigger('change', { property: { name: 'position', value: position } }); if (event.data !== undefined) { position = this.normalize(event.data); }
            this._current = position; this.invalidate('position'); this.trigger('changed', { property: { name: 'position', value: this._current } });
        }
        return this._current;
    }; Owl.prototype.invalidate = function (part) {
        if ($.type(part) === 'string') { this._invalidated[part] = true; this.is('valid') && this.leave('valid'); }
        return $.map(this._invalidated, function (v, i) { return i });
    }; Owl.prototype.reset = function (position) {
        position = this.normalize(position); if (position === undefined) { return; }
        this._speed = 0; this._current = position; this.suppress(['translate', 'translated']); this.animate(this.coordinates(position)); this.release(['translate', 'translated']);
    }; Owl.prototype.normalize = function (position, relative) {
        var n = this._items.length, m = relative ? 0 : this._clones.length; if (!this.isNumeric(position) || n < 1) { position = undefined; } else if (position < 0 || position >= n + m) { position = ((position - m / 2) % n + n) % n + m / 2; }
        return position;
    }; Owl.prototype.relative = function (position) { position -= this._clones.length / 2; return this.normalize(position, true); }; Owl.prototype.maximum = function (relative) {
        var settings = this.settings, maximum = this._coordinates.length, iterator, reciprocalItemsWidth, elementWidth; if (settings.loop) { maximum = this._clones.length / 2 + this._items.length - 1; } else if (settings.autoWidth || settings.merge) {
            iterator = this._items.length; if (iterator) { reciprocalItemsWidth = this._items[--iterator].width(); elementWidth = this.$element.width(); while (iterator--) { reciprocalItemsWidth += this._items[iterator].width() + this.settings.margin; if (reciprocalItemsWidth > elementWidth) { break; } } }
            maximum = iterator + 1;
        } else if (settings.center) { maximum = this._items.length - 1; } else { maximum = this._items.length - settings.items; }
        if (relative) { maximum -= this._clones.length / 2; }
        return Math.max(maximum, 0);
    }; Owl.prototype.minimum = function (relative) { return relative ? 0 : this._clones.length / 2; }; Owl.prototype.items = function (position) {
        if (position === undefined) { return this._items.slice(); }
        position = this.normalize(position, true); return this._items[position];
    }; Owl.prototype.mergers = function (position) {
        if (position === undefined) { return this._mergers.slice(); }
        position = this.normalize(position, true); return this._mergers[position];
    }; Owl.prototype.clones = function (position) {
        var odd = this._clones.length / 2, even = odd + this._items.length, map = function (index) { return index % 2 === 0 ? even + index / 2 : odd - (index + 1) / 2 }; if (position === undefined) { return $.map(this._clones, function (v, i) { return map(i) }); }
        return $.map(this._clones, function (v, i) { return v === position ? map(i) : null });
    }; Owl.prototype.speed = function (speed) {
        if (speed !== undefined) { this._speed = speed; }
        return this._speed;
    }; Owl.prototype.coordinates = function (position) {
        var multiplier = 1, newPosition = position - 1, coordinate; if (position === undefined) { return $.map(this._coordinates, $.proxy(function (coordinate, index) { return this.coordinates(index); }, this)); }
        if (this.settings.center) {
            if (this.settings.rtl) { multiplier = -1; newPosition = position + 1; }
            coordinate = this._coordinates[position]; coordinate += (this.width() - coordinate + (this._coordinates[newPosition] || 0)) / 2 * multiplier;
        } else { coordinate = this._coordinates[newPosition] || 0; }
        coordinate = Math.ceil(coordinate); return coordinate;
    }; Owl.prototype.duration = function (from, to, factor) {
        if (factor === 0) { return 0; }
        return Math.min(Math.max(Math.abs(to - from), 1), 6) * Math.abs((factor || this.settings.smartSpeed));
    }; Owl.prototype.to = function (position, speed) {
        var current = this.current(), revert = null, distance = position - this.relative(current), direction = (distance > 0) - (distance < 0), items = this._items.length, minimum = this.minimum(), maximum = this.maximum(); if (this.settings.loop) {
            if (!this.settings.rewind && Math.abs(distance) > items / 2) { distance += direction * -1 * items; }
            position = current + distance; revert = ((position - minimum) % items + items) % items + minimum; if (revert !== position && revert - distance <= maximum && revert - distance > 0) { current = revert - distance; position = revert; this.reset(current); }
        } else if (this.settings.rewind) { maximum += 1; position = (position % maximum + maximum) % maximum; } else { position = Math.max(minimum, Math.min(maximum, position)); }
        this.speed(this.duration(current, position, speed)); this.current(position); if (this.isVisible()) { this.update(); }
    }; Owl.prototype.next = function (speed) { speed = speed || false; this.to(this.relative(this.current()) + 1, speed); }; Owl.prototype.prev = function (speed) { speed = speed || false; this.to(this.relative(this.current()) - 1, speed); }; Owl.prototype.onTransitionEnd = function (event) {
        if (event !== undefined) { event.stopPropagation(); if ((event.target || event.srcElement || event.originalTarget) !== this.$stage.get(0)) { return false; } }
        this.leave('animating'); this.trigger('translated');
    }; Owl.prototype.viewport = function () {
        var width; if (this.options.responsiveBaseElement !== window) { width = $(this.options.responsiveBaseElement).width(); } else if (window.innerWidth) { width = window.innerWidth; } else if (document.documentElement && document.documentElement.clientWidth) { width = document.documentElement.clientWidth; } else { console.warn('Can not detect viewport width.'); }
        return width;
    }; Owl.prototype.replace = function (content) {
        this.$stage.empty(); this._items = []; if (content) { content = (content instanceof jQuery) ? content : $(content); }
        if (this.settings.nestedItemSelector) { content = content.find('.' + this.settings.nestedItemSelector); }
        content.filter(function () { return this.nodeType === 1; }).each($.proxy(function (index, item) { item = this.prepare(item); this.$stage.append(item); this._items.push(item); this._mergers.push(item.find('[data-merge]').addBack('[data-merge]').attr('data-merge') * 1 || 1); }, this)); this.reset(this.isNumeric(this.settings.startPosition) ? this.settings.startPosition : 0); this.invalidate('items');
    }; Owl.prototype.add = function (content, position) {
        var current = this.relative(this._current); position = position === undefined ? this._items.length : this.normalize(position, true); content = content instanceof jQuery ? content : $(content); this.trigger('add', { content: content, position: position }); content = this.prepare(content); if (this._items.length === 0 || position === this._items.length) { this._items.length === 0 && this.$stage.append(content); this._items.length !== 0 && this._items[position - 1].after(content); this._items.push(content); this._mergers.push(content.find('[data-merge]').addBack('[data-merge]').attr('data-merge') * 1 || 1); } else { this._items[position].before(content); this._items.splice(position, 0, content); this._mergers.splice(position, 0, content.find('[data-merge]').addBack('[data-merge]').attr('data-merge') * 1 || 1); }
        this._items[current] && this.reset(this._items[current].index()); this.invalidate('items'); this.trigger('added', { content: content, position: position });
    }; Owl.prototype.remove = function (position) {
        position = this.normalize(position, true); if (position === undefined) { return; }
        this.trigger('remove', { content: this._items[position], position: position }); this._items[position].remove(); this._items.splice(position, 1); this._mergers.splice(position, 1); this.invalidate('items'); this.trigger('removed', { content: null, position: position });
    }; Owl.prototype.preloadAutoWidthImages = function (images) { images.each($.proxy(function (i, element) { this.enter('pre-loading'); element = $(element); $(new Image()).one('load', $.proxy(function (e) { element.attr('src', e.target.src); element.css('opacity', 1); this.leave('pre-loading'); !this.is('pre-loading') && !this.is('initializing') && this.refresh(); }, this)).attr('src', element.attr('src') || element.attr('data-src') || element.attr('data-src-retina')); }, this)); }; Owl.prototype.destroy = function () {
        this.$element.off('.owl.core'); this.$stage.off('.owl.core'); $(document).off('.owl.core'); if (this.settings.responsive !== false) { window.clearTimeout(this.resizeTimer); this.off(window, 'resize', this._handlers.onThrottledResize); }
        for (var i in this._plugins) { this._plugins[i].destroy(); }
        this.$stage.children('.cloned').remove(); this.$stage.unwrap(); this.$stage.children().contents().unwrap(); this.$stage.children().unwrap(); this.$stage.remove(); this.$element.removeClass(this.options.refreshClass).removeClass(this.options.loadingClass).removeClass(this.options.loadedClass).removeClass(this.options.rtlClass).removeClass(this.options.dragClass).removeClass(this.options.grabClass).attr('class', this.$element.attr('class').replace(new RegExp(this.options.responsiveClass + '-\\S+\\s', 'g'), '')).removeData('owl.carousel');
    }; Owl.prototype.op = function (a, o, b) { var rtl = this.settings.rtl; switch (o) { case '<': return rtl ? a > b : a < b; case '>': return rtl ? a < b : a > b; case '>=': return rtl ? a <= b : a >= b; case '<=': return rtl ? a >= b : a <= b; default: break; } }; Owl.prototype.on = function (element, event, listener, capture) { if (element.addEventListener) { element.addEventListener(event, listener, capture); } else if (element.attachEvent) { element.attachEvent('on' + event, listener); } }; Owl.prototype.off = function (element, event, listener, capture) { if (element.removeEventListener) { element.removeEventListener(event, listener, capture); } else if (element.detachEvent) { element.detachEvent('on' + event, listener); } }; Owl.prototype.trigger = function (name, data, namespace, state, enter) {
        var status = { item: { count: this._items.length, index: this.current() } }, handler = $.camelCase($.grep(['on', name, namespace], function (v) { return v }).join('-').toLowerCase()), event = $.Event([name, 'owl', namespace || 'carousel'].join('.').toLowerCase(), $.extend({ relatedTarget: this }, status, data)); if (!this._supress[name]) { $.each(this._plugins, function (name, plugin) { if (plugin.onTrigger) { plugin.onTrigger(event); } }); this.register({ type: Owl.Type.Event, name: name }); this.$element.trigger(event); if (this.settings && typeof this.settings[handler] === 'function') { this.settings[handler].call(this, event); } }
        return event;
    }; Owl.prototype.enter = function (name) {
        $.each([name].concat(this._states.tags[name] || []), $.proxy(function (i, name) {
            if (this._states.current[name] === undefined) { this._states.current[name] = 0; }
            this._states.current[name]++;
        }, this));
    }; Owl.prototype.leave = function (name) { $.each([name].concat(this._states.tags[name] || []), $.proxy(function (i, name) { this._states.current[name]--; }, this)); }; Owl.prototype.register = function (object) {
        if (object.type === Owl.Type.Event) {
            if (!$.event.special[object.name]) { $.event.special[object.name] = {}; }
            if (!$.event.special[object.name].owl) {
                var _default = $.event.special[object.name]._default; $.event.special[object.name]._default = function (e) {
                    if (_default && _default.apply && (!e.namespace || e.namespace.indexOf('owl') === -1)) { return _default.apply(this, arguments); }
                    return e.namespace && e.namespace.indexOf('owl') > -1;
                }; $.event.special[object.name].owl = true;
            }
        } else if (object.type === Owl.Type.State) {
            if (!this._states.tags[object.name]) { this._states.tags[object.name] = object.tags; } else { this._states.tags[object.name] = this._states.tags[object.name].concat(object.tags); }
            this._states.tags[object.name] = $.grep(this._states.tags[object.name], $.proxy(function (tag, i) { return $.inArray(tag, this._states.tags[object.name]) === i; }, this));
        }
    }; Owl.prototype.suppress = function (events) { $.each(events, $.proxy(function (index, event) { this._supress[event] = true; }, this)); }; Owl.prototype.release = function (events) { $.each(events, $.proxy(function (index, event) { delete this._supress[event]; }, this)); }; Owl.prototype.pointer = function (event) {
        var result = { x: null, y: null }; event = event.originalEvent || event || window.event; event = event.touches && event.touches.length ? event.touches[0] : event.changedTouches && event.changedTouches.length ? event.changedTouches[0] : event; if (event.pageX) { result.x = event.pageX; result.y = event.pageY; } else { result.x = event.clientX; result.y = event.clientY; }
        return result;
    }; Owl.prototype.isNumeric = function (number) { return !isNaN(parseFloat(number)); }; Owl.prototype.difference = function (first, second) { return { x: first.x - second.x, y: first.y - second.y }; }; $.fn.owlCarousel = function (option) {
        var args = Array.prototype.slice.call(arguments, 1); return this.each(function () {
            var $this = $(this), data = $this.data('owl.carousel'); if (!data) { data = new Owl(this, typeof option == 'object' && option); $this.data('owl.carousel', data); $.each(['next', 'prev', 'to', 'destroy', 'refresh', 'replace', 'add', 'remove'], function (i, event) { data.register({ type: Owl.Type.Event, name: event }); data.$element.on(event + '.owl.carousel.core', $.proxy(function (e) { if (e.namespace && e.relatedTarget !== this) { this.suppress([event]); data[event].apply(this, [].slice.call(arguments, 1)); this.release([event]); } }, data)); }); }
            if (typeof option == 'string' && option.charAt(0) !== '_') { data[option].apply(data, args); }
        });
    }; $.fn.owlCarousel.Constructor = Owl;
})(window.Zepto || window.jQuery, window, document);; (function ($, window, document, undefined) {
    var AutoRefresh = function (carousel) { this._core = carousel; this._interval = null; this._visible = null; this._handlers = { 'initialized.owl.carousel': $.proxy(function (e) { if (e.namespace && this._core.settings.autoRefresh) { this.watch(); } }, this) }; this._core.options = $.extend({}, AutoRefresh.Defaults, this._core.options); this._core.$element.on(this._handlers); }; AutoRefresh.Defaults = { autoRefresh: true, autoRefreshInterval: 500 }; AutoRefresh.prototype.watch = function () {
        if (this._interval) { return; }
        this._visible = this._core.isVisible(); this._interval = window.setInterval($.proxy(this.refresh, this), this._core.settings.autoRefreshInterval);
    }; AutoRefresh.prototype.refresh = function () {
        if (this._core.isVisible() === this._visible) { return; }
        this._visible = !this._visible; this._core.$element.toggleClass('owl-hidden', !this._visible); this._visible && (this._core.invalidate('width') && this._core.refresh());
    }; AutoRefresh.prototype.destroy = function () {
        var handler, property; window.clearInterval(this._interval); for (handler in this._handlers) { this._core.$element.off(handler, this._handlers[handler]); }
        for (property in Object.getOwnPropertyNames(this)) { typeof this[property] != 'function' && (this[property] = null); }
    }; $.fn.owlCarousel.Constructor.Plugins.AutoRefresh = AutoRefresh;
})(window.Zepto || window.jQuery, window, document);; (function ($, window, document, undefined) {
    var Lazy = function (carousel) {
        this._core = carousel; this._loaded = []; this._handlers = {
            'initialized.owl.carousel change.owl.carousel resized.owl.carousel': $.proxy(function (e) {
                if (!e.namespace) { return; }
                if (!this._core.settings || !this._core.settings.lazyLoad) { return; }
                if ((e.property && e.property.name == 'position') || e.type == 'initialized') {
                    var settings = this._core.settings, n = (settings.center && Math.ceil(settings.items / 2) || settings.items), i = ((settings.center && n * -1) || 0), position = (e.property && e.property.value !== undefined ? e.property.value : this._core.current()) + i, clones = this._core.clones().length, load = $.proxy(function (i, v) { this.load(v) }, this); if (settings.lazyLoadEager > 0) { n += settings.lazyLoadEager; if (settings.loop) { position -= settings.lazyLoadEager; n++; } }
                    while (i++ < n) { this.load(clones / 2 + this._core.relative(position)); clones && $.each(this._core.clones(this._core.relative(position)), load); position++; }
                }
            }, this)
        }; this._core.options = $.extend({}, Lazy.Defaults, this._core.options); this._core.$element.on(this._handlers);
    }; Lazy.Defaults = { lazyLoad: false, lazyLoadEager: 0 }; Lazy.prototype.load = function (position) {
        var $item = this._core.$stage.children().eq(position), $elements = $item && $item.find('.owl-lazy'); if (!$elements || $.inArray($item.get(0), this._loaded) > -1) { return; }
        $elements.each($.proxy(function (index, element) { var $element = $(element), image, url = (window.devicePixelRatio > 1 && $element.attr('data-src-retina')) || $element.attr('data-src') || $element.attr('data-srcset'); this._core.trigger('load', { element: $element, url: url }, 'lazy'); if ($element.is('img')) { $element.one('load.owl.lazy', $.proxy(function () { $element.css('opacity', 1); this._core.trigger('loaded', { element: $element, url: url }, 'lazy'); }, this)).attr('src', url); } else if ($element.is('source')) { $element.one('load.owl.lazy', $.proxy(function () { this._core.trigger('loaded', { element: $element, url: url }, 'lazy'); }, this)).attr('srcset', url); } else { image = new Image(); image.onload = $.proxy(function () { $element.css({ 'background-image': 'url("' + url + '")', 'opacity': '1' }); this._core.trigger('loaded', { element: $element, url: url }, 'lazy'); }, this); image.src = url; } }, this)); this._loaded.push($item.get(0));
    }; Lazy.prototype.destroy = function () {
        var handler, property; for (handler in this.handlers) { this._core.$element.off(handler, this.handlers[handler]); }
        for (property in Object.getOwnPropertyNames(this)) { typeof this[property] != 'function' && (this[property] = null); }
    }; $.fn.owlCarousel.Constructor.Plugins.Lazy = Lazy;
})(window.Zepto || window.jQuery, window, document);; (function ($, window, document, undefined) {
    var AutoHeight = function (carousel) {
        this._core = carousel; this._previousHeight = null; this._handlers = { 'initialized.owl.carousel refreshed.owl.carousel': $.proxy(function (e) { if (e.namespace && this._core.settings.autoHeight) { this.update(); } }, this), 'changed.owl.carousel': $.proxy(function (e) { if (e.namespace && this._core.settings.autoHeight && e.property.name === 'position') { this.update(); } }, this), 'loaded.owl.lazy': $.proxy(function (e) { if (e.namespace && this._core.settings.autoHeight && e.element.closest('.' + this._core.settings.itemClass).index() === this._core.current()) { this.update(); } }, this) }; this._core.options = $.extend({}, AutoHeight.Defaults, this._core.options); this._core.$element.on(this._handlers); this._intervalId = null; var refThis = this; $(window).on('load', function () { if (refThis._core.settings.autoHeight) { refThis.update(); } }); $(window).resize(function () {
            if (refThis._core.settings.autoHeight) {
                if (refThis._intervalId != null) { clearTimeout(refThis._intervalId); }
                refThis._intervalId = setTimeout(function () { refThis.update(); }, 250);
            }
        });
    }; AutoHeight.Defaults = { autoHeight: false, autoHeightClass: 'owl-height' }; AutoHeight.prototype.update = function () {
        var start = this._core._current, end = start + this._core.settings.items, lazyLoadEnabled = this._core.settings.lazyLoad, visible = this._core.$stage.children().toArray().slice(start, end), heights = [], maxheight = 0; $.each(visible, function (index, item) { heights.push($(item).height()); }); maxheight = Math.max.apply(null, heights); if (maxheight <= 1 && lazyLoadEnabled && this._previousHeight) { maxheight = this._previousHeight; }
        this._previousHeight = maxheight; this._core.$stage.parent().height(maxheight).addClass(this._core.settings.autoHeightClass);
    }; AutoHeight.prototype.destroy = function () {
        var handler, property; for (handler in this._handlers) { this._core.$element.off(handler, this._handlers[handler]); }
        for (property in Object.getOwnPropertyNames(this)) { typeof this[property] !== 'function' && (this[property] = null); }
    }; $.fn.owlCarousel.Constructor.Plugins.AutoHeight = AutoHeight;
})(window.Zepto || window.jQuery, window, document);; (function ($, window, document, undefined) {
    var Video = function (carousel) {
        this._core = carousel; this._videos = {}; this._playing = null; this._handlers = {
            'initialized.owl.carousel': $.proxy(function (e) { if (e.namespace) { this._core.register({ type: 'state', name: 'playing', tags: ['interacting'] }); } }, this), 'resize.owl.carousel': $.proxy(function (e) { if (e.namespace && this._core.settings.video && this.isInFullScreen()) { e.preventDefault(); } }, this), 'refreshed.owl.carousel': $.proxy(function (e) { if (e.namespace && this._core.is('resizing')) { this._core.$stage.find('.cloned .owl-video-frame').remove(); } }, this), 'changed.owl.carousel': $.proxy(function (e) { if (e.namespace && e.property.name === 'position' && this._playing) { this.stop(); } }, this), 'prepared.owl.carousel': $.proxy(function (e) {
                if (!e.namespace) { return; }
                var $element = $(e.content).find('.owl-video'); if ($element.length) { $element.css('display', 'none'); this.fetch($element, $(e.content)); }
            }, this)
        }; this._core.options = $.extend({}, Video.Defaults, this._core.options); this._core.$element.on(this._handlers); this._core.$element.on('click.owl.video', '.owl-video-play-icon', $.proxy(function (e) { this.play(e); }, this));
    }; Video.Defaults = { video: false, videoHeight: false, videoWidth: false }; Video.prototype.fetch = function (target, item) {
        var type = (function () { if (target.attr('data-vimeo-id')) { return 'vimeo'; } else if (target.attr('data-vzaar-id')) { return 'vzaar' } else { return 'youtube'; } })(), id = target.attr('data-vimeo-id') || target.attr('data-youtube-id') || target.attr('data-vzaar-id'), width = target.attr('data-width') || this._core.settings.videoWidth, height = target.attr('data-height') || this._core.settings.videoHeight, url = target.attr('href'); if (url) {
            id = url.match(/(http:|https:|)\/\/(player.|www.|app.)?(vimeo\.com|youtu(be\.com|\.be|be\.googleapis\.com|be\-nocookie\.com)|vzaar\.com)\/(video\/|videos\/|embed\/|channels\/.+\/|groups\/.+\/|watch\?v=|v\/)?([A-Za-z0-9._%-]*)(\&\S+)?/); if (id[3].indexOf('youtu') > -1) { type = 'youtube'; } else if (id[3].indexOf('vimeo') > -1) { type = 'vimeo'; } else if (id[3].indexOf('vzaar') > -1) { type = 'vzaar'; } else { throw new Error('Video URL not supported.'); }
            id = id[6];
        } else { throw new Error('Missing video URL.'); }
        this._videos[url] = { type: type, id: id, width: width, height: height }; item.attr('data-video', url); this.thumbnail(target, this._videos[url]);
    }; Video.prototype.thumbnail = function (target, video) {
        var tnLink, icon, path, dimensions = video.width && video.height ? 'width:' + video.width + 'px;height:' + video.height + 'px;' : '', customTn = target.find('img'), srcType = 'src', lazyClass = '', settings = this._core.settings, create = function (path) {
            icon = '<div class="owl-video-play-icon"></div>'; if (settings.lazyLoad) { tnLink = $('<div/>', { "class": 'owl-video-tn ' + lazyClass, "srcType": path }); } else { tnLink = $('<div/>', { "class": "owl-video-tn", "style": 'opacity:1;background-image:url(' + path + ')' }); }
            target.after(tnLink); target.after(icon);
        }; target.wrap($('<div/>', { "class": "owl-video-wrapper", "style": dimensions })); if (this._core.settings.lazyLoad) { srcType = 'data-src'; lazyClass = 'owl-lazy'; }
        if (customTn.length) { create(customTn.attr(srcType)); customTn.remove(); return false; }
        if (video.type === 'youtube') { path = "//img.youtube.com/vi/" + video.id + "/hqdefault.jpg"; create(path); } else if (video.type === 'vimeo') { $.ajax({ type: 'GET', url: '//vimeo.com/api/v2/video/' + video.id + '.json', jsonp: 'callback', dataType: 'jsonp', success: function (data) { path = data[0].thumbnail_large; create(path); } }); } else if (video.type === 'vzaar') { $.ajax({ type: 'GET', url: '//vzaar.com/api/videos/' + video.id + '.json', jsonp: 'callback', dataType: 'jsonp', success: function (data) { path = data.framegrab_url; create(path); } }); }
    }; Video.prototype.stop = function () { this._core.trigger('stop', null, 'video'); this._playing.find('.owl-video-frame').remove(); this._playing.removeClass('owl-video-playing'); this._playing = null; this._core.leave('playing'); this._core.trigger('stopped', null, 'video'); }; Video.prototype.play = function (event) {
        var target = $(event.target), item = target.closest('.' + this._core.settings.itemClass), video = this._videos[item.attr('data-video')], width = video.width || '100%', height = video.height || this._core.$stage.height(), html, iframe; if (this._playing) { return; }
        this._core.enter('playing'); this._core.trigger('play', null, 'video'); item = this._core.items(this._core.relative(item.index())); this._core.reset(item.index()); html = $('<iframe frameborder="0" allowfullscreen mozallowfullscreen webkitAllowFullScreen ></iframe>'); html.attr('height', height); html.attr('width', width); if (video.type === 'youtube') { html.attr('src', '//www.youtube.com/embed/' + video.id + '?autoplay=1&rel=0&v=' + video.id); } else if (video.type === 'vimeo') { html.attr('src', '//player.vimeo.com/video/' + video.id + '?autoplay=1'); } else if (video.type === 'vzaar') { html.attr('src', '//view.vzaar.com/' + video.id + '/player?autoplay=true'); }
        iframe = $(html).wrap('<div class="owl-video-frame" />').insertAfter(item.find('.owl-video')); this._playing = item.addClass('owl-video-playing');
    }; Video.prototype.isInFullScreen = function () { var element = document.fullscreenElement || document.mozFullScreenElement || document.webkitFullscreenElement; return element && $(element).parent().hasClass('owl-video-frame'); }; Video.prototype.destroy = function () {
        var handler, property; this._core.$element.off('click.owl.video'); for (handler in this._handlers) { this._core.$element.off(handler, this._handlers[handler]); }
        for (property in Object.getOwnPropertyNames(this)) { typeof this[property] != 'function' && (this[property] = null); }
    }; $.fn.owlCarousel.Constructor.Plugins.Video = Video;
})(window.Zepto || window.jQuery, window, document);; (function ($, window, document, undefined) {
    var Animate = function (scope) { this.core = scope; this.core.options = $.extend({}, Animate.Defaults, this.core.options); this.swapping = true; this.previous = undefined; this.next = undefined; this.handlers = { 'change.owl.carousel': $.proxy(function (e) { if (e.namespace && e.property.name == 'position') { this.previous = this.core.current(); this.next = e.property.value; } }, this), 'drag.owl.carousel dragged.owl.carousel translated.owl.carousel': $.proxy(function (e) { if (e.namespace) { this.swapping = e.type == 'translated'; } }, this), 'translate.owl.carousel': $.proxy(function (e) { if (e.namespace && this.swapping && (this.core.options.animateOut || this.core.options.animateIn)) { this.swap(); } }, this) }; this.core.$element.on(this.handlers); }; Animate.Defaults = { animateOut: false, animateIn: false }; Animate.prototype.swap = function () {
        if (this.core.settings.items !== 1) { return; }
        if (!$.support.animation || !$.support.transition) { return; }
        this.core.speed(0); var left, clear = $.proxy(this.clear, this), previous = this.core.$stage.children().eq(this.previous), next = this.core.$stage.children().eq(this.next), incoming = this.core.settings.animateIn, outgoing = this.core.settings.animateOut; if (this.core.current() === this.previous) { return; }
        if (outgoing) { left = this.core.coordinates(this.previous) - this.core.coordinates(this.next); previous.one($.support.animation.end, clear).css({ 'left': left + 'px' }).addClass('animated owl-animated-out').addClass(outgoing); }
        if (incoming) { next.one($.support.animation.end, clear).addClass('animated owl-animated-in').addClass(incoming); }
    }; Animate.prototype.clear = function (e) { $(e.target).css({ 'left': '' }).removeClass('animated owl-animated-out owl-animated-in').removeClass(this.core.settings.animateIn).removeClass(this.core.settings.animateOut); this.core.onTransitionEnd(); }; Animate.prototype.destroy = function () {
        var handler, property; for (handler in this.handlers) { this.core.$element.off(handler, this.handlers[handler]); }
        for (property in Object.getOwnPropertyNames(this)) { typeof this[property] != 'function' && (this[property] = null); }
    }; $.fn.owlCarousel.Constructor.Plugins.Animate = Animate;
})(window.Zepto || window.jQuery, window, document);; (function ($, window, document, undefined) {
    var Autoplay = function (carousel) { this._core = carousel; this._call = null; this._time = 0; this._timeout = 0; this._paused = true; this._handlers = { 'changed.owl.carousel': $.proxy(function (e) { if (e.namespace && e.property.name === 'settings') { if (this._core.settings.autoplay) { this.play(); } else { this.stop(); } } else if (e.namespace && e.property.name === 'position' && this._paused) { this._time = 0; } }, this), 'initialized.owl.carousel': $.proxy(function (e) { if (e.namespace && this._core.settings.autoplay) { this.play(); } }, this), 'play.owl.autoplay': $.proxy(function (e, t, s) { if (e.namespace) { this.play(t, s); } }, this), 'stop.owl.autoplay': $.proxy(function (e) { if (e.namespace) { this.stop(); } }, this), 'mouseover.owl.autoplay': $.proxy(function () { if (this._core.settings.autoplayHoverPause && this._core.is('rotating')) { this.pause(); } }, this), 'mouseleave.owl.autoplay': $.proxy(function () { if (this._core.settings.autoplayHoverPause && this._core.is('rotating')) { this.play(); } }, this), 'touchstart.owl.core': $.proxy(function () { if (this._core.settings.autoplayHoverPause && this._core.is('rotating')) { this.pause(); } }, this), 'touchend.owl.core': $.proxy(function () { if (this._core.settings.autoplayHoverPause) { this.play(); } }, this) }; this._core.$element.on(this._handlers); this._core.options = $.extend({}, Autoplay.Defaults, this._core.options); }; Autoplay.Defaults = { autoplay: false, autoplayTimeout: 5000, autoplayHoverPause: false, autoplaySpeed: false }; Autoplay.prototype._next = function (speed) {
        this._call = window.setTimeout($.proxy(this._next, this, speed), this._timeout * (Math.round(this.read() / this._timeout) + 1) - this.read()); if (this._core.is('interacting') || document.hidden) { return; }
        this._core.next(speed || this._core.settings.autoplaySpeed);
    }
    Autoplay.prototype.read = function () { return new Date().getTime() - this._time; }; Autoplay.prototype.play = function (timeout, speed) {
        var elapsed; if (!this._core.is('rotating')) { this._core.enter('rotating'); }
        timeout = timeout || this._core.settings.autoplayTimeout; elapsed = Math.min(this._time % (this._timeout || timeout), timeout); if (this._paused) { this._time = this.read(); this._paused = false; } else { window.clearTimeout(this._call); }
        this._time += this.read() % timeout - elapsed; this._timeout = timeout; this._call = window.setTimeout($.proxy(this._next, this, speed), timeout - elapsed);
    }; Autoplay.prototype.stop = function () { if (this._core.is('rotating')) { this._time = 0; this._paused = true; window.clearTimeout(this._call); this._core.leave('rotating'); } }; Autoplay.prototype.pause = function () { if (this._core.is('rotating') && !this._paused) { this._time = this.read(); this._paused = true; window.clearTimeout(this._call); } }; Autoplay.prototype.destroy = function () {
        var handler, property; this.stop(); for (handler in this._handlers) { this._core.$element.off(handler, this._handlers[handler]); }
        for (property in Object.getOwnPropertyNames(this)) { typeof this[property] != 'function' && (this[property] = null); }
    }; $.fn.owlCarousel.Constructor.Plugins.autoplay = Autoplay;
})(window.Zepto || window.jQuery, window, document);; (function ($, window, document, undefined) {
    'use strict'; var Navigation = function (carousel) {
        this._core = carousel; this._initialized = false; this._pages = []; this._controls = {}; this._templates = []; this.$element = this._core.$element; this._overrides = { next: this._core.next, prev: this._core.prev, to: this._core.to }; this._handlers = {
            'prepared.owl.carousel': $.proxy(function (e) {
                if (e.namespace && this._core.settings.dotsData) {
                    this._templates.push('<div class="' + this._core.settings.dotClass + '">' +
                        $(e.content).find('[data-dot]').addBack('[data-dot]').attr('data-dot') + '</div>');
                }
            }, this), 'added.owl.carousel': $.proxy(function (e) { if (e.namespace && this._core.settings.dotsData) { this._templates.splice(e.position, 0, this._templates.pop()); } }, this), 'remove.owl.carousel': $.proxy(function (e) { if (e.namespace && this._core.settings.dotsData) { this._templates.splice(e.position, 1); } }, this), 'changed.owl.carousel': $.proxy(function (e) { if (e.namespace && e.property.name == 'position') { this.draw(); } }, this), 'initialized.owl.carousel': $.proxy(function (e) { if (e.namespace && !this._initialized) { this._core.trigger('initialize', null, 'navigation'); this.initialize(); this.update(); this.draw(); this._initialized = true; this._core.trigger('initialized', null, 'navigation'); } }, this), 'refreshed.owl.carousel': $.proxy(function (e) { if (e.namespace && this._initialized) { this._core.trigger('refresh', null, 'navigation'); this.update(); this.draw(); this._core.trigger('refreshed', null, 'navigation'); } }, this)
        }; this._core.options = $.extend({}, Navigation.Defaults, this._core.options); this.$element.on(this._handlers);
    }; Navigation.Defaults = { nav: false, navText: ['<span aria-label="' + 'Previous' + '">&#x2039;</span>', '<span aria-label="' + 'Next' + '">&#x203a;</span>'], navSpeed: false, navElement: 'button type="button" role="presentation"', navContainer: false, navContainerClass: 'owl-nav', navClass: ['owl-prev', 'owl-next'], slideBy: 1, dotClass: 'owl-dot', dotsClass: 'owl-dots', dots: true, dotsEach: false, dotsData: false, dotsSpeed: false, dotsContainer: false }; Navigation.prototype.initialize = function () {
        var override, settings = this._core.settings; this._controls.$relative = (settings.navContainer ? $(settings.navContainer) : $('<div>').addClass(settings.navContainerClass).appendTo(this.$element)).addClass('disabled'); this._controls.$previous = $('<' + settings.navElement + '>').addClass(settings.navClass[0]).html(settings.navText[0]).prependTo(this._controls.$relative).on('click', $.proxy(function (e) { this.prev(settings.navSpeed); }, this)); this._controls.$next = $('<' + settings.navElement + '>').addClass(settings.navClass[1]).html(settings.navText[1]).appendTo(this._controls.$relative).on('click', $.proxy(function (e) { this.next(settings.navSpeed); }, this)); if (!settings.dotsData) { this._templates = [$('<button role="button">').addClass(settings.dotClass).append($('<span>')).prop('outerHTML')]; }
        this._controls.$absolute = (settings.dotsContainer ? $(settings.dotsContainer) : $('<div>').addClass(settings.dotsClass).appendTo(this.$element)).addClass('disabled'); this._controls.$absolute.on('click', 'button', $.proxy(function (e) { var index = $(e.target).parent().is(this._controls.$absolute) ? $(e.target).index() : $(e.target).parent().index(); e.preventDefault(); this.to(index, settings.dotsSpeed); }, this)); for (override in this._overrides) { this._core[override] = $.proxy(this[override], this); }
    }; Navigation.prototype.destroy = function () {
        var handler, control, property, override, settings; settings = this._core.settings; for (handler in this._handlers) { this.$element.off(handler, this._handlers[handler]); }
        for (control in this._controls) { if (control === '$relative' && settings.navContainer) { this._controls[control].html(''); } else { this._controls[control].remove(); } }
        for (override in this.overides) { this._core[override] = this._overrides[override]; }
        for (property in Object.getOwnPropertyNames(this)) { typeof this[property] != 'function' && (this[property] = null); }
    }; Navigation.prototype.update = function () {
        var i, j, k, lower = this._core.clones().length / 2, upper = lower + this._core.items().length, maximum = this._core.maximum(true), settings = this._core.settings, size = settings.center || settings.autoWidth || settings.dotsData ? 1 : settings.dotsEach || settings.items; if (settings.slideBy !== 'page') { settings.slideBy = Math.min(settings.slideBy, settings.items); }
        if (settings.dots || settings.slideBy == 'page') {
            this._pages = []; for (i = lower, j = 0, k = 0; i < upper; i++) {
                if (j >= size || j === 0) {
                    this._pages.push({ start: Math.min(maximum, i - lower), end: i - lower + size - 1 }); if (Math.min(maximum, i - lower) === maximum) { break; }
                    j = 0, ++k;
                }
                j += this._core.mergers(this._core.relative(i));
            }
        }
    }; Navigation.prototype.draw = function () {
        var difference, settings = this._core.settings, disabled = this._core.items().length <= settings.items, index = this._core.relative(this._core.current()), loop = settings.loop || settings.rewind; this._controls.$relative.toggleClass('disabled', !settings.nav || disabled); if (settings.nav) { this._controls.$previous.toggleClass('disabled', !loop && index <= this._core.minimum(true)); this._controls.$next.toggleClass('disabled', !loop && index >= this._core.maximum(true)); }
        this._controls.$absolute.toggleClass('disabled', !settings.dots || disabled); if (settings.dots) {
            difference = this._pages.length - this._controls.$absolute.children().length; if (settings.dotsData && difference !== 0) { this._controls.$absolute.html(this._templates.join('')); } else if (difference > 0) { this._controls.$absolute.append(new Array(difference + 1).join(this._templates[0])); } else if (difference < 0) { this._controls.$absolute.children().slice(difference).remove(); }
            this._controls.$absolute.find('.active').removeClass('active'); this._controls.$absolute.children().eq($.inArray(this.current(), this._pages)).addClass('active');
        }
    }; Navigation.prototype.onTrigger = function (event) { var settings = this._core.settings; event.page = { index: $.inArray(this.current(), this._pages), count: this._pages.length, size: settings && (settings.center || settings.autoWidth || settings.dotsData ? 1 : settings.dotsEach || settings.items) }; }; Navigation.prototype.current = function () { var current = this._core.relative(this._core.current()); return $.grep(this._pages, $.proxy(function (page, index) { return page.start <= current && page.end >= current; }, this)).pop(); }; Navigation.prototype.getPosition = function (successor) {
        var position, length, settings = this._core.settings; if (settings.slideBy == 'page') { position = $.inArray(this.current(), this._pages); length = this._pages.length; successor ? ++position : --position; position = this._pages[((position % length) + length) % length].start; } else { position = this._core.relative(this._core.current()); length = this._core.items().length; successor ? position += settings.slideBy : position -= settings.slideBy; }
        return position;
    }; Navigation.prototype.next = function (speed) { $.proxy(this._overrides.to, this._core)(this.getPosition(true), speed); }; Navigation.prototype.prev = function (speed) { $.proxy(this._overrides.to, this._core)(this.getPosition(false), speed); }; Navigation.prototype.to = function (position, speed, standard) { var length; if (!standard && this._pages.length) { length = this._pages.length; $.proxy(this._overrides.to, this._core)(this._pages[((position % length) + length) % length].start, speed); } else { $.proxy(this._overrides.to, this._core)(position, speed); } }; $.fn.owlCarousel.Constructor.Plugins.Navigation = Navigation;
})(window.Zepto || window.jQuery, window, document);; (function ($, window, document, undefined) {
    'use strict'; var Hash = function (carousel) {
        this._core = carousel; this._hashes = {}; this.$element = this._core.$element; this._handlers = {
            'initialized.owl.carousel': $.proxy(function (e) { if (e.namespace && this._core.settings.startPosition === 'URLHash') { $(window).trigger('hashchange.owl.navigation'); } }, this), 'prepared.owl.carousel': $.proxy(function (e) {
                if (e.namespace) {
                    var hash = $(e.content).find('[data-hash]').addBack('[data-hash]').attr('data-hash'); if (!hash) { return; }
                    this._hashes[hash] = e.content;
                }
            }, this), 'changed.owl.carousel': $.proxy(function (e) {
                if (e.namespace && e.property.name === 'position') {
                    var current = this._core.items(this._core.relative(this._core.current())), hash = $.map(this._hashes, function (item, hash) { return item === current ? hash : null; }).join(); if (!hash || window.location.hash.slice(1) === hash) { return; }
                    window.location.hash = hash;
                }
            }, this)
        }; this._core.options = $.extend({}, Hash.Defaults, this._core.options); this.$element.on(this._handlers); $(window).on('hashchange.owl.navigation', $.proxy(function (e) {
            var hash = window.location.hash.substring(1), items = this._core.$stage.children(), position = this._hashes[hash] && items.index(this._hashes[hash]); if (position === undefined || position === this._core.current()) { return; }
            this._core.to(this._core.relative(position), false, true);
        }, this));
    }; Hash.Defaults = { URLhashListener: false }; Hash.prototype.destroy = function () {
        var handler, property; $(window).off('hashchange.owl.navigation'); for (handler in this._handlers) { this._core.$element.off(handler, this._handlers[handler]); }
        for (property in Object.getOwnPropertyNames(this)) { typeof this[property] != 'function' && (this[property] = null); }
    }; $.fn.owlCarousel.Constructor.Plugins.Hash = Hash;
})(window.Zepto || window.jQuery, window, document);; (function ($, window, document, undefined) {
    var style = $('<support>').get(0).style, prefixes = 'Webkit Moz O ms'.split(' '), events = { transition: { end: { WebkitTransition: 'webkitTransitionEnd', MozTransition: 'transitionend', OTransition: 'oTransitionEnd', transition: 'transitionend' } }, animation: { end: { WebkitAnimation: 'webkitAnimationEnd', MozAnimation: 'animationend', OAnimation: 'oAnimationEnd', animation: 'animationend' } } }, tests = { csstransforms: function () { return !!test('transform'); }, csstransforms3d: function () { return !!test('perspective'); }, csstransitions: function () { return !!test('transition'); }, cssanimations: function () { return !!test('animation'); } }; function test(property, prefixed) { var result = false, upper = property.charAt(0).toUpperCase() + property.slice(1); $.each((property + ' ' + prefixes.join(upper + ' ') + upper).split(' '), function (i, property) { if (style[property] !== undefined) { result = prefixed ? property : true; return false; } }); return result; }
    function prefixed(property) { return test(property, true); }
    if (tests.csstransitions()) {
        $.support.transition = new String(prefixed('transition'))
        $.support.transition.end = events.transition.end[$.support.transition];
    }
    if (tests.cssanimations()) {
        $.support.animation = new String(prefixed('animation'))
        $.support.animation.end = events.animation.end[$.support.animation];
    }
    if (tests.csstransforms()) { $.support.transform = new String(prefixed('transform')); $.support.transform3d = tests.csstransforms3d(); }
})(window.Zepto || window.jQuery, window, document);;

/* /atharva_theme_base/static/src/js/quick_view.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('atharva_theme_base.product_quick_veiw', function (require) {
    "use strict"; require("web.dom_ready"); var publicWidget = require("web.public.widget"); var core = require("web.core"); var ajax = require("web.ajax"); var rpc = require("web.rpc"); var _t = core._t; publicWidget.registry.quick_view = publicWidget.Widget.extend({
        "selector": "#wrapwrap", events: { "click a.o_quick_view": "_quickViewLoad" }, _quickViewLoad: function (evt) {
            var pid = $(evt.currentTarget).attr("data-product_template_id"); ajax.jsonRpc("/get_prod_quick_view_details", "call", { "prod_id": pid }).then(function (data) { var sale = new publicWidget.registry.WebsiteSale(); $(".quick_cover").append(data); $(".quick-cover-overlay").fadeIn(); sale.init(); $(".quick_cover").css("display", "block"); $("[data-attribute_exclusions]").on("change", function (event) { sale.onChangeVariant(event); }); $("[data-attribute_exclusions]").trigger("change"); $(".css_attribute_color input").click(function (event) { sale._changeColorAttribute(event); }); $(".a-submit").on("click", function (event) { sale._onClickAdd(event); }); $("a.js_add_cart_json").on("click", function (event) { sale._onClickAddCartJSON(event); }); $("input[name='add_qty']").on("change", function (event) { sale._onChangeAddQuantity(event); }); $(".qv_close").click(function () { $(".quick_cover").empty(data); $(".zoomContainer").remove(); }); });
        }
    });
});;

/* /atharva_theme_base/static/src/js/quick_cart.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('quick_cart.quick_cart', function (require) {
    'use strict'; var publicWidget = require('web.public.widget'); var wSaleUtils = require('website_sale.utils'); var random_index = 0; var random_class_list = ['warning', 'primary', 'secondary']; publicWidget.registry.quickCart = publicWidget.Widget.extend({
        'selector': '.oe_website_sale', events: { 'click a.js_cart': '_onAddToCart' }, _onAddToCart: function (event) {
            var $card = $(event.currentTarget).closest('.o_wsale_product_btn'); this._rpc({ route: '/shop/cart/update_json', params: { product_id: $card.find('input[data-product-id]').data('product-id'), add_qty: 1 }, }).then(function (data) {
                wSaleUtils.updateCartNavBar(data); if (!("cart_quantity" in data)) { $(".my_cart_quantity").css("display", "none") }
                var $navButton = $('header .o_wsale_my_cart').first(); if (!$(event.currentTarget).hasClass('as-color')) { $(event.currentTarget).addClass('as-color'); }
                if (data['warning']) {
                    if ($('#wrapwrap > #cart_warning_content').length === 0)
                        $('#wrapwrap').append("<div id='cart_warning_content'></div>"); $("#wrapwrap > #cart_warning_content").append("<div class='add_cart_warning alert alert-" + random_class_list[random_index % 3] + " alert-dismissible fade show'  role='alert'><p class='warning-msg'>" + data['warning'] + "</p><button class='close-btn' type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button></div>"); random_index++;
                } else { wSaleUtils.animateClone($navButton, $(event.currentTarget).parents('.oe_product'), 25, 40); }
            });
        }
    });
});;

/* /atharva_theme_base/static/src/js/quick_load_product.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define("atharva_theme_base.quick_load_product", function (require) {
    "use strict"; var publicWidget = require("web.public.widget"); var url = window.location.href; publicWidget.registry.ajaxProductLoad = publicWidget.Widget.extend({
        "selector": ".js_load_product", events: { "click": "_loadProduct" }, _loadProduct: function () {
            var checkaction = this.$el.attr("id"); var page = this.$el.attr("page"); if (checkaction == "nxt") { this._rpc({ route: "/json/shop/product/", params: { "page": this.$el.attr("page"), "category_id": this.$el.attr("category"), "ppg": this.$el.attr("ppg"), "attrval": this.$el.attr("attrval"), "attrib": this.$el.attr("attrib"), "brand": this.$el.attr("brand"), "min_val": this.$el.attr("min_val"), "max_val": this.$el.attr("max_val"), "brand_ids": this.$el.attr("brand_ids"), "order": this.$el.attr("product_order"), "search": this.$el.attr("search"), "rating": this.$el.attr("rating"), "tag_val": this.$el.attr("tag_val"), } }).then(function (result) { $(".load_next_product").before(result["product"]); $(".pagination").replaceWith(result["pager_template"]); }); var maxpage = this.$el.attr("max_page"); var page = Number(page) + 1; this.$el.attr("page", page); if (page == maxpage) { this.$el.remove(); } }
            else { this._rpc({ route: "/json/shop/product/", params: { "page": this.$el.attr("page"), "category_id": this.$el.attr("category"), "ppg": this.$el.attr("ppg"), "attrval": this.$el.attr("attrval"), "attrib": this.$el.attr("attrib"), "brand": this.$el.attr("brand"), "min_val": this.$el.attr("min_val"), "max_val": this.$el.attr("max_val"), "brand_ids": this.$el.attr("brand_ids"), "order": this.$el.attr("product_order"), "search": this.$el.attr("search"), "rating": this.$el.attr("rating"), "tag_val": this.$el.attr("tag_val"), "previous": true, } }).then(function (result) { $(".load_pre_product").after(result["product"]); $(".pagination").replaceWith(result["pager_template"]); }); var page = Number(page) - 1; this.$el.attr("page", page); if (page == 1) { this.$el.remove(); } }
            var checkurl = url.split("/"); var checkattrurl = url.split("="); var url_have_page = false; if (checkattrurl.length > 1) {
                var spliturl = url.split("?"); var checksuburl = spliturl[0].split("/"); for (let index = 0; index < checksuburl.length; index++) { if (checksuburl[index] == "page") { url_have_page = true; } }
                if (url_have_page != true) { var new_url = checksuburl.join("/") + "/page/" + page + "?" + spliturl[1]; } else { checksuburl.pop(); checksuburl.push(page); var new_url = checksuburl.join("/") + "?" + spliturl[1]; }
            } else {
                for (let index = 0; index < checkurl.length; index++) { if (checkurl[index] == "page") { url_have_page = true; } }
                if (url_have_page != true) { var new_url = url + "/page/" + page; } else { checkurl.pop(); checkurl.push(page); var new_url = checkurl.join("/"); }
            }
            $(".page-item").each(function () {
                var getclassid = $(this).attr("id"); if (getclassid != undefined) {
                    var getpagenum = getclassid.slice(4); var activediv = $(this).hasClass("active"); if (activediv == true) { $(this).removeClass("active"); }
                    if (getpagenum == page) { $(this).addClass("active"); }
                }
            }); window.history.pushState("data", "Title", new_url);
        },
    });
});;

/* /atharva_theme_base/static/src/js/header_menu_extend.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('atharva_theme_base.header_menu_extend', function (require) {
    "use strict"; var publicWidget = require('web.public.widget'); var wUtils = require('website.utils'); var dom = require('web.dom'); var menu = require("website.content.menu")
    publicWidget.registry.autohideMenu.include({
        async start() {
            this.$topMenu = this.$('#top_menu'); if (this.$topMenu.length && this.$topMenu.find(".mm-mega-menu").length) {
                this.noAutohide = this.$el.is('.o_no_autohide_menu'); if (!this.noAutohide) { await wUtils.onceAllImagesLoaded(this.$('.navbar'), this.$('.o_mega_menu, .o_offcanvas_logo_container, .dropdown-menu .o_lang_flag, .mm-mega-menu')); var $window = $(window); $window.on('load.autohideMenu', function () { $window.trigger('resize'); }); dom.initAutoMoreMenu(this.$topMenu, { unfoldable: '.divider, .divider ~ li' }); }
                this.$topMenu.removeClass('o_menu_loading'); this.$topMenu.trigger('menu_loaded'); return Promise.resolve();
            }
            else { await this._super(...arguments); }
        },
    });
});;

/* /atharva_theme_base/static/lib/js/custom_slider.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('atharva_theme_base.custom_slider', function (require) {
    'use strict'; $(document).ready(function () { $('#as_accessory_product').owlCarousel({ items: 3, margin: 10, dots: false, nav: true, navText: ['<span aria-label="Previous"></span>', '<span aria-label="Next"></span>'], responsive: { 0: { items: 2, }, 768: { items: 3, } } }); $('#as_alternative').owlCarousel({ items: 3, margin: 10, dots: false, nav: true, navText: ['<span aria-label="Previous"></span>', '<span aria-label="Next"></span>'], responsive: { 0: { items: 2, }, 768: { items: 3, } } }); }); $(document).on('mouseenter', 'header li.mm-mega-menu', function () { if ($(this).find(".mm-maga-main.mm-mega-cat-level").length > 0) { var $first_tab = $(this).find(".mm-category-level .mm-cat-level-1:eq(0)"); $first_tab.find(".cat-level-title").addClass("active-li"); $first_tab.find(".mm-cat-level-2").addClass("menu-active"); } }); $(document).on('mouseenter', '.mm-cat-level-1', function () { var $first_div = $(this).find('.cat-level-title'); $first_div.addClass("active-li"); $(this).find('.mm-cat-level-2').addClass("menu-active"); }); $(document).on('mouseleave', '.mm-cat-level-1', function () {
        var $first_div = $(this).find('.cat-level-title')
        $first_div.removeClass("active-li"); $(this).find('.mm-cat-level-2').removeClass("menu-active");
    });
});;

/* /atharva_theme_base/static/src/js/search_bar_extend.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define("atharva_theme_base.searching_extends", function (require) {
    "use strict"; var publicWidget = require('web.public.widget'); var search = require("website_sale.s_products_searchbar")
    publicWidget.registry.productsSearchBar.include({ events: { "input .search-query": "_onInput", "focusout": "_onFocusOut", "keydown .search-query": "_onKeydown", "change #selectedCat": "_onInput" }, _fetch: function () { return this._rpc({ route: "/shop/products/autocomplete", params: { "term": this.$input.val(), "options": { "order": this.order, "limit": this.limit, "display_description": this.displayDescription, "display_price": this.displayPrice, "max_nb_chars": Math.round(Math.max(this.autocompleteMinWidth, parseInt(this.$el.width())) * 0.22), "category": $("#selectedCat").val(), }, }, }); }, }); publicWidget.registry.selectedCat = publicWidget.Widget.extend({ "selector": ".selected-cat", events: { "click": "_changeCategory" }, _changeCategory: function (ev) { var getcatid = $(ev.currentTarget).attr("data-id"); var getcatname = $(ev.currentTarget).text().trim(); $("#selectedCat").val(getcatid); $("#dropdownCatMenuButton").text(getcatname); $(".selected-cat").removeClass("text-primary"); $(ev.currentTarget).addClass("text-primary"); } });
});;

/* /atharva_theme_base/static/src/js/product_specifications.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('atharva_theme_base.product_specifications', function (require) {
    'use strict'; var publicWidget = require('web.public.widget'); var ajax = require('web.ajax'); publicWidget.registry.WebsiteSale.include({
        _setUrlHash: function ($parent) {
            this._super.apply(this, arguments); var self = this; var qty = $parent.find('input[name="add_qty"]').val(); var combination = this.getSelectedVariantValues($parent); var parentCombination = $parent.find('ul[data-attribute_exclusions]').data('attribute_exclusions').parent_combination; var productTemplateId = parseInt($parent.find('.product_template_id').val()); var product_specifications_table = $('.product_specifications_table'); self._checkExclusions($parent, combination); return ajax.jsonRpc(this._getUri('/sale/get_combination_info'), 'call', { 'product_template_id': productTemplateId, 'product_id': this._getProductId($parent), 'combination': combination, 'add_qty': parseInt(qty), 'pricelist_id': this.pricelistId || false, 'parent_combination': parentCombination, 'specification_info': true, }).then(function (specifications) {
                product_specifications_table.find('#product_weight').empty(); product_specifications_table.find('#product_volume').empty(); if (specifications) {
                    if (specifications.weight) {
                        var content = "<td>Weight</td>"
                        content += "<td>" + specifications.weight + "</td>"
                        product_specifications_table.find('#product_weight').append(content)
                    }
                    if (specifications.volume) {
                        var content = "<td>Volume</td>"
                        content += "<td>" + specifications.volume + "</td>"
                        product_specifications_table.find('#product_volume').append(content)
                    }
                }
            });
        },
    });
});;

/* /atharva_theme_base/static/lib/js/jquery.elevateZoom-3.0.8.min.js defined in bundle 'web.assets_frontend_lazy' */
"function" !== typeof Object.create && (Object.create = function (d) { function h() { } h.prototype = d; return new h }); (function (d, h, l, m) {
    var k = {
        init: function (b, a) { var c = this; c.elem = a; c.$elem = d(a); c.imageSrc = c.$elem.data("zoom-image") ? c.$elem.data("zoom-image") : c.$elem.attr("src"); c.options = d.extend({}, d.fn.elevateZoom.options, b); c.options.tint && (c.options.lensColour = "none", c.options.lensOpacity = "1"); "inner" == c.options.zoomType && (c.options.showLens = !1); c.$elem.parent().removeAttr("title").removeAttr("alt"); c.zoomImage = c.imageSrc; c.refresh(1); d("#" + c.options.gallery + " a").click(function (a) { c.options.galleryActiveClass && (d("#" + c.options.gallery + " a").removeClass(c.options.galleryActiveClass), d(this).addClass(c.options.galleryActiveClass)); a.preventDefault(); d(this).data("zoom-image") ? c.zoomImagePre = d(this).data("zoom-image") : c.zoomImagePre = d(this).data("image"); c.swaptheimage(d(this).data("image"), c.zoomImagePre); return !1 }) }, refresh: function (b) { var a = this; setTimeout(function () { a.fetch(a.imageSrc) }, b || a.options.refresh) }, fetch: function (b) { var a = this, c = new Image; c.onload = function () { a.largeWidth = c.width; a.largeHeight = c.height; a.startZoom(); a.currentImage = a.imageSrc; a.options.onZoomedImageLoaded(a.$elem) }; c.src = b }, startZoom: function () {
            var b = this; b.nzWidth = b.$elem.width(); b.nzHeight = b.$elem.height(); b.isWindowActive = !1; b.isLensActive = !1; b.isTintActive = !1; b.overWindow = !1; b.options.imageCrossfade && (b.zoomWrap = b.$elem.wrap('<div style="height:' + b.nzHeight + "px;width:" + b.nzWidth + 'px;" class="zoomWrapper" />'), b.$elem.css("position", "absolute")); b.zoomLock = 1; b.scrollingLock = !1; b.changeBgSize = !1; b.currentZoomLevel = b.options.zoomLevel; b.nzOffset = b.$elem.offset(); b.widthRatio = b.largeWidth / b.currentZoomLevel / b.nzWidth; b.heightRatio = b.largeHeight / b.currentZoomLevel / b.nzHeight; "window" == b.options.zoomType && (b.zoomWindowStyle = "overflow: hidden;background-position: 0px 0px;text-align:center;background-color: " + String(b.options.zoomWindowBgColour) + ";width: " + String(b.options.zoomWindowWidth) + "px;height: " + String(b.options.zoomWindowHeight) + "px;float: left;background-size: " + b.largeWidth / b.currentZoomLevel + "px " + b.largeHeight / b.currentZoomLevel + "px;display: none;z-index:100;border: " + String(b.options.borderSize) + "px solid " + b.options.borderColour + ";background-repeat: no-repeat;position: absolute;"); if ("inner" == b.options.zoomType) { var a = b.$elem.css("border-left-width"); b.zoomWindowStyle = "overflow: hidden;margin-left: " + String(a) + ";margin-top: " + String(a) + ";background-position: 0px 0px;width: " + String(b.nzWidth) + "px;height: " + String(b.nzHeight) + "px;float: left;display: none;cursor:" + b.options.cursor + ";px solid " + b.options.borderColour + ";background-repeat: no-repeat;position: absolute;" } "window" == b.options.zoomType && (lensHeight = b.nzHeight < b.options.zoomWindowWidth / b.widthRatio ? b.nzHeight : String(b.options.zoomWindowHeight / b.heightRatio), lensWidth = b.largeWidth < b.options.zoomWindowWidth ? b.nzWidth : b.options.zoomWindowWidth / b.widthRatio, b.lensStyle = "background-position: 0px 0px;width: " + String(b.options.zoomWindowWidth / b.widthRatio) + "px;height: " + String(b.options.zoomWindowHeight / b.heightRatio) + "px;float: right;display: none;overflow: hidden;z-index: 999;-webkit-transform: translateZ(0);opacity:" +
                b.options.lensOpacity + ";filter: alpha(opacity = " + 100 * b.options.lensOpacity + "); zoom:1;width:" + lensWidth + "px;height:" + lensHeight + "px;background-color:" + b.options.lensColour + ";cursor:" + b.options.cursor + ";border: " + b.options.lensBorderSize + "px solid " + b.options.lensBorderColour + ";background-repeat: no-repeat;position: absolute;"); b.tintStyle = "display: block;position: absolute;background-color: " + b.options.tintColour + ";filter:alpha(opacity=0);opacity: 0;width: " + b.nzWidth + "px;height: " + b.nzHeight + "px;"; b.lensRound = ""; "lens" == b.options.zoomType && (b.lensStyle = "background-position: 0px 0px;float: left;display: none;border: " + String(b.options.borderSize) + "px solid " + b.options.borderColour + ";width:" + String(b.options.lensSize) + "px;height:" + String(b.options.lensSize) + "px;background-repeat: no-repeat;position: absolute;"); "round" == b.options.lensShape && (b.lensRound = "border-top-left-radius: " + String(b.options.lensSize / 2 + b.options.borderSize) + "px;border-top-right-radius: " + String(b.options.lensSize / 2 + b.options.borderSize) + "px;border-bottom-left-radius: " + String(b.options.lensSize / 2 + b.options.borderSize) + "px;border-bottom-right-radius: " + String(b.options.lensSize / 2 + b.options.borderSize) + "px;"); b.zoomContainer = d('<div class="zoomContainer" style="-webkit-transform: translateZ(0);position:absolute;left:' + b.nzOffset.left + "px;top:" + b.nzOffset.top + "px;height:" + b.nzHeight + "px;width:" + b.nzWidth + 'px;"></div>'); d("body").append(b.zoomContainer); b.options.containLensZoom && "lens" == b.options.zoomType && b.zoomContainer.css("overflow", "hidden"); "inner" != b.options.zoomType && (b.zoomLens = d("<div class='zoomLens' style='" + b.lensStyle + b.lensRound + "'>&nbsp;</div>").appendTo(b.zoomContainer).click(function () { b.$elem.trigger("click") }), b.options.tint && (b.tintContainer = d("<div/>").addClass("tintContainer"), b.zoomTint = d("<div class='zoomTint' style='" + b.tintStyle + "'></div>"), b.zoomLens.wrap(b.tintContainer), b.zoomTintcss = b.zoomLens.after(b.zoomTint), b.zoomTintImage = d('<img style="position: absolute; left: 0px; top: 0px; max-width: none; width: ' +
                    b.nzWidth + "px; height: " + b.nzHeight + 'px;" src="' + b.imageSrc + '">').appendTo(b.zoomLens).click(function () { b.$elem.trigger("click") }))); isNaN(b.options.zoomWindowPosition) ? b.zoomWindow = d("<div style='z-index:999;left:" + b.windowOffsetLeft + "px;top:" + b.windowOffsetTop + "px;" + b.zoomWindowStyle + "' class='zoomWindow'>&nbsp;</div>").appendTo("body").click(function () { b.$elem.trigger("click") }) : b.zoomWindow = d("<div style='z-index:999;left:" + b.windowOffsetLeft + "px;top:" + b.windowOffsetTop + "px;" + b.zoomWindowStyle + "' class='zoomWindow'>&nbsp;</div>").appendTo(b.zoomContainer).click(function () { b.$elem.trigger("click") }); b.zoomWindowContainer = d("<div/>").addClass("zoomWindowContainer").css("width", b.options.zoomWindowWidth); b.zoomWindow.wrap(b.zoomWindowContainer); "lens" == b.options.zoomType && b.zoomLens.css({ backgroundImage: "url('" + b.imageSrc + "')" }); "window" == b.options.zoomType && b.zoomWindow.css({ backgroundImage: "url('" + b.imageSrc + "')" }); "inner" == b.options.zoomType && b.zoomWindow.css({ backgroundImage: "url('" + b.imageSrc + "')" }); b.$elem.bind("touchmove", function (a) { a.preventDefault(); b.setPosition(a.originalEvent.touches[0] || a.originalEvent.changedTouches[0]) }); b.zoomContainer.bind("touchmove", function (a) { "inner" == b.options.zoomType && b.showHideWindow("show"); a.preventDefault(); b.setPosition(a.originalEvent.touches[0] || a.originalEvent.changedTouches[0]) }); b.zoomContainer.bind("touchend", function (a) { b.showHideWindow("hide"); b.options.showLens && b.showHideLens("hide"); b.options.tint && "inner" != b.options.zoomType && b.showHideTint("hide") }); b.$elem.bind("touchend", function (a) { b.showHideWindow("hide"); b.options.showLens && b.showHideLens("hide"); b.options.tint && "inner" != b.options.zoomType && b.showHideTint("hide") }); b.options.showLens && (b.zoomLens.bind("touchmove", function (a) { a.preventDefault(); b.setPosition(a.originalEvent.touches[0] || a.originalEvent.changedTouches[0]) }), b.zoomLens.bind("touchend", function (a) { b.showHideWindow("hide"); b.options.showLens && b.showHideLens("hide"); b.options.tint && "inner" != b.options.zoomType && b.showHideTint("hide") })); b.$elem.bind("mousemove", function (a) { !1 == b.overWindow && b.setElements("show"); if (b.lastX !== a.clientX || b.lastY !== a.clientY) b.setPosition(a), b.currentLoc = a; b.lastX = a.clientX; b.lastY = a.clientY }); b.zoomContainer.bind("mousemove", function (a) { !1 == b.overWindow && b.setElements("show"); if (b.lastX !== a.clientX || b.lastY !== a.clientY) b.setPosition(a), b.currentLoc = a; b.lastX = a.clientX; b.lastY = a.clientY }); "inner" != b.options.zoomType && b.zoomLens.bind("mousemove", function (a) { if (b.lastX !== a.clientX || b.lastY !== a.clientY) b.setPosition(a), b.currentLoc = a; b.lastX = a.clientX; b.lastY = a.clientY }); b.options.tint && "inner" != b.options.zoomType && b.zoomTint.bind("mousemove", function (a) { if (b.lastX !== a.clientX || b.lastY !== a.clientY) b.setPosition(a), b.currentLoc = a; b.lastX = a.clientX; b.lastY = a.clientY }); "inner" == b.options.zoomType && b.zoomWindow.bind("mousemove", function (a) { if (b.lastX !== a.clientX || b.lastY !== a.clientY) b.setPosition(a), b.currentLoc = a; b.lastX = a.clientX; b.lastY = a.clientY }); b.zoomContainer.add(b.$elem).mouseenter(function () { !1 == b.overWindow && b.setElements("show") }).mouseleave(function () { b.scrollLock || b.setElements("hide") }); "inner" != b.options.zoomType && b.zoomWindow.mouseenter(function () { b.overWindow = !0; b.setElements("hide") }).mouseleave(function () { b.overWindow = !1 }); b.minZoomLevel = b.options.minZoomLevel ? b.options.minZoomLevel : 2 * b.options.scrollZoomIncrement; b.options.scrollZoom && b.zoomContainer.add(b.$elem).bind("mousewheel DOMMouseScroll MozMousePixelScroll", function (a) { b.scrollLock = !0; clearTimeout(d.data(this, "timer")); d.data(this, "timer", setTimeout(function () { b.scrollLock = !1 }, 250)); var e = a.originalEvent.wheelDelta || -1 * a.originalEvent.detail; a.stopImmediatePropagation(); a.stopPropagation(); a.preventDefault(); 0 < e / 120 ? b.currentZoomLevel >= b.minZoomLevel && b.changeZoomLevel(b.currentZoomLevel - b.options.scrollZoomIncrement) : b.options.maxZoomLevel ? b.currentZoomLevel <= b.options.maxZoomLevel && b.changeZoomLevel(parseFloat(b.currentZoomLevel) + b.options.scrollZoomIncrement) : b.changeZoomLevel(parseFloat(b.currentZoomLevel) + b.options.scrollZoomIncrement); return !1 })
        }, setElements: function (b) { if (!this.options.zoomEnabled) return !1; "show" == b && this.isWindowSet && ("inner" == this.options.zoomType && this.showHideWindow("show"), "window" == this.options.zoomType && this.showHideWindow("show"), this.options.showLens && this.showHideLens("show"), this.options.tint && "inner" != this.options.zoomType && this.showHideTint("show")); "hide" == b && ("window" == this.options.zoomType && this.showHideWindow("hide"), this.options.tint || this.showHideWindow("hide"), this.options.showLens && this.showHideLens("hide"), this.options.tint && this.showHideTint("hide")) }, setPosition: function (b) {
            if (!this.options.zoomEnabled) return !1; this.nzHeight = this.$elem.height(); this.nzWidth = this.$elem.width(); this.nzOffset = this.$elem.offset(); this.options.tint && "inner" != this.options.zoomType && (this.zoomTint.css({ top: 0 }), this.zoomTint.css({ left: 0 })); this.options.responsive && !this.options.scrollZoom && this.options.showLens && (lensHeight = this.nzHeight < this.options.zoomWindowWidth / this.widthRatio ? this.nzHeight : String(this.options.zoomWindowHeight / this.heightRatio), lensWidth = this.largeWidth < this.options.zoomWindowWidth ? this.nzWidth : this.options.zoomWindowWidth / this.widthRatio, this.widthRatio = this.largeWidth / this.nzWidth, this.heightRatio = this.largeHeight / this.nzHeight, "lens" != this.options.zoomType && (lensHeight = this.nzHeight < this.options.zoomWindowWidth / this.widthRatio ? this.nzHeight : String(this.options.zoomWindowHeight / this.heightRatio), lensWidth = this.options.zoomWindowWidth < this.options.zoomWindowWidth ? this.nzWidth : this.options.zoomWindowWidth / this.widthRatio, this.zoomLens.css("width", lensWidth), this.zoomLens.css("height", lensHeight), this.options.tint && (this.zoomTintImage.css("width", this.nzWidth), this.zoomTintImage.css("height", this.nzHeight))), "lens" == this.options.zoomType && this.zoomLens.css({ width: String(this.options.lensSize) + "px", height: String(this.options.lensSize) + "px" })); this.zoomContainer.css({ top: this.nzOffset.top }); this.zoomContainer.css({ left: this.nzOffset.left }); this.mouseLeft = parseInt(b.pageX - this.nzOffset.left); this.mouseTop = parseInt(b.pageY - this.nzOffset.top); "window" == this.options.zoomType && (this.Etoppos = this.mouseTop < this.zoomLens.height() / 2, this.Eboppos = this.mouseTop > this.nzHeight - this.zoomLens.height() / 2 - 2 * this.options.lensBorderSize, this.Eloppos = this.mouseLeft < 0 + this.zoomLens.width() / 2, this.Eroppos = this.mouseLeft > this.nzWidth - this.zoomLens.width() / 2 - 2 * this.options.lensBorderSize); "inner" == this.options.zoomType && (this.Etoppos = this.mouseTop < this.nzHeight / 2 / this.heightRatio, this.Eboppos = this.mouseTop > this.nzHeight -
                this.nzHeight / 2 / this.heightRatio, this.Eloppos = this.mouseLeft < 0 + this.nzWidth / 2 / this.widthRatio, this.Eroppos = this.mouseLeft > this.nzWidth - this.nzWidth / 2 / this.widthRatio - 2 * this.options.lensBorderSize); 0 >= this.mouseLeft || 0 > this.mouseTop || this.mouseLeft > this.nzWidth || this.mouseTop > this.nzHeight ? this.setElements("hide") : (this.options.showLens && (this.lensLeftPos = String(this.mouseLeft - this.zoomLens.width() / 2), this.lensTopPos = String(this.mouseTop - this.zoomLens.height() / 2)), this.Etoppos && (this.lensTopPos = 0), this.Eloppos && (this.tintpos = this.lensLeftPos = this.windowLeftPos = 0), "window" == this.options.zoomType && (this.Eboppos && (this.lensTopPos = Math.max(this.nzHeight - this.zoomLens.height() - 2 * this.options.lensBorderSize, 0)), this.Eroppos && (this.lensLeftPos = this.nzWidth - this.zoomLens.width() - 2 * this.options.lensBorderSize)), "inner" == this.options.zoomType && (this.Eboppos && (this.lensTopPos = Math.max(this.nzHeight - 2 * this.options.lensBorderSize, 0)), this.Eroppos && (this.lensLeftPos = this.nzWidth - this.nzWidth - 2 * this.options.lensBorderSize)), "lens" == this.options.zoomType && (this.windowLeftPos = String(-1 * ((b.pageX - this.nzOffset.left) * this.widthRatio - this.zoomLens.width() / 2)), this.windowTopPos = String(-1 * ((b.pageY - this.nzOffset.top) * this.heightRatio - this.zoomLens.height() / 2)), this.zoomLens.css({ backgroundPosition: this.windowLeftPos + "px " + this.windowTopPos + "px" }), this.changeBgSize && (this.nzHeight > this.nzWidth ? ("lens" == this.options.zoomType && this.zoomLens.css({ "background-size": this.largeWidth / this.newvalueheight + "px " + this.largeHeight / this.newvalueheight + "px" }), this.zoomWindow.css({ "background-size": this.largeWidth / this.newvalueheight + "px " + this.largeHeight / this.newvalueheight + "px" })) : ("lens" == this.options.zoomType && this.zoomLens.css({ "background-size": this.largeWidth / this.newvaluewidth + "px " + this.largeHeight / this.newvaluewidth + "px" }), this.zoomWindow.css({ "background-size": this.largeWidth / this.newvaluewidth + "px " + this.largeHeight / this.newvaluewidth + "px" })), this.changeBgSize = !1), this.setWindowPostition(b)), this.options.tint && "inner" != this.options.zoomType && this.setTintPosition(b), "window" == this.options.zoomType && this.setWindowPostition(b), "inner" == this.options.zoomType && this.setWindowPostition(b), this.options.showLens && (this.fullwidth && "lens" != this.options.zoomType && (this.lensLeftPos = 0), this.zoomLens.css({ left: this.lensLeftPos + "px", top: this.lensTopPos + "px" })))
        }, showHideWindow: function (b) { "show" != b || this.isWindowActive || (this.options.zoomWindowFadeIn ? this.zoomWindow.stop(!0, !0, !1).fadeIn(this.options.zoomWindowFadeIn) : this.zoomWindow.show(), this.isWindowActive = !0); "hide" == b && this.isWindowActive && (this.options.zoomWindowFadeOut ? this.zoomWindow.stop(!0, !0).fadeOut(this.options.zoomWindowFadeOut) : this.zoomWindow.hide(), this.isWindowActive = !1) }, showHideLens: function (b) { "show" != b || this.isLensActive || (this.options.lensFadeIn ? this.zoomLens.stop(!0, !0, !1).fadeIn(this.options.lensFadeIn) : this.zoomLens.show(), this.isLensActive = !0); "hide" == b && this.isLensActive && (this.options.lensFadeOut ? this.zoomLens.stop(!0, !0).fadeOut(this.options.lensFadeOut) : this.zoomLens.hide(), this.isLensActive = !1) }, showHideTint: function (b) { "show" != b || this.isTintActive || (this.options.zoomTintFadeIn ? this.zoomTint.css({ opacity: this.options.tintOpacity }).animate().stop(!0, !0).fadeIn("slow") : (this.zoomTint.css({ opacity: this.options.tintOpacity }).animate(), this.zoomTint.show()), this.isTintActive = !0); "hide" == b && this.isTintActive && (this.options.zoomTintFadeOut ? this.zoomTint.stop(!0, !0).fadeOut(this.options.zoomTintFadeOut) : this.zoomTint.hide(), this.isTintActive = !1) }, setLensPostition: function (b) { }, setWindowPostition: function (b) { var a = this; if (isNaN(a.options.zoomWindowPosition)) a.externalContainer = d("#" + a.options.zoomWindowPosition), a.externalContainerWidth = a.externalContainer.width(), a.externalContainerHeight = a.externalContainer.height(), a.externalContainerOffset = a.externalContainer.offset(), a.windowOffsetTop = a.externalContainerOffset.top, a.windowOffsetLeft = a.externalContainerOffset.left; else switch (a.options.zoomWindowPosition) { case 1: a.windowOffsetTop = a.options.zoomWindowOffety; a.windowOffsetLeft = +a.nzWidth; break; case 2: a.options.zoomWindowHeight > a.nzHeight && (a.windowOffsetTop = -1 * (a.options.zoomWindowHeight / 2 - a.nzHeight / 2), a.windowOffsetLeft = a.nzWidth); break; case 3: a.windowOffsetTop = a.nzHeight - a.zoomWindow.height() - 2 * a.options.borderSize; a.windowOffsetLeft = a.nzWidth; break; case 4: a.windowOffsetTop = a.nzHeight; a.windowOffsetLeft = a.nzWidth; break; case 5: a.windowOffsetTop = a.nzHeight; a.windowOffsetLeft = a.nzWidth - a.zoomWindow.width() - 2 * a.options.borderSize; break; case 6: a.options.zoomWindowHeight > a.nzHeight && (a.windowOffsetTop = a.nzHeight, a.windowOffsetLeft = -1 * (a.options.zoomWindowWidth / 2 - a.nzWidth / 2 + 2 * a.options.borderSize)); break; case 7: a.windowOffsetTop = a.nzHeight; a.windowOffsetLeft = 0; break; case 8: a.windowOffsetTop = a.nzHeight; a.windowOffsetLeft = -1 * (a.zoomWindow.width() + 2 * a.options.borderSize); break; case 9: a.windowOffsetTop = a.nzHeight - a.zoomWindow.height() - 2 * a.options.borderSize; a.windowOffsetLeft = -1 * (a.zoomWindow.width() + 2 * a.options.borderSize); break; case 10: a.options.zoomWindowHeight > a.nzHeight && (a.windowOffsetTop = -1 * (a.options.zoomWindowHeight / 2 - a.nzHeight / 2), a.windowOffsetLeft = -1 * (a.zoomWindow.width() + 2 * a.options.borderSize)); break; case 11: a.windowOffsetTop = a.options.zoomWindowOffety; a.windowOffsetLeft = -1 * (a.zoomWindow.width() + 2 * a.options.borderSize); break; case 12: a.windowOffsetTop = -1 * (a.zoomWindow.height() + 2 * a.options.borderSize); a.windowOffsetLeft = -1 * (a.zoomWindow.width() + 2 * a.options.borderSize); break; case 13: a.windowOffsetTop = -1 * (a.zoomWindow.height() + 2 * a.options.borderSize); a.windowOffsetLeft = 0; break; case 14: a.options.zoomWindowHeight > a.nzHeight && (a.windowOffsetTop = -1 * (a.zoomWindow.height() + 2 * a.options.borderSize), a.windowOffsetLeft = -1 * (a.options.zoomWindowWidth / 2 - a.nzWidth / 2 + 2 * a.options.borderSize)); break; case 15: a.windowOffsetTop = -1 * (a.zoomWindow.height() + 2 * a.options.borderSize); a.windowOffsetLeft = a.nzWidth - a.zoomWindow.width() - 2 * a.options.borderSize; break; case 16: a.windowOffsetTop = -1 * (a.zoomWindow.height() + 2 * a.options.borderSize); a.windowOffsetLeft = a.nzWidth; break; default: a.windowOffsetTop = a.options.zoomWindowOffety, a.windowOffsetLeft = a.nzWidth }a.isWindowSet = !0; a.windowOffsetTop += a.options.zoomWindowOffety; a.windowOffsetLeft += a.options.zoomWindowOffetx; a.zoomWindow.css({ top: a.windowOffsetTop }); a.zoomWindow.css({ left: a.windowOffsetLeft }); "inner" == a.options.zoomType && (a.zoomWindow.css({ top: 0 }), a.zoomWindow.css({ left: 0 })); a.windowLeftPos = String(-1 * ((b.pageX - a.nzOffset.left) * a.widthRatio - a.zoomWindow.width() / 2)); a.windowTopPos = String(-1 * ((b.pageY - a.nzOffset.top) * a.heightRatio - a.zoomWindow.height() / 2)); a.Etoppos && (a.windowTopPos = 0); a.Eloppos && (a.windowLeftPos = 0); a.Eboppos && (a.windowTopPos = -1 * (a.largeHeight / a.currentZoomLevel - a.zoomWindow.height())); a.Eroppos && (a.windowLeftPos = -1 * (a.largeWidth / a.currentZoomLevel - a.zoomWindow.width())); a.fullheight && (a.windowTopPos = 0); a.fullwidth && (a.windowLeftPos = 0); if ("window" == a.options.zoomType || "inner" == a.options.zoomType) 1 == a.zoomLock && (1 >= a.widthRatio && (a.windowLeftPos = 0), 1 >= a.heightRatio && (a.windowTopPos = 0)), a.largeHeight < a.options.zoomWindowHeight && (a.windowTopPos = 0), a.largeWidth < a.options.zoomWindowWidth && (a.windowLeftPos = 0), a.options.easing ? (a.xp || (a.xp = 0), a.yp || (a.yp = 0), a.loop || (a.loop = setInterval(function () { a.xp += (a.windowLeftPos - a.xp) / a.options.easingAmount; a.yp += (a.windowTopPos - a.yp) / a.options.easingAmount; a.scrollingLock ? (clearInterval(a.loop), a.xp = a.windowLeftPos, a.yp = a.windowTopPos, a.xp = -1 * ((b.pageX - a.nzOffset.left) * a.widthRatio - a.zoomWindow.width() / 2), a.yp = -1 * ((b.pageY - a.nzOffset.top) * a.heightRatio - a.zoomWindow.height() / 2), a.changeBgSize && (a.nzHeight > a.nzWidth ? ("lens" == a.options.zoomType && a.zoomLens.css({ "background-size": a.largeWidth / a.newvalueheight + "px " + a.largeHeight / a.newvalueheight + "px" }), a.zoomWindow.css({ "background-size": a.largeWidth / a.newvalueheight + "px " + a.largeHeight / a.newvalueheight + "px" })) : ("lens" != a.options.zoomType && a.zoomLens.css({ "background-size": a.largeWidth / a.newvaluewidth + "px " + a.largeHeight / a.newvalueheight + "px" }), a.zoomWindow.css({ "background-size": a.largeWidth / a.newvaluewidth + "px " + a.largeHeight / a.newvaluewidth + "px" })), a.changeBgSize = !1), a.zoomWindow.css({ backgroundPosition: a.windowLeftPos + "px " + a.windowTopPos + "px" }), a.scrollingLock = !1, a.loop = !1) : (a.changeBgSize && (a.nzHeight > a.nzWidth ? ("lens" == a.options.zoomType && a.zoomLens.css({ "background-size": a.largeWidth / a.newvalueheight + "px " + a.largeHeight / a.newvalueheight + "px" }), a.zoomWindow.css({ "background-size": a.largeWidth / a.newvalueheight + "px " + a.largeHeight / a.newvalueheight + "px" })) : ("lens" != a.options.zoomType && a.zoomLens.css({ "background-size": a.largeWidth / a.newvaluewidth + "px " + a.largeHeight / a.newvaluewidth + "px" }), a.zoomWindow.css({ "background-size": a.largeWidth / a.newvaluewidth + "px " + a.largeHeight / a.newvaluewidth + "px" })), a.changeBgSize = !1), a.zoomWindow.css({ backgroundPosition: a.xp + "px " + a.yp + "px" })) }, 16))) : (a.changeBgSize && (a.nzHeight > a.nzWidth ? ("lens" == a.options.zoomType && a.zoomLens.css({ "background-size": a.largeWidth / a.newvalueheight + "px " + a.largeHeight / a.newvalueheight + "px" }), a.zoomWindow.css({ "background-size": a.largeWidth / a.newvalueheight + "px " + a.largeHeight / a.newvalueheight + "px" })) : ("lens" == a.options.zoomType && a.zoomLens.css({ "background-size": a.largeWidth / a.newvaluewidth + "px " + a.largeHeight / a.newvaluewidth + "px" }), a.largeHeight / a.newvaluewidth < a.options.zoomWindowHeight ? a.zoomWindow.css({ "background-size": a.largeWidth / a.newvaluewidth + "px " + a.largeHeight / a.newvaluewidth + "px" }) : a.zoomWindow.css({ "background-size": a.largeWidth / a.newvalueheight + "px " + a.largeHeight / a.newvalueheight + "px" })), a.changeBgSize = !1), a.zoomWindow.css({ backgroundPosition: a.windowLeftPos + "px " + a.windowTopPos + "px" })) }, setTintPosition: function (b) { this.nzOffset = this.$elem.offset(); this.tintpos = String(-1 * (b.pageX - this.nzOffset.left - this.zoomLens.width() / 2)); this.tintposy = String(-1 * (b.pageY - this.nzOffset.top - this.zoomLens.height() / 2)); this.Etoppos && (this.tintposy = 0); this.Eloppos && (this.tintpos = 0); this.Eboppos && (this.tintposy = -1 * (this.nzHeight - this.zoomLens.height() - 2 * this.options.lensBorderSize)); this.Eroppos && (this.tintpos = -1 * (this.nzWidth - this.zoomLens.width() - 2 * this.options.lensBorderSize)); this.options.tint && (this.fullheight && (this.tintposy = 0), this.fullwidth && (this.tintpos = 0), this.zoomTintImage.css({ left: this.tintpos + "px" }), this.zoomTintImage.css({ top: this.tintposy + "px" })) }, swaptheimage: function (b, a) { var c = this, e = new Image; c.options.loadingIcon && (c.spinner = d("<div style=\"background: url('" + c.options.loadingIcon + "') no-repeat center;height:" + c.nzHeight + "px;width:" + c.nzWidth + 'px;z-index: 2000;position: absolute; background-position: center center;"></div>'), c.$elem.after(c.spinner)); c.options.onImageSwap(c.$elem); e.onload = function () { c.largeWidth = e.width; c.largeHeight = e.height; c.zoomImage = a; c.zoomWindow.css({ "background-size": c.largeWidth + "px " + c.largeHeight + "px" }); c.zoomWindow.css({ "background-size": c.largeWidth + "px " + c.largeHeight + "px" }); c.swapAction(b, a) }; e.src = a }, swapAction: function (b, a) { var c = this, e = new Image; e.onload = function () { c.nzHeight = e.height; c.nzWidth = e.width; c.options.onImageSwapComplete(c.$elem); c.doneCallback() }; e.src = b; c.currentZoomLevel = c.options.zoomLevel; c.options.maxZoomLevel = !1; "lens" == c.options.zoomType && c.zoomLens.css({ backgroundImage: "url('" + a + "')" }); "window" == c.options.zoomType && c.zoomWindow.css({ backgroundImage: "url('" + a + "')" }); "inner" == c.options.zoomType && c.zoomWindow.css({ backgroundImage: "url('" + a + "')" }); c.currentImage = a; if (c.options.imageCrossfade) { var f = c.$elem, g = f.clone(); c.$elem.attr("src", b); c.$elem.after(g); g.stop(!0).fadeOut(c.options.imageCrossfade, function () { d(this).remove() }); c.$elem.width("auto").removeAttr("width"); c.$elem.height("auto").removeAttr("height"); f.fadeIn(c.options.imageCrossfade); c.options.tint && "inner" != c.options.zoomType && (f = c.zoomTintImage, g = f.clone(), c.zoomTintImage.attr("src", a), c.zoomTintImage.after(g), g.stop(!0).fadeOut(c.options.imageCrossfade, function () { d(this).remove() }), f.fadeIn(c.options.imageCrossfade), c.zoomTint.css({ height: c.$elem.height() }), c.zoomTint.css({ width: c.$elem.width() })); c.zoomContainer.css("height", c.$elem.height()); c.zoomContainer.css("width", c.$elem.width()); "inner" != c.options.zoomType || c.options.constrainType || (c.zoomWrap.parent().css("height", c.$elem.height()), c.zoomWrap.parent().css("width", c.$elem.width()), c.zoomWindow.css("height", c.$elem.height()), c.zoomWindow.css("width", c.$elem.width())) } else c.$elem.attr("src", b), c.options.tint && (c.zoomTintImage.attr("src", a), c.zoomTintImage.attr("height", c.$elem.height()), c.zoomTintImage.css({ height: c.$elem.height() }), c.zoomTint.css({ height: c.$elem.height() })), c.zoomContainer.css("height", c.$elem.height()), c.zoomContainer.css("width", c.$elem.width()); c.options.imageCrossfade && (c.zoomWrap.css("height", c.$elem.height()), c.zoomWrap.css("width", c.$elem.width())); c.options.constrainType && ("height" == c.options.constrainType && (c.zoomContainer.css("height", c.options.constrainSize), c.zoomContainer.css("width", "auto"), c.options.imageCrossfade ? (c.zoomWrap.css("height", c.options.constrainSize), c.zoomWrap.css("width", "auto"), c.constwidth = c.zoomWrap.width()) : (c.$elem.css("height", c.options.constrainSize), c.$elem.css("width", "auto"), c.constwidth = c.$elem.width()), "inner" == c.options.zoomType && (c.zoomWrap.parent().css("height", c.options.constrainSize), c.zoomWrap.parent().css("width", c.constwidth), c.zoomWindow.css("height", c.options.constrainSize), c.zoomWindow.css("width", c.constwidth)), c.options.tint && (c.tintContainer.css("height", c.options.constrainSize), c.tintContainer.css("width", c.constwidth), c.zoomTint.css("height", c.options.constrainSize), c.zoomTint.css("width", c.constwidth), c.zoomTintImage.css("height", c.options.constrainSize), c.zoomTintImage.css("width", c.constwidth))), "width" == c.options.constrainType && (c.zoomContainer.css("height", "auto"), c.zoomContainer.css("width", c.options.constrainSize), c.options.imageCrossfade ? (c.zoomWrap.css("height", "auto"), c.zoomWrap.css("width", c.options.constrainSize), c.constheight = c.zoomWrap.height()) : (c.$elem.css("height", "auto"), c.$elem.css("width", c.options.constrainSize), c.constheight = c.$elem.height()), "inner" == c.options.zoomType && (c.zoomWrap.parent().css("height", c.constheight), c.zoomWrap.parent().css("width", c.options.constrainSize), c.zoomWindow.css("height", c.constheight), c.zoomWindow.css("width", c.options.constrainSize)), c.options.tint && (c.tintContainer.css("height", c.constheight), c.tintContainer.css("width", c.options.constrainSize), c.zoomTint.css("height", c.constheight), c.zoomTint.css("width", c.options.constrainSize), c.zoomTintImage.css("height", c.constheight), c.zoomTintImage.css("width", c.options.constrainSize)))) }, doneCallback: function () { this.options.loadingIcon && this.spinner.hide(); this.nzOffset = this.$elem.offset(); this.nzWidth = this.$elem.width(); this.nzHeight = this.$elem.height(); this.currentZoomLevel = this.options.zoomLevel; this.widthRatio = this.largeWidth / this.nzWidth; this.heightRatio = this.largeHeight / this.nzHeight; "window" == this.options.zoomType && (lensHeight = this.nzHeight < this.options.zoomWindowWidth / this.widthRatio ? this.nzHeight : String(this.options.zoomWindowHeight / this.heightRatio), lensWidth = this.options.zoomWindowWidth < this.options.zoomWindowWidth ? this.nzWidth : this.options.zoomWindowWidth / this.widthRatio, this.zoomLens && (this.zoomLens.css("width", lensWidth), this.zoomLens.css("height", lensHeight))) }, getCurrentImage: function () { return this.zoomImage }, getGalleryList: function () { var b = this; b.gallerylist = []; b.options.gallery ? d("#" + b.options.gallery + " a").each(function () { var a = ""; d(this).data("zoom-image") ? a = d(this).data("zoom-image") : d(this).data("image") && (a = d(this).data("image")); a == b.zoomImage ? b.gallerylist.unshift({ href: "" + a + "", title: d(this).find("img").attr("title") }) : b.gallerylist.push({ href: "" + a + "", title: d(this).find("img").attr("title") }) }) : b.gallerylist.push({ href: "" + b.zoomImage + "", title: d(this).find("img").attr("title") }); return b.gallerylist }, changeZoomLevel: function (b) { this.scrollingLock = !0; this.newvalue = parseFloat(b).toFixed(2); newvalue = parseFloat(b).toFixed(2); maxheightnewvalue = this.largeHeight / (this.options.zoomWindowHeight / this.nzHeight * this.nzHeight); maxwidthtnewvalue = this.largeWidth / (this.options.zoomWindowWidth / this.nzWidth * this.nzWidth); "inner" != this.options.zoomType && (maxheightnewvalue <= newvalue ? (this.heightRatio = this.largeHeight / maxheightnewvalue / this.nzHeight, this.newvalueheight = maxheightnewvalue, this.fullheight = !0) : (this.heightRatio = this.largeHeight / newvalue / this.nzHeight, this.newvalueheight = newvalue, this.fullheight = !1), maxwidthtnewvalue <= newvalue ? (this.widthRatio = this.largeWidth / maxwidthtnewvalue / this.nzWidth, this.newvaluewidth = maxwidthtnewvalue, this.fullwidth = !0) : (this.widthRatio = this.largeWidth / newvalue / this.nzWidth, this.newvaluewidth = newvalue, this.fullwidth = !1), "lens" == this.options.zoomType && (maxheightnewvalue <= newvalue ? (this.fullwidth = !0, this.newvaluewidth = maxheightnewvalue) : (this.widthRatio = this.largeWidth / newvalue / this.nzWidth, this.newvaluewidth = newvalue, this.fullwidth = !1))); "inner" == this.options.zoomType && (maxheightnewvalue = parseFloat(this.largeHeight / this.nzHeight).toFixed(2), maxwidthtnewvalue = parseFloat(this.largeWidth / this.nzWidth).toFixed(2), newvalue > maxheightnewvalue && (newvalue = maxheightnewvalue), newvalue > maxwidthtnewvalue && (newvalue = maxwidthtnewvalue), maxheightnewvalue <= newvalue ? (this.heightRatio = this.largeHeight / newvalue / this.nzHeight, this.newvalueheight = newvalue > maxheightnewvalue ? maxheightnewvalue : newvalue, this.fullheight = !0) : (this.heightRatio = this.largeHeight / newvalue / this.nzHeight, this.newvalueheight = newvalue > maxheightnewvalue ? maxheightnewvalue : newvalue, this.fullheight = !1), maxwidthtnewvalue <= newvalue ? (this.widthRatio = this.largeWidth / newvalue / this.nzWidth, this.newvaluewidth = newvalue > maxwidthtnewvalue ? maxwidthtnewvalue : newvalue, this.fullwidth = !0) : (this.widthRatio = this.largeWidth / newvalue / this.nzWidth, this.newvaluewidth = newvalue, this.fullwidth = !1)); scrcontinue = !1; "inner" == this.options.zoomType && (this.nzWidth > this.nzHeight && (this.newvaluewidth <= maxwidthtnewvalue ? scrcontinue = !0 : (scrcontinue = !1, this.fullwidth = this.fullheight = !0)), this.nzHeight > this.nzWidth && (this.newvaluewidth <= maxwidthtnewvalue ? scrcontinue = !0 : (scrcontinue = !1, this.fullwidth = this.fullheight = !0))); "inner" != this.options.zoomType && (scrcontinue = !0); scrcontinue && (this.zoomLock = 0, this.changeZoom = !0, this.options.zoomWindowHeight / this.heightRatio <= this.nzHeight && (this.currentZoomLevel = this.newvalueheight, "lens" != this.options.zoomType && "inner" != this.options.zoomType && (this.changeBgSize = !0, this.zoomLens.css({ height: String(this.options.zoomWindowHeight / this.heightRatio) + "px" })), "lens" == this.options.zoomType || "inner" == this.options.zoomType) && (this.changeBgSize = !0), this.options.zoomWindowWidth / this.widthRatio <= this.nzWidth && ("inner" != this.options.zoomType && this.newvaluewidth > this.newvalueheight && (this.currentZoomLevel = this.newvaluewidth), "lens" != this.options.zoomType && "inner" != this.options.zoomType && (this.changeBgSize = !0, this.zoomLens.css({ width: String(this.options.zoomWindowWidth / this.widthRatio) + "px" })), "lens" == this.options.zoomType || "inner" == this.options.zoomType) && (this.changeBgSize = !0), "inner" == this.options.zoomType && (this.changeBgSize = !0, this.nzWidth > this.nzHeight && (this.currentZoomLevel = this.newvaluewidth), this.nzHeight > this.nzWidth && (this.currentZoomLevel = this.newvaluewidth))); this.setPosition(this.currentLoc) }, closeAll: function () { self.zoomWindow && self.zoomWindow.hide(); self.zoomLens && self.zoomLens.hide(); self.zoomTint && self.zoomTint.hide() }, changeState: function (b) { "enable" == b && (this.options.zoomEnabled = !0); "disable" == b && (this.options.zoomEnabled = !1) }
    }; d.fn.elevateZoom = function (b) { return this.each(function () { var a = Object.create(k); a.init(b, this); d.data(this, "elevateZoom", a) }) }; d.fn.elevateZoom.options = { zoomActivation: "hover", zoomEnabled: !0, preloading: 1, zoomLevel: 1, scrollZoom: !1, scrollZoomIncrement: 0.1, minZoomLevel: !1, maxZoomLevel: !1, easing: !1, easingAmount: 12, lensSize: 200, zoomWindowWidth: 400, zoomWindowHeight: 400, zoomWindowOffetx: 0, zoomWindowOffety: 0, zoomWindowPosition: 1, zoomWindowBgColour: "#fff", lensFadeIn: !1, lensFadeOut: !1, debug: !1, zoomWindowFadeIn: !1, zoomWindowFadeOut: !1, zoomWindowAlwaysShow: !1, zoomTintFadeIn: !1, zoomTintFadeOut: !1, borderSize: 4, showLens: !0, borderColour: "#888", lensBorderSize: 1, lensBorderColour: "#000", lensShape: "square", zoomType: "window", containLensZoom: !1, lensColour: "white", lensOpacity: 0.4, lenszoom: !1, tint: !1, tintColour: "#333", tintOpacity: 0.4, gallery: !1, galleryActiveClass: "zoomGalleryActive", imageCrossfade: !1, constrainType: !1, constrainSize: !1, loadingIcon: !1, cursor: "default", responsive: !0, onComplete: d.noop, onZoomedImageLoaded: function () { }, onImageSwap: d.noop, onImageSwapComplete: d.noop }
})(jQuery, window, document);;

/* /atharva_theme_base/static/lib/js/jquery.magnific-popup.min.js defined in bundle 'web.assets_frontend_lazy' */
!function (a) { "function" == typeof define && define.amd ? define(["jquery"], a) : a("object" == typeof exports ? require("jquery") : window.jQuery || window.Zepto) }(function (a) { var b, c, d, e, f, g, h = "Close", i = "BeforeClose", j = "AfterClose", k = "BeforeAppend", l = "MarkupParse", m = "Open", n = "Change", o = "mfp", p = "." + o, q = "mfp-ready", r = "mfp-removing", s = "mfp-prevent-close", t = function () { }, u = !!window.jQuery, v = a(window), w = function (a, c) { b.ev.on(o + a + p, c) }, x = function (b, c, d, e) { var f = document.createElement("div"); return f.className = "mfp-" + b, d && (f.innerHTML = d), e ? c && c.appendChild(f) : (f = a(f), c && f.appendTo(c)), f }, y = function (c, d) { b.ev.triggerHandler(o + c, d), b.st.callbacks && (c = c.charAt(0).toLowerCase() + c.slice(1), b.st.callbacks[c] && b.st.callbacks[c].apply(b, a.isArray(d) ? d : [d])) }, z = function (c) { return c === g && b.currTemplate.closeBtn || (b.currTemplate.closeBtn = a(b.st.closeMarkup.replace("%title%", b.st.tClose)), g = c), b.currTemplate.closeBtn }, A = function () { a.magnificPopup.instance || (b = new t, b.init(), a.magnificPopup.instance = b) }, B = function () { var a = document.createElement("p").style, b = ["ms", "O", "Moz", "Webkit"]; if (void 0 !== a.transition) return !0; for (; b.length;)if (b.pop() + "Transition" in a) return !0; return !1 }; t.prototype = { constructor: t, init: function () { var c = navigator.appVersion; b.isLowIE = b.isIE8 = document.all && !document.addEventListener, b.isAndroid = /android/gi.test(c), b.isIOS = /iphone|ipad|ipod/gi.test(c), b.supportsTransition = B(), b.probablyMobile = b.isAndroid || b.isIOS || /(Opera Mini)|Kindle|webOS|BlackBerry|(Opera Mobi)|(Windows Phone)|IEMobile/i.test(navigator.userAgent), d = a(document), b.popupsCache = {} }, open: function (c) { var e; if (c.isObj === !1) { b.items = c.items.toArray(), b.index = 0; var g, h = c.items; for (e = 0; e < h.length; e++)if (g = h[e], g.parsed && (g = g.el[0]), g === c.el[0]) { b.index = e; break } } else b.items = a.isArray(c.items) ? c.items : [c.items], b.index = c.index || 0; if (b.isOpen) return void b.updateItemHTML(); b.types = [], f = "", c.mainEl && c.mainEl.length ? b.ev = c.mainEl.eq(0) : b.ev = d, c.key ? (b.popupsCache[c.key] || (b.popupsCache[c.key] = {}), b.currTemplate = b.popupsCache[c.key]) : b.currTemplate = {}, b.st = a.extend(!0, {}, a.magnificPopup.defaults, c), b.fixedContentPos = "auto" === b.st.fixedContentPos ? !b.probablyMobile : b.st.fixedContentPos, b.st.modal && (b.st.closeOnContentClick = !1, b.st.closeOnBgClick = !1, b.st.showCloseBtn = !1, b.st.enableEscapeKey = !1), b.bgOverlay || (b.bgOverlay = x("bg").on("click" + p, function () { b.close() }), b.wrap = x("wrap").attr("tabindex", -1).on("click" + p, function (a) { b._checkIfClose(a.target) && b.close() }), b.container = x("container", b.wrap)), b.contentContainer = x("content"), b.st.preloader && (b.preloader = x("preloader", b.container, b.st.tLoading)); var i = a.magnificPopup.modules; for (e = 0; e < i.length; e++) { var j = i[e]; j = j.charAt(0).toUpperCase() + j.slice(1), b["init" + j].call(b) } y("BeforeOpen"), b.st.showCloseBtn && (b.st.closeBtnInside ? (w(l, function (a, b, c, d) { c.close_replaceWith = z(d.type) }), f += " mfp-close-btn-in") : b.wrap.append(z())), b.st.alignTop && (f += " mfp-align-top"), b.fixedContentPos ? b.wrap.css({ overflow: b.st.overflowY, overflowX: "hidden", overflowY: b.st.overflowY }) : b.wrap.css({ top: v.scrollTop(), position: "absolute" }), (b.st.fixedBgPos === !1 || "auto" === b.st.fixedBgPos && !b.fixedContentPos) && b.bgOverlay.css({ height: d.height(), position: "absolute" }), b.st.enableEscapeKey && d.on("keyup" + p, function (a) { 27 === a.keyCode && b.close() }), v.on("resize" + p, function () { b.updateSize() }), b.st.closeOnContentClick || (f += " mfp-auto-cursor"), f && b.wrap.addClass(f); var k = b.wH = v.height(), n = {}; if (b.fixedContentPos && b._hasScrollBar(k)) { var o = b._getScrollbarSize(); o && (n.marginRight = o) } b.fixedContentPos && (b.isIE7 ? a("body, html").css("overflow", "hidden") : n.overflow = "hidden"); var r = b.st.mainClass; return b.isIE7 && (r += " mfp-ie7"), r && b._addClassToMFP(r), b.updateItemHTML(), y("BuildControls"), a("html").css(n), b.bgOverlay.add(b.wrap).prependTo(b.st.prependTo || a(document.body)), b._lastFocusedEl = document.activeElement, setTimeout(function () { b.content ? (b._addClassToMFP(q), b._setFocus()) : b.bgOverlay.addClass(q), d.on("focusin" + p, b._onFocusIn) }, 16), b.isOpen = !0, b.updateSize(k), y(m), c }, close: function () { b.isOpen && (y(i), b.isOpen = !1, b.st.removalDelay && !b.isLowIE && b.supportsTransition ? (b._addClassToMFP(r), setTimeout(function () { b._close() }, b.st.removalDelay)) : b._close()) }, _close: function () { y(h); var c = r + " " + q + " "; if (b.bgOverlay.detach(), b.wrap.detach(), b.container.empty(), b.st.mainClass && (c += b.st.mainClass + " "), b._removeClassFromMFP(c), b.fixedContentPos) { var e = { marginRight: "" }; b.isIE7 ? a("body, html").css("overflow", "") : e.overflow = "", a("html").css(e) } d.off("keyup" + p + " focusin" + p), b.ev.off(p), b.wrap.attr("class", "mfp-wrap").removeAttr("style"), b.bgOverlay.attr("class", "mfp-bg"), b.container.attr("class", "mfp-container"), !b.st.showCloseBtn || b.st.closeBtnInside && b.currTemplate[b.currItem.type] !== !0 || b.currTemplate.closeBtn && b.currTemplate.closeBtn.detach(), b.st.autoFocusLast && b._lastFocusedEl && a(b._lastFocusedEl).focus(), b.currItem = null, b.content = null, b.currTemplate = null, b.prevHeight = 0, y(j) }, updateSize: function (a) { if (b.isIOS) { var c = document.documentElement.clientWidth / window.innerWidth, d = window.innerHeight * c; b.wrap.css("height", d), b.wH = d } else b.wH = a || v.height(); b.fixedContentPos || b.wrap.css("height", b.wH), y("Resize") }, updateItemHTML: function () { var c = b.items[b.index]; b.contentContainer.detach(), b.content && b.content.detach(), c.parsed || (c = b.parseEl(b.index)); var d = c.type; if (y("BeforeChange", [b.currItem ? b.currItem.type : "", d]), b.currItem = c, !b.currTemplate[d]) { var f = b.st[d] ? b.st[d].markup : !1; y("FirstMarkupParse", f), f ? b.currTemplate[d] = a(f) : b.currTemplate[d] = !0 } e && e !== c.type && b.container.removeClass("mfp-" + e + "-holder"); var g = b["get" + d.charAt(0).toUpperCase() + d.slice(1)](c, b.currTemplate[d]); b.appendContent(g, d), c.preloaded = !0, y(n, c), e = c.type, b.container.prepend(b.contentContainer), y("AfterChange") }, appendContent: function (a, c) { b.content = a, a ? b.st.showCloseBtn && b.st.closeBtnInside && b.currTemplate[c] === !0 ? b.content.find(".mfp-close").length || b.content.append(z()) : b.content = a : b.content = "", y(k), b.container.addClass("mfp-" + c + "-holder"), b.contentContainer.append(b.content) }, parseEl: function (c) { var d, e = b.items[c]; if (e.tagName ? e = { el: a(e) } : (d = e.type, e = { data: e, src: e.src }), e.el) { for (var f = b.types, g = 0; g < f.length; g++)if (e.el.hasClass("mfp-" + f[g])) { d = f[g]; break } e.src = e.el.attr("data-mfp-src"), e.src || (e.src = e.el.attr("href")) } return e.type = d || b.st.type || "inline", e.index = c, e.parsed = !0, b.items[c] = e, y("ElementParse", e), b.items[c] }, addGroup: function (a, c) { var d = function (d) { d.mfpEl = this, b._openClick(d, a, c) }; c || (c = {}); var e = "click.magnificPopup"; c.mainEl = a, c.items ? (c.isObj = !0, a.off(e).on(e, d)) : (c.isObj = !1, c.delegate ? a.off(e).on(e, c.delegate, d) : (c.items = a, a.off(e).on(e, d))) }, _openClick: function (c, d, e) { var f = void 0 !== e.midClick ? e.midClick : a.magnificPopup.defaults.midClick; if (f || !(2 === c.which || c.ctrlKey || c.metaKey || c.altKey || c.shiftKey)) { var g = void 0 !== e.disableOn ? e.disableOn : a.magnificPopup.defaults.disableOn; if (g) if (a.isFunction(g)) { if (!g.call(b)) return !0 } else if (v.width() < g) return !0; c.type && (c.preventDefault(), b.isOpen && c.stopPropagation()), e.el = a(c.mfpEl), e.delegate && (e.items = d.find(e.delegate)), b.open(e) } }, updateStatus: function (a, d) { if (b.preloader) { c !== a && b.container.removeClass("mfp-s-" + c), d || "loading" !== a || (d = b.st.tLoading); var e = { status: a, text: d }; y("UpdateStatus", e), a = e.status, d = e.text, b.preloader.html(d), b.preloader.find("a").on("click", function (a) { a.stopImmediatePropagation() }), b.container.addClass("mfp-s-" + a), c = a } }, _checkIfClose: function (c) { if (!a(c).hasClass(s)) { var d = b.st.closeOnContentClick, e = b.st.closeOnBgClick; if (d && e) return !0; if (!b.content || a(c).hasClass("mfp-close") || b.preloader && c === b.preloader[0]) return !0; if (c === b.content[0] || a.contains(b.content[0], c)) { if (d) return !0 } else if (e && a.contains(document, c)) return !0; return !1 } }, _addClassToMFP: function (a) { b.bgOverlay.addClass(a), b.wrap.addClass(a) }, _removeClassFromMFP: function (a) { this.bgOverlay.removeClass(a), b.wrap.removeClass(a) }, _hasScrollBar: function (a) { return (b.isIE7 ? d.height() : document.body.scrollHeight) > (a || v.height()) }, _setFocus: function () { (b.st.focus ? b.content.find(b.st.focus).eq(0) : b.wrap).focus() }, _onFocusIn: function (c) { return c.target === b.wrap[0] || a.contains(b.wrap[0], c.target) ? void 0 : (b._setFocus(), !1) }, _parseMarkup: function (b, c, d) { var e; d.data && (c = a.extend(d.data, c)), y(l, [b, c, d]), a.each(c, function (c, d) { if (void 0 === d || d === !1) return !0; if (e = c.split("_"), e.length > 1) { var f = b.find(p + "-" + e[0]); if (f.length > 0) { var g = e[1]; "replaceWith" === g ? f[0] !== d[0] && f.replaceWith(d) : "img" === g ? f.is("img") ? f.attr("src", d) : f.replaceWith(a("<img>").attr("src", d).attr("class", f.attr("class"))) : f.attr(e[1], d) } } else b.find(p + "-" + c).html(d) }) }, _getScrollbarSize: function () { if (void 0 === b.scrollbarSize) { var a = document.createElement("div"); a.style.cssText = "width: 99px; height: 99px; overflow: scroll; position: absolute; top: -9999px;", document.body.appendChild(a), b.scrollbarSize = a.offsetWidth - a.clientWidth, document.body.removeChild(a) } return b.scrollbarSize } }, a.magnificPopup = { instance: null, proto: t.prototype, modules: [], open: function (b, c) { return A(), b = b ? a.extend(!0, {}, b) : {}, b.isObj = !0, b.index = c || 0, this.instance.open(b) }, close: function () { return a.magnificPopup.instance && a.magnificPopup.instance.close() }, registerModule: function (b, c) { c.options && (a.magnificPopup.defaults[b] = c.options), a.extend(this.proto, c.proto), this.modules.push(b) }, defaults: { disableOn: 0, key: null, midClick: !1, mainClass: "", preloader: !0, focus: "", closeOnContentClick: !1, closeOnBgClick: !0, closeBtnInside: !0, showCloseBtn: !0, enableEscapeKey: !0, modal: !1, alignTop: !1, removalDelay: 0, prependTo: null, fixedContentPos: "auto", fixedBgPos: "auto", overflowY: "auto", closeMarkup: '<button title="%title%" type="button" class="mfp-close">&#215;</button>', tClose: "Close (Esc)", tLoading: "Loading...", autoFocusLast: !0 } }, a.fn.magnificPopup = function (c) { A(); var d = a(this); if ("string" == typeof c) if ("open" === c) { var e, f = u ? d.data("magnificPopup") : d[0].magnificPopup, g = parseInt(arguments[1], 10) || 0; f.items ? e = f.items[g] : (e = d, f.delegate && (e = e.find(f.delegate)), e = e.eq(g)), b._openClick({ mfpEl: e }, d, f) } else b.isOpen && b[c].apply(b, Array.prototype.slice.call(arguments, 1)); else c = a.extend(!0, {}, c), u ? d.data("magnificPopup", c) : d[0].magnificPopup = c, b.addGroup(d, c); return d }; var C, D, E, F = "inline", G = function () { E && (D.after(E.addClass(C)).detach(), E = null) }; a.magnificPopup.registerModule(F, { options: { hiddenClass: "hide", markup: "", tNotFound: "Content not found" }, proto: { initInline: function () { b.types.push(F), w(h + "." + F, function () { G() }) }, getInline: function (c, d) { if (G(), c.src) { var e = b.st.inline, f = a(c.src); if (f.length) { var g = f[0].parentNode; g && g.tagName && (D || (C = e.hiddenClass, D = x(C), C = "mfp-" + C), E = f.after(D).detach().removeClass(C)), b.updateStatus("ready") } else b.updateStatus("error", e.tNotFound), f = a("<div>"); return c.inlineElement = f, f } return b.updateStatus("ready"), b._parseMarkup(d, {}, c), d } } }); var H, I = "ajax", J = function () { H && a(document.body).removeClass(H) }, K = function () { J(), b.req && b.req.abort() }; a.magnificPopup.registerModule(I, { options: { settings: null, cursor: "mfp-ajax-cur", tError: '<a href="%url%">The content</a> could not be loaded.' }, proto: { initAjax: function () { b.types.push(I), H = b.st.ajax.cursor, w(h + "." + I, K), w("BeforeChange." + I, K) }, getAjax: function (c) { H && a(document.body).addClass(H), b.updateStatus("loading"); var d = a.extend({ url: c.src, success: function (d, e, f) { var g = { data: d, xhr: f }; y("ParseAjax", g), b.appendContent(a(g.data), I), c.finished = !0, J(), b._setFocus(), setTimeout(function () { b.wrap.addClass(q) }, 16), b.updateStatus("ready"), y("AjaxContentAdded") }, error: function () { J(), c.finished = c.loadError = !0, b.updateStatus("error", b.st.ajax.tError.replace("%url%", c.src)) } }, b.st.ajax.settings); return b.req = a.ajax(d), "" } } }); var L, M = function (c) { if (c.data && void 0 !== c.data.title) return c.data.title; var d = b.st.image.titleSrc; if (d) { if (a.isFunction(d)) return d.call(b, c); if (c.el) return c.el.attr(d) || "" } return "" }; a.magnificPopup.registerModule("image", { options: { markup: '<div class="mfp-figure"><div class="mfp-close"></div><figure><div class="mfp-img"></div><figcaption><div class="mfp-bottom-bar"><div class="mfp-title"></div><div class="mfp-counter"></div></div></figcaption></figure></div>', cursor: "mfp-zoom-out-cur", titleSrc: "title", verticalFit: !0, tError: '<a href="%url%">The image</a> could not be loaded.' }, proto: { initImage: function () { var c = b.st.image, d = ".image"; b.types.push("image"), w(m + d, function () { "image" === b.currItem.type && c.cursor && a(document.body).addClass(c.cursor) }), w(h + d, function () { c.cursor && a(document.body).removeClass(c.cursor), v.off("resize" + p) }), w("Resize" + d, b.resizeImage), b.isLowIE && w("AfterChange", b.resizeImage) }, resizeImage: function () { var a = b.currItem; if (a && a.img && b.st.image.verticalFit) { var c = 0; b.isLowIE && (c = parseInt(a.img.css("padding-top"), 10) + parseInt(a.img.css("padding-bottom"), 10)), a.img.css("max-height", b.wH - c) } }, _onImageHasSize: function (a) { a.img && (a.hasSize = !0, L && clearInterval(L), a.isCheckingImgSize = !1, y("ImageHasSize", a), a.imgHidden && (b.content && b.content.removeClass("mfp-loading"), a.imgHidden = !1)) }, findImageSize: function (a) { var c = 0, d = a.img[0], e = function (f) { L && clearInterval(L), L = setInterval(function () { return d.naturalWidth > 0 ? void b._onImageHasSize(a) : (c > 200 && clearInterval(L), c++, void (3 === c ? e(10) : 40 === c ? e(50) : 100 === c && e(500))) }, f) }; e(1) }, getImage: function (c, d) { var e = 0, f = function () { c && (c.img[0].complete ? (c.img.off(".mfploader"), c === b.currItem && (b._onImageHasSize(c), b.updateStatus("ready")), c.hasSize = !0, c.loaded = !0, y("ImageLoadComplete")) : (e++, 200 > e ? setTimeout(f, 100) : g())) }, g = function () { c && (c.img.off(".mfploader"), c === b.currItem && (b._onImageHasSize(c), b.updateStatus("error", h.tError.replace("%url%", c.src))), c.hasSize = !0, c.loaded = !0, c.loadError = !0) }, h = b.st.image, i = d.find(".mfp-img"); if (i.length) { var j = document.createElement("img"); j.className = "mfp-img", c.el && c.el.find("img").length && (j.alt = c.el.find("img").attr("alt")), c.img = a(j).on("load.mfploader", f).on("error.mfploader", g), j.src = c.src, i.is("img") && (c.img = c.img.clone()), j = c.img[0], j.naturalWidth > 0 ? c.hasSize = !0 : j.width || (c.hasSize = !1) } return b._parseMarkup(d, { title: M(c), img_replaceWith: c.img }, c), b.resizeImage(), c.hasSize ? (L && clearInterval(L), c.loadError ? (d.addClass("mfp-loading"), b.updateStatus("error", h.tError.replace("%url%", c.src))) : (d.removeClass("mfp-loading"), b.updateStatus("ready")), d) : (b.updateStatus("loading"), c.loading = !0, c.hasSize || (c.imgHidden = !0, d.addClass("mfp-loading"), b.findImageSize(c)), d) } } }); var N, O = function () { return void 0 === N && (N = void 0 !== document.createElement("p").style.MozTransform), N }; a.magnificPopup.registerModule("zoom", { options: { enabled: !1, easing: "ease-in-out", duration: 300, opener: function (a) { return a.is("img") ? a : a.find("img") } }, proto: { initZoom: function () { var a, c = b.st.zoom, d = ".zoom"; if (c.enabled && b.supportsTransition) { var e, f, g = c.duration, j = function (a) { var b = a.clone().removeAttr("style").removeAttr("class").addClass("mfp-animated-image"), d = "all " + c.duration / 1e3 + "s " + c.easing, e = { position: "fixed", zIndex: 9999, left: 0, top: 0, "-webkit-backface-visibility": "hidden" }, f = "transition"; return e["-webkit-" + f] = e["-moz-" + f] = e["-o-" + f] = e[f] = d, b.css(e), b }, k = function () { b.content.css("visibility", "visible") }; w("BuildControls" + d, function () { if (b._allowZoom()) { if (clearTimeout(e), b.content.css("visibility", "hidden"), a = b._getItemToZoom(), !a) return void k(); f = j(a), f.css(b._getOffset()), b.wrap.append(f), e = setTimeout(function () { f.css(b._getOffset(!0)), e = setTimeout(function () { k(), setTimeout(function () { f.remove(), a = f = null, y("ZoomAnimationEnded") }, 16) }, g) }, 16) } }), w(i + d, function () { if (b._allowZoom()) { if (clearTimeout(e), b.st.removalDelay = g, !a) { if (a = b._getItemToZoom(), !a) return; f = j(a) } f.css(b._getOffset(!0)), b.wrap.append(f), b.content.css("visibility", "hidden"), setTimeout(function () { f.css(b._getOffset()) }, 16) } }), w(h + d, function () { b._allowZoom() && (k(), f && f.remove(), a = null) }) } }, _allowZoom: function () { return "image" === b.currItem.type }, _getItemToZoom: function () { return b.currItem.hasSize ? b.currItem.img : !1 }, _getOffset: function (c) { var d; d = c ? b.currItem.img : b.st.zoom.opener(b.currItem.el || b.currItem); var e = d.offset(), f = parseInt(d.css("padding-top"), 10), g = parseInt(d.css("padding-bottom"), 10); e.top -= a(window).scrollTop() - f; var h = { width: d.width(), height: (u ? d.innerHeight() : d[0].offsetHeight) - g - f }; return O() ? h["-moz-transform"] = h.transform = "translate(" + e.left + "px," + e.top + "px)" : (h.left = e.left, h.top = e.top), h } } }); var P = "iframe", Q = "//about:blank", R = function (a) { if (b.currTemplate[P]) { var c = b.currTemplate[P].find("iframe"); c.length && (a || (c[0].src = Q), b.isIE8 && c.css("display", a ? "block" : "none")) } }; a.magnificPopup.registerModule(P, { options: { markup: '<div class="mfp-iframe-scaler"><div class="mfp-close"></div><iframe class="mfp-iframe" src="//about:blank" frameborder="0" allowfullscreen></iframe></div>', srcAction: "iframe_src", patterns: { youtube: { index: "youtube.com", id: "v=", src: "//www.youtube.com/embed/%id%?autoplay=1" }, vimeo: { index: "vimeo.com/", id: "/", src: "//player.vimeo.com/video/%id%?autoplay=1" }, gmaps: { index: "//maps.google.", src: "%id%&output=embed" } } }, proto: { initIframe: function () { b.types.push(P), w("BeforeChange", function (a, b, c) { b !== c && (b === P ? R() : c === P && R(!0)) }), w(h + "." + P, function () { R() }) }, getIframe: function (c, d) { var e = c.src, f = b.st.iframe; a.each(f.patterns, function () { return e.indexOf(this.index) > -1 ? (this.id && (e = "string" == typeof this.id ? e.substr(e.lastIndexOf(this.id) + this.id.length, e.length) : this.id.call(this, e)), e = this.src.replace("%id%", e), !1) : void 0 }); var g = {}; return f.srcAction && (g[f.srcAction] = e), b._parseMarkup(d, g, c), b.updateStatus("ready"), d } } }); var S = function (a) { var c = b.items.length; return a > c - 1 ? a - c : 0 > a ? c + a : a }, T = function (a, b, c) { return a.replace(/%curr%/gi, b + 1).replace(/%total%/gi, c) }; a.magnificPopup.registerModule("gallery", { options: { enabled: !1, arrowMarkup: '<button title="%title%" type="button" class="mfp-arrow mfp-arrow-%dir%"></button>', preload: [0, 2], navigateByImgClick: !0, arrows: !0, tPrev: "Previous (Left arrow key)", tNext: "Next (Right arrow key)", tCounter: "%curr% of %total%" }, proto: { initGallery: function () { var c = b.st.gallery, e = ".mfp-gallery"; return b.direction = !0, c && c.enabled ? (f += " mfp-gallery", w(m + e, function () { c.navigateByImgClick && b.wrap.on("click" + e, ".mfp-img", function () { return b.items.length > 1 ? (b.next(), !1) : void 0 }), d.on("keydown" + e, function (a) { 37 === a.keyCode ? b.prev() : 39 === a.keyCode && b.next() }) }), w("UpdateStatus" + e, function (a, c) { c.text && (c.text = T(c.text, b.currItem.index, b.items.length)) }), w(l + e, function (a, d, e, f) { var g = b.items.length; e.counter = g > 1 ? T(c.tCounter, f.index, g) : "" }), w("BuildControls" + e, function () { if (b.items.length > 1 && c.arrows && !b.arrowLeft) { var d = c.arrowMarkup, e = b.arrowLeft = a(d.replace(/%title%/gi, c.tPrev).replace(/%dir%/gi, "left")).addClass(s), f = b.arrowRight = a(d.replace(/%title%/gi, c.tNext).replace(/%dir%/gi, "right")).addClass(s); e.click(function () { b.prev() }), f.click(function () { b.next() }), b.container.append(e.add(f)) } }), w(n + e, function () { b._preloadTimeout && clearTimeout(b._preloadTimeout), b._preloadTimeout = setTimeout(function () { b.preloadNearbyImages(), b._preloadTimeout = null }, 16) }), void w(h + e, function () { d.off(e), b.wrap.off("click" + e), b.arrowRight = b.arrowLeft = null })) : !1 }, next: function () { b.direction = !0, b.index = S(b.index + 1), b.updateItemHTML() }, prev: function () { b.direction = !1, b.index = S(b.index - 1), b.updateItemHTML() }, goTo: function (a) { b.direction = a >= b.index, b.index = a, b.updateItemHTML() }, preloadNearbyImages: function () { var a, c = b.st.gallery.preload, d = Math.min(c[0], b.items.length), e = Math.min(c[1], b.items.length); for (a = 1; a <= (b.direction ? e : d); a++)b._preloadItem(b.index + a); for (a = 1; a <= (b.direction ? d : e); a++)b._preloadItem(b.index - a) }, _preloadItem: function (c) { if (c = S(c), !b.items[c].preloaded) { var d = b.items[c]; d.parsed || (d = b.parseEl(c)), y("LazyLoad", d), "image" === d.type && (d.img = a('<img class="mfp-img" />').on("load.mfploader", function () { d.hasSize = !0 }).on("error.mfploader", function () { d.hasSize = !0, d.loadError = !0, y("LazyLoadError", d) }).attr("src", d.src)), d.preloaded = !0 } } } }); var U = "retina"; a.magnificPopup.registerModule(U, { options: { replaceSrc: function (a) { return a.src.replace(/\.\w+$/, function (a) { return "@2x" + a }) }, ratio: 1 }, proto: { initRetina: function () { if (window.devicePixelRatio > 1) { var a = b.st.retina, c = a.ratio; c = isNaN(c) ? c() : c, c > 1 && (w("ImageHasSize." + U, function (a, b) { b.img.css({ "max-width": b.img[0].naturalWidth / c, width: "100%" }) }), w("ElementParse." + U, function (b, d) { d.src = a.replaceSrc(d, c) })) } } } }), A() });;

/* /atharva_theme_base/static/src/js/pwa_config.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('atharva_theme_base.pwa_config_js', function (require) {
    'use strict'; var publicWidget = require('web.public.widget'); publicWidget.registry.pwa = publicWidget.Widget.extend({
        selector: '#wrapwrap', start: function () {
            this._super.apply(this, arguments); this._rpc({ route: '/pwa/is_active', params: {} }).then(function (result) {
                if (result == true) { if ('serviceWorker' in navigator) { navigator.serviceWorker.register('/service-worker-js') } }
                else { if (navigator.serviceWorker) { navigator.serviceWorker.getRegistrations().then(function (reg) { _.each(reg, function (sw) { sw.unregister(); }); }); } }
            });
        },
    });
});;

/* /atharva_theme_base/static/lib/js/lazyloads.js defined in bundle 'web.assets_frontend_lazy' */
!function (e, t) { var a = function () { t(e.lazySizes), e.removeEventListener("lazyunveilread", a, !0) }; t = t.bind(null, e, e.document), "object" == typeof module && module.exports ? t(require("lazysizes")) : "function" == typeof define && define.amd ? define(["lazysizes"], t) : e.lazySizes ? a() : e.addEventListener("lazyunveilread", a, !0) }(window, function (e, z, c) { "use strict"; var g, y, b, f, r, l, s, v, m; e.addEventListener && (g = c.cfg, y = /\s+/g, b = /\s*\|\s+|\s+\|\s*/g, f = /^(.+?)(?:\s+\[\s*(.+?)\s*\])(?:\s+\[\s*(.+?)\s*\])?$/, r = /^\s*\(*\s*type\s*:\s*(.+?)\s*\)*\s*$/, l = /\(|\)|'/, s = { contain: 1, cover: 1 }, v = function (e, t) { var a; t && ((a = t.match(r)) && a[1] ? e.setAttribute("type", a[1]) : e.setAttribute("media", g.customMedia[t] || t)) }, m = function (e) { var t, a, r, i, s; e.target._lazybgset && (a = (t = e.target)._lazybgset, (r = t.currentSrc || t.src) && (i = l.test(r) ? JSON.stringify(r) : r, (s = c.fire(a, "bgsetproxy", { src: r, useSrc: i, fullSrc: null })).defaultPrevented || (a.style.backgroundImage = s.detail.fullSrc || "url(" + s.detail.useSrc + ")")), t._lazybgsetLoading && (c.fire(a, "_lazyloaded", {}, !1, !0), delete t._lazybgsetLoading)) }, addEventListener("lazybeforeunveil", function (e) { var t, a, r, i, s, l, n, d, u, o; !e.defaultPrevented && (t = e.target.getAttribute("data-bgset")) && (u = e.target, (o = z.createElement("img")).alt = "", o._lazybgsetLoading = !0, e.detail.firesLoad = !0, a = t, r = u, i = o, s = z.createElement("picture"), l = r.getAttribute(g.sizesAttr), n = r.getAttribute("data-ratio"), d = r.getAttribute("data-optimumx"), r._lazybgset && r._lazybgset.parentNode == r && r.removeChild(r._lazybgset), Object.defineProperty(i, "_lazybgset", { value: r, writable: !0 }), Object.defineProperty(r, "_lazybgset", { value: s, writable: !0 }), a = a.replace(y, " ").split(b), s.style.display = "none", i.className = g.lazyClass, 1 != a.length || l || (l = "auto"), a.forEach(function (e) { var t, a = z.createElement("source"); l && "auto" != l && a.setAttribute("sizes", l), (t = e.match(f)) ? (a.setAttribute(g.srcsetAttr, t[1]), v(a, t[2]), v(a, t[3])) : a.setAttribute(g.srcsetAttr, e), s.appendChild(a) }), l && (i.setAttribute(g.sizesAttr, l), r.removeAttribute(g.sizesAttr), r.removeAttribute("sizes")), d && i.setAttribute("data-optimumx", d), n && i.setAttribute("data-ratio", n), s.appendChild(i), r.appendChild(s), setTimeout(function () { c.loader.unveil(o), c.rAF(function () { c.fire(o, "_lazyloaded", {}, !0, !0), o.complete && m({ target: o }) }) })) }), z.addEventListener("load", m, !0), e.addEventListener("lazybeforesizes", function (e) { var t, a, r, i; e.detail.instance == c && e.target._lazybgset && e.detail.dataAttr && (t = e.target._lazybgset, r = t, i = (getComputedStyle(r) || { getPropertyValue: function () { } }).getPropertyValue("background-size"), !s[i] && s[r.style.backgroundSize] && (i = r.style.backgroundSize), s[a = i] && (e.target._lazysizesParentFit = a, c.rAF(function () { e.target.setAttribute("data-parent-fit", a), e.target._lazysizesParentFit && delete e.target._lazysizesParentFit }))) }, !0), z.documentElement.addEventListener("lazybeforesizes", function (e) { var t, a; !e.defaultPrevented && e.target._lazybgset && e.detail.instance == c && (e.detail.width = (t = e.target._lazybgset, a = c.gW(t, t.parentNode), (!t._lazysizesWidth || a > t._lazysizesWidth) && (t._lazysizesWidth = a), t._lazysizesWidth)) })) });;

/* /atharva_theme_base/static/lib/js/lazysizes.min.js defined in bundle 'web.assets_frontend_lazy' */
!function (e) { var t = function (u, D, f) { "use strict"; var k, H; if (function () { var e; var t = { lazyClass: "lazyload", loadedClass: "lazyloaded", loadingClass: "lazyloading", preloadClass: "lazypreload", errorClass: "lazyerror", autosizesClass: "lazyautosizes", fastLoadedClass: "ls-is-cached", iframeLoadMode: 0, srcAttr: "data-src", srcsetAttr: "data-srcset", sizesAttr: "data-sizes", minSize: 40, customMedia: {}, init: true, expFactor: 1.5, hFac: .8, loadMode: 2, loadHidden: true, ricTimeout: 0, throttleDelay: 125 }; H = u.lazySizesConfig || u.lazysizesConfig || {}; for (e in t) { if (!(e in H)) { H[e] = t[e] } } }(), !D || !D.getElementsByClassName) { return { init: function () { }, cfg: H, noSupport: true } } var O = D.documentElement, i = u.HTMLPictureElement, P = "addEventListener", $ = "getAttribute", q = u[P].bind(u), I = u.setTimeout, U = u.requestAnimationFrame || I, o = u.requestIdleCallback, j = /^picture$/i, r = ["load", "error", "lazyincluded", "_lazyloaded"], a = {}, G = Array.prototype.forEach, J = function (e, t) { if (!a[t]) { a[t] = new RegExp("(\\s|^)" + t + "(\\s|$)") } return a[t].test(e[$]("class") || "") && a[t] }, K = function (e, t) { if (!J(e, t)) { e.setAttribute("class", (e[$]("class") || "").trim() + " " + t) } }, Q = function (e, t) { var a; if (a = J(e, t)) { e.setAttribute("class", (e[$]("class") || "").replace(a, " ")) } }, V = function (t, a, e) { var i = e ? P : "removeEventListener"; if (e) { V(t, a) } r.forEach(function (e) { t[i](e, a) }) }, X = function (e, t, a, i, r) { var n = D.createEvent("Event"); if (!a) { a = {} } a.instance = k; n.initEvent(t, !i, !r); n.detail = a; e.dispatchEvent(n); return n }, Y = function (e, t) { var a; if (!i && (a = u.picturefill || H.pf)) { if (t && t.src && !e[$]("srcset")) { e.setAttribute("srcset", t.src) } a({ reevaluate: true, elements: [e] }) } else if (t && t.src) { e.src = t.src } }, Z = function (e, t) { return (getComputedStyle(e, null) || {})[t] }, s = function (e, t, a) { a = a || e.offsetWidth; while (a < H.minSize && t && !e._lazysizesWidth) { a = t.offsetWidth; t = t.parentNode } return a }, ee = function () { var a, i; var t = []; var r = []; var n = t; var s = function () { var e = n; n = t.length ? r : t; a = true; i = false; while (e.length) { e.shift()() } a = false }; var e = function (e, t) { if (a && !t) { e.apply(this, arguments) } else { n.push(e); if (!i) { i = true; (D.hidden ? I : U)(s) } } }; e._lsFlush = s; return e }(), te = function (a, e) { return e ? function () { ee(a) } : function () { var e = this; var t = arguments; ee(function () { a.apply(e, t) }) } }, ae = function (e) { var a; var i = 0; var r = H.throttleDelay; var n = H.ricTimeout; var t = function () { a = false; i = f.now(); e() }; var s = o && n > 49 ? function () { o(t, { timeout: n }); if (n !== H.ricTimeout) { n = H.ricTimeout } } : te(function () { I(t) }, true); return function (e) { var t; if (e = e === true) { n = 33 } if (a) { return } a = true; t = r - (f.now() - i); if (t < 0) { t = 0 } if (e || t < 9) { s() } else { I(s, t) } } }, ie = function (e) { var t, a; var i = 99; var r = function () { t = null; e() }; var n = function () { var e = f.now() - a; if (e < i) { I(n, i - e) } else { (o || r)(r) } }; return function () { a = f.now(); if (!t) { t = I(n, i) } } }, e = function () { var v, m, c, h, e; var y, z, g, p, C, b, A; var n = /^img$/i; var d = /^iframe$/i; var E = "onscroll" in u && !/(gle|ing)bot/.test(navigator.userAgent); var _ = 0; var w = 0; var M = 0; var N = -1; var L = function (e) { M--; if (!e || M < 0 || !e.target) { M = 0 } }; var x = function (e) { if (A == null) { A = Z(D.body, "visibility") == "hidden" } return A || !(Z(e.parentNode, "visibility") == "hidden" && Z(e, "visibility") == "hidden") }; var W = function (e, t) { var a; var i = e; var r = x(e); g -= t; b += t; p -= t; C += t; while (r && (i = i.offsetParent) && i != D.body && i != O) { r = (Z(i, "opacity") || 1) > 0; if (r && Z(i, "overflow") != "visible") { a = i.getBoundingClientRect(); r = C > a.left && p < a.right && b > a.top - 1 && g < a.bottom + 1 } } return r }; var t = function () { var e, t, a, i, r, n, s, o, l, u, f, c; var d = k.elements; if ((h = H.loadMode) && M < 8 && (e = d.length)) { t = 0; N++; for (; t < e; t++) { if (!d[t] || d[t]._lazyRace) { continue } if (!E || k.prematureUnveil && k.prematureUnveil(d[t])) { R(d[t]); continue } if (!(o = d[t][$]("data-expand")) || !(n = o * 1)) { n = w } if (!u) { u = !H.expand || H.expand < 1 ? O.clientHeight > 500 && O.clientWidth > 500 ? 500 : 370 : H.expand; k._defEx = u; f = u * H.expFactor; c = H.hFac; A = null; if (w < f && M < 1 && N > 2 && h > 2 && !D.hidden) { w = f; N = 0 } else if (h > 1 && N > 1 && M < 6) { w = u } else { w = _ } } if (l !== n) { y = innerWidth + n * c; z = innerHeight + n; s = n * -1; l = n } a = d[t].getBoundingClientRect(); if ((b = a.bottom) >= s && (g = a.top) <= z && (C = a.right) >= s * c && (p = a.left) <= y && (b || C || p || g) && (H.loadHidden || x(d[t])) && (m && M < 3 && !o && (h < 3 || N < 4) || W(d[t], n))) { R(d[t]); r = true; if (M > 9) { break } } else if (!r && m && !i && M < 4 && N < 4 && h > 2 && (v[0] || H.preloadAfterLoad) && (v[0] || !o && (b || C || p || g || d[t][$](H.sizesAttr) != "auto"))) { i = v[0] || d[t] } } if (i && !r) { R(i) } } }; var a = ae(t); var S = function (e) { var t = e.target; if (t._lazyCache) { delete t._lazyCache; return } L(e); K(t, H.loadedClass); Q(t, H.loadingClass); V(t, B); X(t, "lazyloaded") }; var i = te(S); var B = function (e) { i({ target: e.target }) }; var T = function (e, t) { var a = e.getAttribute("data-load-mode") || H.iframeLoadMode; if (a == 0) { e.contentWindow.location.replace(t) } else if (a == 1) { e.src = t } }; var F = function (e) { var t; var a = e[$](H.srcsetAttr); if (t = H.customMedia[e[$]("data-media") || e[$]("media")]) { e.setAttribute("media", t) } if (a) { e.setAttribute("srcset", a) } }; var s = te(function (t, e, a, i, r) { var n, s, o, l, u, f; if (!(u = X(t, "lazybeforeunveil", e)).defaultPrevented) { if (i) { if (a) { K(t, H.autosizesClass) } else { t.setAttribute("sizes", i) } } s = t[$](H.srcsetAttr); n = t[$](H.srcAttr); if (r) { o = t.parentNode; l = o && j.test(o.nodeName || "") } f = e.firesLoad || "src" in t && (s || n || l); u = { target: t }; K(t, H.loadingClass); if (f) { clearTimeout(c); c = I(L, 2500); V(t, B, true) } if (l) { G.call(o.getElementsByTagName("source"), F) } if (s) { t.setAttribute("srcset", s) } else if (n && !l) { if (d.test(t.nodeName)) { T(t, n) } else { t.src = n } } if (r && (s || l)) { Y(t, { src: n }) } } if (t._lazyRace) { delete t._lazyRace } Q(t, H.lazyClass); ee(function () { var e = t.complete && t.naturalWidth > 1; if (!f || e) { if (e) { K(t, H.fastLoadedClass) } S(u); t._lazyCache = true; I(function () { if ("_lazyCache" in t) { delete t._lazyCache } }, 9) } if (t.loading == "lazy") { M-- } }, true) }); var R = function (e) { if (e._lazyRace) { return } var t; var a = n.test(e.nodeName); var i = a && (e[$](H.sizesAttr) || e[$]("sizes")); var r = i == "auto"; if ((r || !m) && a && (e[$]("src") || e.srcset) && !e.complete && !J(e, H.errorClass) && J(e, H.lazyClass)) { return } t = X(e, "lazyunveilread").detail; if (r) { re.updateElem(e, true, e.offsetWidth) } e._lazyRace = true; M++; s(e, t, r, i, a) }; var r = ie(function () { H.loadMode = 3; a() }); var o = function () { if (H.loadMode == 3) { H.loadMode = 2 } r() }; var l = function () { if (m) { return } if (f.now() - e < 999) { I(l, 999); return } m = true; H.loadMode = 3; a(); q("scroll", o, true) }; return { _: function () { e = f.now(); k.elements = D.getElementsByClassName(H.lazyClass); v = D.getElementsByClassName(H.lazyClass + " " + H.preloadClass); q("scroll", a, true); q("resize", a, true); q("pageshow", function (e) { if (e.persisted) { var t = D.querySelectorAll("." + H.loadingClass); if (t.length && t.forEach) { U(function () { t.forEach(function (e) { if (e.complete) { R(e) } }) }) } } }); if (u.MutationObserver) { new MutationObserver(a).observe(O, { childList: true, subtree: true, attributes: true }) } else { O[P]("DOMNodeInserted", a, true); O[P]("DOMAttrModified", a, true); setInterval(a, 999) } q("hashchange", a, true);["focus", "mouseover", "click", "load", "transitionend", "animationend"].forEach(function (e) { D[P](e, a, true) }); if (/d$|^c/.test(D.readyState)) { l() } else { q("load", l); D[P]("DOMContentLoaded", a); I(l, 2e4) } if (k.elements.length) { t(); ee._lsFlush() } else { a() } }, checkElems: a, unveil: R, _aLSL: o } }(), re = function () { var a; var n = te(function (e, t, a, i) { var r, n, s; e._lazysizesWidth = i; i += "px"; e.setAttribute("sizes", i); if (j.test(t.nodeName || "")) { r = t.getElementsByTagName("source"); for (n = 0, s = r.length; n < s; n++) { r[n].setAttribute("sizes", i) } } if (!a.detail.dataAttr) { Y(e, a.detail) } }); var i = function (e, t, a) { var i; var r = e.parentNode; if (r) { a = s(e, r, a); i = X(e, "lazybeforesizes", { width: a, dataAttr: !!t }); if (!i.defaultPrevented) { a = i.detail.width; if (a && a !== e._lazysizesWidth) { n(e, r, i, a) } } } }; var e = function () { var e; var t = a.length; if (t) { e = 0; for (; e < t; e++) { i(a[e]) } } }; var t = ie(e); return { _: function () { a = D.getElementsByClassName(H.autosizesClass); q("resize", t) }, checkElems: t, updateElem: i } }(), t = function () { if (!t.i && D.getElementsByClassName) { t.i = true; re._(); e._() } }; return I(function () { H.init && t() }), k = { cfg: H, autoSizer: re, loader: e, init: t, uP: Y, aC: K, rC: Q, hC: J, fire: X, gW: s, rAF: ee } }(e, e.document, Date); e.lazySizes = t, "object" == typeof module && module.exports && (module.exports = t) }("undefined" != typeof window ? window : {});;

/* /atharva_theme_base/static/lib/js/slick.min.js defined in bundle 'web.assets_frontend_lazy' */
(function (i) { "use strict"; "function" == typeof define && define.amd ? define(["jquery"], i) : "undefined" != typeof exports ? module.exports = i(require("jquery")) : i(jQuery) })(function (i) { "use strict"; var e = window.Slick || {}; e = function () { function e(e, o) { var s, n = this; n.defaults = { accessibility: !0, adaptiveHeight: !1, appendArrows: i(e), appendDots: i(e), arrows: !0, asNavFor: null, prevArrow: '<button class="slick-prev" aria-label="Previous" type="button">Previous</button>', nextArrow: '<button class="slick-next" aria-label="Next" type="button">Next</button>', autoplay: !1, autoplaySpeed: 3e3, centerMode: !1, centerPadding: "50px", cssEase: "ease", customPaging: function (e, t) { return i('<button type="button" />').text(t + 1) }, dots: !1, dotsClass: "slick-dots", draggable: !0, easing: "linear", edgeFriction: .35, fade: !1, focusOnSelect: !1, focusOnChange: !1, infinite: !0, initialSlide: 0, lazyLoad: "ondemand", mobileFirst: !1, pauseOnHover: !0, pauseOnFocus: !0, pauseOnDotsHover: !1, respondTo: "window", responsive: null, rows: 1, rtl: !1, slide: "", slidesPerRow: 1, slidesToShow: 1, slidesToScroll: 1, speed: 500, swipe: !0, swipeToSlide: !1, touchMove: !0, touchThreshold: 5, useCSS: !0, useTransform: !0, variableWidth: !1, vertical: !1, verticalSwiping: !1, waitForAnimate: !0, zIndex: 1e3 }, n.initials = { animating: !1, dragging: !1, autoPlayTimer: null, currentDirection: 0, currentLeft: null, currentSlide: 0, direction: 1, $dots: null, listWidth: null, listHeight: null, loadIndex: 0, $nextArrow: null, $prevArrow: null, scrolling: !1, slideCount: null, slideWidth: null, $slideTrack: null, $slides: null, sliding: !1, slideOffset: 0, swipeLeft: null, swiping: !1, $list: null, touchObject: {}, transformsEnabled: !1, unslicked: !1 }, i.extend(n, n.initials), n.activeBreakpoint = null, n.animType = null, n.animProp = null, n.breakpoints = [], n.breakpointSettings = [], n.cssTransitions = !1, n.focussed = !1, n.interrupted = !1, n.hidden = "hidden", n.paused = !0, n.positionProp = null, n.respondTo = null, n.rowCount = 1, n.shouldClick = !0, n.$slider = i(e), n.$slidesCache = null, n.transformType = null, n.transitionType = null, n.visibilityChange = "visibilitychange", n.windowWidth = 0, n.windowTimer = null, s = i(e).data("slick") || {}, n.options = i.extend({}, n.defaults, o, s), n.currentSlide = n.options.initialSlide, n.originalSettings = n.options, "undefined" != typeof document.mozHidden ? (n.hidden = "mozHidden", n.visibilityChange = "mozvisibilitychange") : "undefined" != typeof document.webkitHidden && (n.hidden = "webkitHidden", n.visibilityChange = "webkitvisibilitychange"), n.autoPlay = i.proxy(n.autoPlay, n), n.autoPlayClear = i.proxy(n.autoPlayClear, n), n.autoPlayIterator = i.proxy(n.autoPlayIterator, n), n.changeSlide = i.proxy(n.changeSlide, n), n.clickHandler = i.proxy(n.clickHandler, n), n.selectHandler = i.proxy(n.selectHandler, n), n.setPosition = i.proxy(n.setPosition, n), n.swipeHandler = i.proxy(n.swipeHandler, n), n.dragHandler = i.proxy(n.dragHandler, n), n.keyHandler = i.proxy(n.keyHandler, n), n.instanceUid = t++, n.htmlExpr = /^(?:\s*(<[\w\W]+>)[^>]*)$/, n.registerBreakpoints(), n.init(!0) } var t = 0; return e }(), e.prototype.activateADA = function () { var i = this; i.$slideTrack.find(".slick-active").attr({ "aria-hidden": "false" }).find("a, input, button, select").attr({ tabindex: "0" }) }, e.prototype.addSlide = e.prototype.slickAdd = function (e, t, o) { var s = this; if ("boolean" == typeof t) o = t, t = null; else if (t < 0 || t >= s.slideCount) return !1; s.unload(), "number" == typeof t ? 0 === t && 0 === s.$slides.length ? i(e).appendTo(s.$slideTrack) : o ? i(e).insertBefore(s.$slides.eq(t)) : i(e).insertAfter(s.$slides.eq(t)) : o === !0 ? i(e).prependTo(s.$slideTrack) : i(e).appendTo(s.$slideTrack), s.$slides = s.$slideTrack.children(this.options.slide), s.$slideTrack.children(this.options.slide).detach(), s.$slideTrack.append(s.$slides), s.$slides.each(function (e, t) { i(t).attr("data-slick-index", e) }), s.$slidesCache = s.$slides, s.reinit() }, e.prototype.animateHeight = function () { var i = this; if (1 === i.options.slidesToShow && i.options.adaptiveHeight === !0 && i.options.vertical === !1) { var e = i.$slides.eq(i.currentSlide).outerHeight(!0); i.$list.animate({ height: e }, i.options.speed) } }, e.prototype.animateSlide = function (e, t) { var o = {}, s = this; s.animateHeight(), s.options.rtl === !0 && s.options.vertical === !1 && (e = -e), s.transformsEnabled === !1 ? s.options.vertical === !1 ? s.$slideTrack.animate({ left: e }, s.options.speed, s.options.easing, t) : s.$slideTrack.animate({ top: e }, s.options.speed, s.options.easing, t) : s.cssTransitions === !1 ? (s.options.rtl === !0 && (s.currentLeft = -s.currentLeft), i({ animStart: s.currentLeft }).animate({ animStart: e }, { duration: s.options.speed, easing: s.options.easing, step: function (i) { i = Math.ceil(i), s.options.vertical === !1 ? (o[s.animType] = "translate(" + i + "px, 0px)", s.$slideTrack.css(o)) : (o[s.animType] = "translate(0px," + i + "px)", s.$slideTrack.css(o)) }, complete: function () { t && t.call() } })) : (s.applyTransition(), e = Math.ceil(e), s.options.vertical === !1 ? o[s.animType] = "translate3d(" + e + "px, 0px, 0px)" : o[s.animType] = "translate3d(0px," + e + "px, 0px)", s.$slideTrack.css(o), t && setTimeout(function () { s.disableTransition(), t.call() }, s.options.speed)) }, e.prototype.getNavTarget = function () { var e = this, t = e.options.asNavFor; return t && null !== t && (t = i(t).not(e.$slider)), t }, e.prototype.asNavFor = function (e) { var t = this, o = t.getNavTarget(); null !== o && "object" == typeof o && o.each(function () { var t = i(this).slick("getSlick"); t.unslicked || t.slideHandler(e, !0) }) }, e.prototype.applyTransition = function (i) { var e = this, t = {}; e.options.fade === !1 ? t[e.transitionType] = e.transformType + " " + e.options.speed + "ms " + e.options.cssEase : t[e.transitionType] = "opacity " + e.options.speed + "ms " + e.options.cssEase, e.options.fade === !1 ? e.$slideTrack.css(t) : e.$slides.eq(i).css(t) }, e.prototype.autoPlay = function () { var i = this; i.autoPlayClear(), i.slideCount > i.options.slidesToShow && (i.autoPlayTimer = setInterval(i.autoPlayIterator, i.options.autoplaySpeed)) }, e.prototype.autoPlayClear = function () { var i = this; i.autoPlayTimer && clearInterval(i.autoPlayTimer) }, e.prototype.autoPlayIterator = function () { var i = this, e = i.currentSlide + i.options.slidesToScroll; i.paused || i.interrupted || i.focussed || (i.options.infinite === !1 && (1 === i.direction && i.currentSlide + 1 === i.slideCount - 1 ? i.direction = 0 : 0 === i.direction && (e = i.currentSlide - i.options.slidesToScroll, i.currentSlide - 1 === 0 && (i.direction = 1))), i.slideHandler(e)) }, e.prototype.buildArrows = function () { var e = this; e.options.arrows === !0 && (e.$prevArrow = i(e.options.prevArrow).addClass("slick-arrow"), e.$nextArrow = i(e.options.nextArrow).addClass("slick-arrow"), e.slideCount > e.options.slidesToShow ? (e.$prevArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"), e.$nextArrow.removeClass("slick-hidden").removeAttr("aria-hidden tabindex"), e.htmlExpr.test(e.options.prevArrow) && e.$prevArrow.prependTo(e.options.appendArrows), e.htmlExpr.test(e.options.nextArrow) && e.$nextArrow.appendTo(e.options.appendArrows), e.options.infinite !== !0 && e.$prevArrow.addClass("slick-disabled").attr("aria-disabled", "true")) : e.$prevArrow.add(e.$nextArrow).addClass("slick-hidden").attr({ "aria-disabled": "true", tabindex: "-1" })) }, e.prototype.buildDots = function () { var e, t, o = this; if (o.options.dots === !0 && o.slideCount > o.options.slidesToShow) { for (o.$slider.addClass("slick-dotted"), t = i("<ul />").addClass(o.options.dotsClass), e = 0; e <= o.getDotCount(); e += 1)t.append(i("<li />").append(o.options.customPaging.call(this, o, e))); o.$dots = t.appendTo(o.options.appendDots), o.$dots.find("li").first().addClass("slick-active") } }, e.prototype.buildOut = function () { var e = this; e.$slides = e.$slider.children(e.options.slide + ":not(.slick-cloned)").addClass("slick-slide"), e.slideCount = e.$slides.length, e.$slides.each(function (e, t) { i(t).attr("data-slick-index", e).data("originalStyling", i(t).attr("style") || "") }), e.$slider.addClass("slick-slider"), e.$slideTrack = 0 === e.slideCount ? i('<div class="slick-track"/>').appendTo(e.$slider) : e.$slides.wrapAll('<div class="slick-track"/>').parent(), e.$list = e.$slideTrack.wrap('<div class="slick-list"/>').parent(), e.$slideTrack.css("opacity", 0), e.options.centerMode !== !0 && e.options.swipeToSlide !== !0 || (e.options.slidesToScroll = 1), i("img[data-lazy]", e.$slider).not("[src]").addClass("slick-loading"), e.setupInfinite(), e.buildArrows(), e.buildDots(), e.updateDots(), e.setSlideClasses("number" == typeof e.currentSlide ? e.currentSlide : 0), e.options.draggable === !0 && e.$list.addClass("draggable") }, e.prototype.buildRows = function () { var i, e, t, o, s, n, r, l = this; if (o = document.createDocumentFragment(), n = l.$slider.children(), l.options.rows > 0) { for (r = l.options.slidesPerRow * l.options.rows, s = Math.ceil(n.length / r), i = 0; i < s; i++) { var d = document.createElement("div"); for (e = 0; e < l.options.rows; e++) { var a = document.createElement("div"); for (t = 0; t < l.options.slidesPerRow; t++) { var c = i * r + (e * l.options.slidesPerRow + t); n.get(c) && a.appendChild(n.get(c)) } d.appendChild(a) } o.appendChild(d) } l.$slider.empty().append(o), l.$slider.children().children().children().css({ width: 100 / l.options.slidesPerRow + "%", display: "inline-block" }) } }, e.prototype.checkResponsive = function (e, t) { var o, s, n, r = this, l = !1, d = r.$slider.width(), a = window.innerWidth || i(window).width(); if ("window" === r.respondTo ? n = a : "slider" === r.respondTo ? n = d : "min" === r.respondTo && (n = Math.min(a, d)), r.options.responsive && r.options.responsive.length && null !== r.options.responsive) { s = null; for (o in r.breakpoints) r.breakpoints.hasOwnProperty(o) && (r.originalSettings.mobileFirst === !1 ? n < r.breakpoints[o] && (s = r.breakpoints[o]) : n > r.breakpoints[o] && (s = r.breakpoints[o])); null !== s ? null !== r.activeBreakpoint ? (s !== r.activeBreakpoint || t) && (r.activeBreakpoint = s, "unslick" === r.breakpointSettings[s] ? r.unslick(s) : (r.options = i.extend({}, r.originalSettings, r.breakpointSettings[s]), e === !0 && (r.currentSlide = r.options.initialSlide), r.refresh(e)), l = s) : (r.activeBreakpoint = s, "unslick" === r.breakpointSettings[s] ? r.unslick(s) : (r.options = i.extend({}, r.originalSettings, r.breakpointSettings[s]), e === !0 && (r.currentSlide = r.options.initialSlide), r.refresh(e)), l = s) : null !== r.activeBreakpoint && (r.activeBreakpoint = null, r.options = r.originalSettings, e === !0 && (r.currentSlide = r.options.initialSlide), r.refresh(e), l = s), e || l === !1 || r.$slider.trigger("breakpoint", [r, l]) } }, e.prototype.changeSlide = function (e, t) { var o, s, n, r = this, l = i(e.currentTarget); switch (l.is("a") && e.preventDefault(), l.is("li") || (l = l.closest("li")), n = r.slideCount % r.options.slidesToScroll !== 0, o = n ? 0 : (r.slideCount - r.currentSlide) % r.options.slidesToScroll, e.data.message) { case "previous": s = 0 === o ? r.options.slidesToScroll : r.options.slidesToShow - o, r.slideCount > r.options.slidesToShow && r.slideHandler(r.currentSlide - s, !1, t); break; case "next": s = 0 === o ? r.options.slidesToScroll : o, r.slideCount > r.options.slidesToShow && r.slideHandler(r.currentSlide + s, !1, t); break; case "index": var d = 0 === e.data.index ? 0 : e.data.index || l.index() * r.options.slidesToScroll; r.slideHandler(r.checkNavigable(d), !1, t), l.children().trigger("focus"); break; default: return } }, e.prototype.checkNavigable = function (i) { var e, t, o = this; if (e = o.getNavigableIndexes(), t = 0, i > e[e.length - 1]) i = e[e.length - 1]; else for (var s in e) { if (i < e[s]) { i = t; break } t = e[s] } return i }, e.prototype.cleanUpEvents = function () { var e = this; e.options.dots && null !== e.$dots && (i("li", e.$dots).off("click.slick", e.changeSlide).off("mouseenter.slick", i.proxy(e.interrupt, e, !0)).off("mouseleave.slick", i.proxy(e.interrupt, e, !1)), e.options.accessibility === !0 && e.$dots.off("keydown.slick", e.keyHandler)), e.$slider.off("focus.slick blur.slick"), e.options.arrows === !0 && e.slideCount > e.options.slidesToShow && (e.$prevArrow && e.$prevArrow.off("click.slick", e.changeSlide), e.$nextArrow && e.$nextArrow.off("click.slick", e.changeSlide), e.options.accessibility === !0 && (e.$prevArrow && e.$prevArrow.off("keydown.slick", e.keyHandler), e.$nextArrow && e.$nextArrow.off("keydown.slick", e.keyHandler))), e.$list.off("touchstart.slick mousedown.slick", e.swipeHandler), e.$list.off("touchmove.slick mousemove.slick", e.swipeHandler), e.$list.off("touchend.slick mouseup.slick", e.swipeHandler), e.$list.off("touchcancel.slick mouseleave.slick", e.swipeHandler), e.$list.off("click.slick", e.clickHandler), i(document).off(e.visibilityChange, e.visibility), e.cleanUpSlideEvents(), e.options.accessibility === !0 && e.$list.off("keydown.slick", e.keyHandler), e.options.focusOnSelect === !0 && i(e.$slideTrack).children().off("click.slick", e.selectHandler), i(window).off("orientationchange.slick.slick-" + e.instanceUid, e.orientationChange), i(window).off("resize.slick.slick-" + e.instanceUid, e.resize), i("[draggable!=true]", e.$slideTrack).off("dragstart", e.preventDefault), i(window).off("load.slick.slick-" + e.instanceUid, e.setPosition) }, e.prototype.cleanUpSlideEvents = function () { var e = this; e.$list.off("mouseenter.slick", i.proxy(e.interrupt, e, !0)), e.$list.off("mouseleave.slick", i.proxy(e.interrupt, e, !1)) }, e.prototype.cleanUpRows = function () { var i, e = this; e.options.rows > 0 && (i = e.$slides.children().children(), i.removeAttr("style"), e.$slider.empty().append(i)) }, e.prototype.clickHandler = function (i) { var e = this; e.shouldClick === !1 && (i.stopImmediatePropagation(), i.stopPropagation(), i.preventDefault()) }, e.prototype.destroy = function (e) { var t = this; t.autoPlayClear(), t.touchObject = {}, t.cleanUpEvents(), i(".slick-cloned", t.$slider).detach(), t.$dots && t.$dots.remove(), t.$prevArrow && t.$prevArrow.length && (t.$prevArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display", ""), t.htmlExpr.test(t.options.prevArrow) && t.$prevArrow.remove()), t.$nextArrow && t.$nextArrow.length && (t.$nextArrow.removeClass("slick-disabled slick-arrow slick-hidden").removeAttr("aria-hidden aria-disabled tabindex").css("display", ""), t.htmlExpr.test(t.options.nextArrow) && t.$nextArrow.remove()), t.$slides && (t.$slides.removeClass("slick-slide slick-active slick-center slick-visible slick-current").removeAttr("aria-hidden").removeAttr("data-slick-index").each(function () { i(this).attr("style", i(this).data("originalStyling")) }), t.$slideTrack.children(this.options.slide).detach(), t.$slideTrack.detach(), t.$list.detach(), t.$slider.append(t.$slides)), t.cleanUpRows(), t.$slider.removeClass("slick-slider"), t.$slider.removeClass("slick-initialized"), t.$slider.removeClass("slick-dotted"), t.unslicked = !0, e || t.$slider.trigger("destroy", [t]) }, e.prototype.disableTransition = function (i) { var e = this, t = {}; t[e.transitionType] = "", e.options.fade === !1 ? e.$slideTrack.css(t) : e.$slides.eq(i).css(t) }, e.prototype.fadeSlide = function (i, e) { var t = this; t.cssTransitions === !1 ? (t.$slides.eq(i).css({ zIndex: t.options.zIndex }), t.$slides.eq(i).animate({ opacity: 1 }, t.options.speed, t.options.easing, e)) : (t.applyTransition(i), t.$slides.eq(i).css({ opacity: 1, zIndex: t.options.zIndex }), e && setTimeout(function () { t.disableTransition(i), e.call() }, t.options.speed)) }, e.prototype.fadeSlideOut = function (i) { var e = this; e.cssTransitions === !1 ? e.$slides.eq(i).animate({ opacity: 0, zIndex: e.options.zIndex - 2 }, e.options.speed, e.options.easing) : (e.applyTransition(i), e.$slides.eq(i).css({ opacity: 0, zIndex: e.options.zIndex - 2 })) }, e.prototype.filterSlides = e.prototype.slickFilter = function (i) { var e = this; null !== i && (e.$slidesCache = e.$slides, e.unload(), e.$slideTrack.children(this.options.slide).detach(), e.$slidesCache.filter(i).appendTo(e.$slideTrack), e.reinit()) }, e.prototype.focusHandler = function () { var e = this; e.$slider.off("focus.slick blur.slick").on("focus.slick", "*", function (t) { var o = i(this); setTimeout(function () { e.options.pauseOnFocus && o.is(":focus") && (e.focussed = !0, e.autoPlay()) }, 0) }).on("blur.slick", "*", function (t) { i(this); e.options.pauseOnFocus && (e.focussed = !1, e.autoPlay()) }) }, e.prototype.getCurrent = e.prototype.slickCurrentSlide = function () { var i = this; return i.currentSlide }, e.prototype.getDotCount = function () { var i = this, e = 0, t = 0, o = 0; if (i.options.infinite === !0) if (i.slideCount <= i.options.slidesToShow) ++o; else for (; e < i.slideCount;)++o, e = t + i.options.slidesToScroll, t += i.options.slidesToScroll <= i.options.slidesToShow ? i.options.slidesToScroll : i.options.slidesToShow; else if (i.options.centerMode === !0) o = i.slideCount; else if (i.options.asNavFor) for (; e < i.slideCount;)++o, e = t + i.options.slidesToScroll, t += i.options.slidesToScroll <= i.options.slidesToShow ? i.options.slidesToScroll : i.options.slidesToShow; else o = 1 + Math.ceil((i.slideCount - i.options.slidesToShow) / i.options.slidesToScroll); return o - 1 }, e.prototype.getLeft = function (i) { var e, t, o, s, n = this, r = 0; return n.slideOffset = 0, t = n.$slides.first().outerHeight(!0), n.options.infinite === !0 ? (n.slideCount > n.options.slidesToShow && (n.slideOffset = n.slideWidth * n.options.slidesToShow * -1, s = -1, n.options.vertical === !0 && n.options.centerMode === !0 && (2 === n.options.slidesToShow ? s = -1.5 : 1 === n.options.slidesToShow && (s = -2)), r = t * n.options.slidesToShow * s), n.slideCount % n.options.slidesToScroll !== 0 && i + n.options.slidesToScroll > n.slideCount && n.slideCount > n.options.slidesToShow && (i > n.slideCount ? (n.slideOffset = (n.options.slidesToShow - (i - n.slideCount)) * n.slideWidth * -1, r = (n.options.slidesToShow - (i - n.slideCount)) * t * -1) : (n.slideOffset = n.slideCount % n.options.slidesToScroll * n.slideWidth * -1, r = n.slideCount % n.options.slidesToScroll * t * -1))) : i + n.options.slidesToShow > n.slideCount && (n.slideOffset = (i + n.options.slidesToShow - n.slideCount) * n.slideWidth, r = (i + n.options.slidesToShow - n.slideCount) * t), n.slideCount <= n.options.slidesToShow && (n.slideOffset = 0, r = 0), n.options.centerMode === !0 && n.slideCount <= n.options.slidesToShow ? n.slideOffset = n.slideWidth * Math.floor(n.options.slidesToShow) / 2 - n.slideWidth * n.slideCount / 2 : n.options.centerMode === !0 && n.options.infinite === !0 ? n.slideOffset += n.slideWidth * Math.floor(n.options.slidesToShow / 2) - n.slideWidth : n.options.centerMode === !0 && (n.slideOffset = 0, n.slideOffset += n.slideWidth * Math.floor(n.options.slidesToShow / 2)), e = n.options.vertical === !1 ? i * n.slideWidth * -1 + n.slideOffset : i * t * -1 + r, n.options.variableWidth === !0 && (o = n.slideCount <= n.options.slidesToShow || n.options.infinite === !1 ? n.$slideTrack.children(".slick-slide").eq(i) : n.$slideTrack.children(".slick-slide").eq(i + n.options.slidesToShow), e = n.options.rtl === !0 ? o[0] ? (n.$slideTrack.width() - o[0].offsetLeft - o.width()) * -1 : 0 : o[0] ? o[0].offsetLeft * -1 : 0, n.options.centerMode === !0 && (o = n.slideCount <= n.options.slidesToShow || n.options.infinite === !1 ? n.$slideTrack.children(".slick-slide").eq(i) : n.$slideTrack.children(".slick-slide").eq(i + n.options.slidesToShow + 1), e = n.options.rtl === !0 ? o[0] ? (n.$slideTrack.width() - o[0].offsetLeft - o.width()) * -1 : 0 : o[0] ? o[0].offsetLeft * -1 : 0, e += (n.$list.width() - o.outerWidth()) / 2)), e }, e.prototype.getOption = e.prototype.slickGetOption = function (i) { var e = this; return e.options[i] }, e.prototype.getNavigableIndexes = function () { var i, e = this, t = 0, o = 0, s = []; for (e.options.infinite === !1 ? i = e.slideCount : (t = e.options.slidesToScroll * -1, o = e.options.slidesToScroll * -1, i = 2 * e.slideCount); t < i;)s.push(t), t = o + e.options.slidesToScroll, o += e.options.slidesToScroll <= e.options.slidesToShow ? e.options.slidesToScroll : e.options.slidesToShow; return s }, e.prototype.getSlick = function () { return this }, e.prototype.getSlideCount = function () { var e, t, o, s, n = this; return s = n.options.centerMode === !0 ? Math.floor(n.$list.width() / 2) : 0, o = n.swipeLeft * -1 + s, n.options.swipeToSlide === !0 ? (n.$slideTrack.find(".slick-slide").each(function (e, s) { var r, l, d; if (r = i(s).outerWidth(), l = s.offsetLeft, n.options.centerMode !== !0 && (l += r / 2), d = l + r, o < d) return t = s, !1 }), e = Math.abs(i(t).attr("data-slick-index") - n.currentSlide) || 1) : n.options.slidesToScroll }, e.prototype.goTo = e.prototype.slickGoTo = function (i, e) { var t = this; t.changeSlide({ data: { message: "index", index: parseInt(i) } }, e) }, e.prototype.init = function (e) { var t = this; i(t.$slider).hasClass("slick-initialized") || (i(t.$slider).addClass("slick-initialized"), t.buildRows(), t.buildOut(), t.setProps(), t.startLoad(), t.loadSlider(), t.initializeEvents(), t.updateArrows(), t.updateDots(), t.checkResponsive(!0), t.focusHandler()), e && t.$slider.trigger("init", [t]), t.options.accessibility === !0 && t.initADA(), t.options.autoplay && (t.paused = !1, t.autoPlay()) }, e.prototype.initADA = function () { var e = this, t = Math.ceil(e.slideCount / e.options.slidesToShow), o = e.getNavigableIndexes().filter(function (i) { return i >= 0 && i < e.slideCount }); e.$slides.add(e.$slideTrack.find(".slick-cloned")).attr({ "aria-hidden": "true", tabindex: "-1" }).find("a, input, button, select").attr({ tabindex: "-1" }), null !== e.$dots && (e.$slides.not(e.$slideTrack.find(".slick-cloned")).each(function (t) { var s = o.indexOf(t); if (i(this).attr({ role: "tabpanel", id: "slick-slide" + e.instanceUid + t, tabindex: -1 }), s !== -1) { var n = "slick-slide-control" + e.instanceUid + s; i("#" + n).length && i(this).attr({ "aria-describedby": n }) } }), e.$dots.attr("role", "tablist").find("li").each(function (s) { var n = o[s]; i(this).attr({ role: "presentation" }), i(this).find("button").first().attr({ role: "tab", id: "slick-slide-control" + e.instanceUid + s, "aria-controls": "slick-slide" + e.instanceUid + n, "aria-label": s + 1 + " of " + t, "aria-selected": null, tabindex: "-1" }) }).eq(e.currentSlide).find("button").attr({ "aria-selected": "true", tabindex: "0" }).end()); for (var s = e.currentSlide, n = s + e.options.slidesToShow; s < n; s++)e.options.focusOnChange ? e.$slides.eq(s).attr({ tabindex: "0" }) : e.$slides.eq(s).removeAttr("tabindex"); e.activateADA() }, e.prototype.initArrowEvents = function () { var i = this; i.options.arrows === !0 && i.slideCount > i.options.slidesToShow && (i.$prevArrow.off("click.slick").on("click.slick", { message: "previous" }, i.changeSlide), i.$nextArrow.off("click.slick").on("click.slick", { message: "next" }, i.changeSlide), i.options.accessibility === !0 && (i.$prevArrow.on("keydown.slick", i.keyHandler), i.$nextArrow.on("keydown.slick", i.keyHandler))) }, e.prototype.initDotEvents = function () { var e = this; e.options.dots === !0 && e.slideCount > e.options.slidesToShow && (i("li", e.$dots).on("click.slick", { message: "index" }, e.changeSlide), e.options.accessibility === !0 && e.$dots.on("keydown.slick", e.keyHandler)), e.options.dots === !0 && e.options.pauseOnDotsHover === !0 && e.slideCount > e.options.slidesToShow && i("li", e.$dots).on("mouseenter.slick", i.proxy(e.interrupt, e, !0)).on("mouseleave.slick", i.proxy(e.interrupt, e, !1)) }, e.prototype.initSlideEvents = function () { var e = this; e.options.pauseOnHover && (e.$list.on("mouseenter.slick", i.proxy(e.interrupt, e, !0)), e.$list.on("mouseleave.slick", i.proxy(e.interrupt, e, !1))) }, e.prototype.initializeEvents = function () { var e = this; e.initArrowEvents(), e.initDotEvents(), e.initSlideEvents(), e.$list.on("touchstart.slick mousedown.slick", { action: "start" }, e.swipeHandler), e.$list.on("touchmove.slick mousemove.slick", { action: "move" }, e.swipeHandler), e.$list.on("touchend.slick mouseup.slick", { action: "end" }, e.swipeHandler), e.$list.on("touchcancel.slick mouseleave.slick", { action: "end" }, e.swipeHandler), e.$list.on("click.slick", e.clickHandler), i(document).on(e.visibilityChange, i.proxy(e.visibility, e)), e.options.accessibility === !0 && e.$list.on("keydown.slick", e.keyHandler), e.options.focusOnSelect === !0 && i(e.$slideTrack).children().on("click.slick", e.selectHandler), i(window).on("orientationchange.slick.slick-" + e.instanceUid, i.proxy(e.orientationChange, e)), i(window).on("resize.slick.slick-" + e.instanceUid, i.proxy(e.resize, e)), i("[draggable!=true]", e.$slideTrack).on("dragstart", e.preventDefault), i(window).on("load.slick.slick-" + e.instanceUid, e.setPosition), i(e.setPosition) }, e.prototype.initUI = function () { var i = this; i.options.arrows === !0 && i.slideCount > i.options.slidesToShow && (i.$prevArrow.show(), i.$nextArrow.show()), i.options.dots === !0 && i.slideCount > i.options.slidesToShow && i.$dots.show() }, e.prototype.keyHandler = function (i) { var e = this; i.target.tagName.match("TEXTAREA|INPUT|SELECT") || (37 === i.keyCode && e.options.accessibility === !0 ? e.changeSlide({ data: { message: e.options.rtl === !0 ? "next" : "previous" } }) : 39 === i.keyCode && e.options.accessibility === !0 && e.changeSlide({ data: { message: e.options.rtl === !0 ? "previous" : "next" } })) }, e.prototype.lazyLoad = function () { function e(e) { i("img[data-lazy]", e).each(function () { var e = i(this), t = i(this).attr("data-lazy"), o = i(this).attr("data-srcset"), s = i(this).attr("data-sizes") || r.$slider.attr("data-sizes"), n = document.createElement("img"); n.onload = function () { e.animate({ opacity: 0 }, 100, function () { o && (e.attr("srcset", o), s && e.attr("sizes", s)), e.attr("src", t).animate({ opacity: 1 }, 200, function () { e.removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading") }), r.$slider.trigger("lazyLoaded", [r, e, t]) }) }, n.onerror = function () { e.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"), r.$slider.trigger("lazyLoadError", [r, e, t]) }, n.src = t }) } var t, o, s, n, r = this; if (r.options.centerMode === !0 ? r.options.infinite === !0 ? (s = r.currentSlide + (r.options.slidesToShow / 2 + 1), n = s + r.options.slidesToShow + 2) : (s = Math.max(0, r.currentSlide - (r.options.slidesToShow / 2 + 1)), n = 2 + (r.options.slidesToShow / 2 + 1) + r.currentSlide) : (s = r.options.infinite ? r.options.slidesToShow + r.currentSlide : r.currentSlide, n = Math.ceil(s + r.options.slidesToShow), r.options.fade === !0 && (s > 0 && s--, n <= r.slideCount && n++)), t = r.$slider.find(".slick-slide").slice(s, n), "anticipated" === r.options.lazyLoad) for (var l = s - 1, d = n, a = r.$slider.find(".slick-slide"), c = 0; c < r.options.slidesToScroll; c++)l < 0 && (l = r.slideCount - 1), t = t.add(a.eq(l)), t = t.add(a.eq(d)), l--, d++; e(t), r.slideCount <= r.options.slidesToShow ? (o = r.$slider.find(".slick-slide"), e(o)) : r.currentSlide >= r.slideCount - r.options.slidesToShow ? (o = r.$slider.find(".slick-cloned").slice(0, r.options.slidesToShow), e(o)) : 0 === r.currentSlide && (o = r.$slider.find(".slick-cloned").slice(r.options.slidesToShow * -1), e(o)) }, e.prototype.loadSlider = function () { var i = this; i.setPosition(), i.$slideTrack.css({ opacity: 1 }), i.$slider.removeClass("slick-loading"), i.initUI(), "progressive" === i.options.lazyLoad && i.progressiveLazyLoad() }, e.prototype.next = e.prototype.slickNext = function () { var i = this; i.changeSlide({ data: { message: "next" } }) }, e.prototype.orientationChange = function () { var i = this; i.checkResponsive(), i.setPosition() }, e.prototype.pause = e.prototype.slickPause = function () { var i = this; i.autoPlayClear(), i.paused = !0 }, e.prototype.play = e.prototype.slickPlay = function () { var i = this; i.autoPlay(), i.options.autoplay = !0, i.paused = !1, i.focussed = !1, i.interrupted = !1 }, e.prototype.postSlide = function (e) { var t = this; if (!t.unslicked && (t.$slider.trigger("afterChange", [t, e]), t.animating = !1, t.slideCount > t.options.slidesToShow && t.setPosition(), t.swipeLeft = null, t.options.autoplay && t.autoPlay(), t.options.accessibility === !0 && (t.initADA(), t.options.focusOnChange))) { var o = i(t.$slides.get(t.currentSlide)); o.attr("tabindex", 0).focus() } }, e.prototype.prev = e.prototype.slickPrev = function () { var i = this; i.changeSlide({ data: { message: "previous" } }) }, e.prototype.preventDefault = function (i) { i.preventDefault() }, e.prototype.progressiveLazyLoad = function (e) { e = e || 1; var t, o, s, n, r, l = this, d = i("img[data-lazy]", l.$slider); d.length ? (t = d.first(), o = t.attr("data-lazy"), s = t.attr("data-srcset"), n = t.attr("data-sizes") || l.$slider.attr("data-sizes"), r = document.createElement("img"), r.onload = function () { s && (t.attr("srcset", s), n && t.attr("sizes", n)), t.attr("src", o).removeAttr("data-lazy data-srcset data-sizes").removeClass("slick-loading"), l.options.adaptiveHeight === !0 && l.setPosition(), l.$slider.trigger("lazyLoaded", [l, t, o]), l.progressiveLazyLoad() }, r.onerror = function () { e < 3 ? setTimeout(function () { l.progressiveLazyLoad(e + 1) }, 500) : (t.removeAttr("data-lazy").removeClass("slick-loading").addClass("slick-lazyload-error"), l.$slider.trigger("lazyLoadError", [l, t, o]), l.progressiveLazyLoad()) }, r.src = o) : l.$slider.trigger("allImagesLoaded", [l]) }, e.prototype.refresh = function (e) { var t, o, s = this; o = s.slideCount - s.options.slidesToShow, !s.options.infinite && s.currentSlide > o && (s.currentSlide = o), s.slideCount <= s.options.slidesToShow && (s.currentSlide = 0), t = s.currentSlide, s.destroy(!0), i.extend(s, s.initials, { currentSlide: t }), s.init(), e || s.changeSlide({ data: { message: "index", index: t } }, !1) }, e.prototype.registerBreakpoints = function () { var e, t, o, s = this, n = s.options.responsive || null; if ("array" === i.type(n) && n.length) { s.respondTo = s.options.respondTo || "window"; for (e in n) if (o = s.breakpoints.length - 1, n.hasOwnProperty(e)) { for (t = n[e].breakpoint; o >= 0;)s.breakpoints[o] && s.breakpoints[o] === t && s.breakpoints.splice(o, 1), o--; s.breakpoints.push(t), s.breakpointSettings[t] = n[e].settings } s.breakpoints.sort(function (i, e) { return s.options.mobileFirst ? i - e : e - i }) } }, e.prototype.reinit = function () { var e = this; e.$slides = e.$slideTrack.children(e.options.slide).addClass("slick-slide"), e.slideCount = e.$slides.length, e.currentSlide >= e.slideCount && 0 !== e.currentSlide && (e.currentSlide = e.currentSlide - e.options.slidesToScroll), e.slideCount <= e.options.slidesToShow && (e.currentSlide = 0), e.registerBreakpoints(), e.setProps(), e.setupInfinite(), e.buildArrows(), e.updateArrows(), e.initArrowEvents(), e.buildDots(), e.updateDots(), e.initDotEvents(), e.cleanUpSlideEvents(), e.initSlideEvents(), e.checkResponsive(!1, !0), e.options.focusOnSelect === !0 && i(e.$slideTrack).children().on("click.slick", e.selectHandler), e.setSlideClasses("number" == typeof e.currentSlide ? e.currentSlide : 0), e.setPosition(), e.focusHandler(), e.paused = !e.options.autoplay, e.autoPlay(), e.$slider.trigger("reInit", [e]) }, e.prototype.resize = function () { var e = this; i(window).width() !== e.windowWidth && (clearTimeout(e.windowDelay), e.windowDelay = window.setTimeout(function () { e.windowWidth = i(window).width(), e.checkResponsive(), e.unslicked || e.setPosition() }, 50)) }, e.prototype.removeSlide = e.prototype.slickRemove = function (i, e, t) { var o = this; return "boolean" == typeof i ? (e = i, i = e === !0 ? 0 : o.slideCount - 1) : i = e === !0 ? --i : i, !(o.slideCount < 1 || i < 0 || i > o.slideCount - 1) && (o.unload(), t === !0 ? o.$slideTrack.children().remove() : o.$slideTrack.children(this.options.slide).eq(i).remove(), o.$slides = o.$slideTrack.children(this.options.slide), o.$slideTrack.children(this.options.slide).detach(), o.$slideTrack.append(o.$slides), o.$slidesCache = o.$slides, void o.reinit()) }, e.prototype.setCSS = function (i) { var e, t, o = this, s = {}; o.options.rtl === !0 && (i = -i), e = "left" == o.positionProp ? Math.ceil(i) + "px" : "0px", t = "top" == o.positionProp ? Math.ceil(i) + "px" : "0px", s[o.positionProp] = i, o.transformsEnabled === !1 ? o.$slideTrack.css(s) : (s = {}, o.cssTransitions === !1 ? (s[o.animType] = "translate(" + e + ", " + t + ")", o.$slideTrack.css(s)) : (s[o.animType] = "translate3d(" + e + ", " + t + ", 0px)", o.$slideTrack.css(s))) }, e.prototype.setDimensions = function () { var i = this; i.options.vertical === !1 ? i.options.centerMode === !0 && i.$list.css({ padding: "0px " + i.options.centerPadding }) : (i.$list.height(i.$slides.first().outerHeight(!0) * i.options.slidesToShow), i.options.centerMode === !0 && i.$list.css({ padding: i.options.centerPadding + " 0px" })), i.listWidth = i.$list.width(), i.listHeight = i.$list.height(), i.options.vertical === !1 && i.options.variableWidth === !1 ? (i.slideWidth = Math.ceil(i.listWidth / i.options.slidesToShow), i.$slideTrack.width(Math.ceil(i.slideWidth * i.$slideTrack.children(".slick-slide").length))) : i.options.variableWidth === !0 ? i.$slideTrack.width(5e3 * i.slideCount) : (i.slideWidth = Math.ceil(i.listWidth), i.$slideTrack.height(Math.ceil(i.$slides.first().outerHeight(!0) * i.$slideTrack.children(".slick-slide").length))); var e = i.$slides.first().outerWidth(!0) - i.$slides.first().width(); i.options.variableWidth === !1 && i.$slideTrack.children(".slick-slide").width(i.slideWidth - e) }, e.prototype.setFade = function () { var e, t = this; t.$slides.each(function (o, s) { e = t.slideWidth * o * -1, t.options.rtl === !0 ? i(s).css({ position: "relative", right: e, top: 0, zIndex: t.options.zIndex - 2, opacity: 0 }) : i(s).css({ position: "relative", left: e, top: 0, zIndex: t.options.zIndex - 2, opacity: 0 }) }), t.$slides.eq(t.currentSlide).css({ zIndex: t.options.zIndex - 1, opacity: 1 }) }, e.prototype.setHeight = function () { var i = this; if (1 === i.options.slidesToShow && i.options.adaptiveHeight === !0 && i.options.vertical === !1) { var e = i.$slides.eq(i.currentSlide).outerHeight(!0); i.$list.css("height", e) } }, e.prototype.setOption = e.prototype.slickSetOption = function () { var e, t, o, s, n, r = this, l = !1; if ("object" === i.type(arguments[0]) ? (o = arguments[0], l = arguments[1], n = "multiple") : "string" === i.type(arguments[0]) && (o = arguments[0], s = arguments[1], l = arguments[2], "responsive" === arguments[0] && "array" === i.type(arguments[1]) ? n = "responsive" : "undefined" != typeof arguments[1] && (n = "single")), "single" === n) r.options[o] = s; else if ("multiple" === n) i.each(o, function (i, e) { r.options[i] = e }); else if ("responsive" === n) for (t in s) if ("array" !== i.type(r.options.responsive)) r.options.responsive = [s[t]]; else { for (e = r.options.responsive.length - 1; e >= 0;)r.options.responsive[e].breakpoint === s[t].breakpoint && r.options.responsive.splice(e, 1), e--; r.options.responsive.push(s[t]) } l && (r.unload(), r.reinit()) }, e.prototype.setPosition = function () { var i = this; i.setDimensions(), i.setHeight(), i.options.fade === !1 ? i.setCSS(i.getLeft(i.currentSlide)) : i.setFade(), i.$slider.trigger("setPosition", [i]) }, e.prototype.setProps = function () { var i = this, e = document.body.style; i.positionProp = i.options.vertical === !0 ? "top" : "left", "top" === i.positionProp ? i.$slider.addClass("slick-vertical") : i.$slider.removeClass("slick-vertical"), void 0 === e.WebkitTransition && void 0 === e.MozTransition && void 0 === e.msTransition || i.options.useCSS === !0 && (i.cssTransitions = !0), i.options.fade && ("number" == typeof i.options.zIndex ? i.options.zIndex < 3 && (i.options.zIndex = 3) : i.options.zIndex = i.defaults.zIndex), void 0 !== e.OTransform && (i.animType = "OTransform", i.transformType = "-o-transform", i.transitionType = "OTransition", void 0 === e.perspectiveProperty && void 0 === e.webkitPerspective && (i.animType = !1)), void 0 !== e.MozTransform && (i.animType = "MozTransform", i.transformType = "-moz-transform", i.transitionType = "MozTransition", void 0 === e.perspectiveProperty && void 0 === e.MozPerspective && (i.animType = !1)), void 0 !== e.webkitTransform && (i.animType = "webkitTransform", i.transformType = "-webkit-transform", i.transitionType = "webkitTransition", void 0 === e.perspectiveProperty && void 0 === e.webkitPerspective && (i.animType = !1)), void 0 !== e.msTransform && (i.animType = "msTransform", i.transformType = "-ms-transform", i.transitionType = "msTransition", void 0 === e.msTransform && (i.animType = !1)), void 0 !== e.transform && i.animType !== !1 && (i.animType = "transform", i.transformType = "transform", i.transitionType = "transition"), i.transformsEnabled = i.options.useTransform && null !== i.animType && i.animType !== !1 }, e.prototype.setSlideClasses = function (i) { var e, t, o, s, n = this; if (t = n.$slider.find(".slick-slide").removeClass("slick-active slick-center slick-current").attr("aria-hidden", "true"), n.$slides.eq(i).addClass("slick-current"), n.options.centerMode === !0) { var r = n.options.slidesToShow % 2 === 0 ? 1 : 0; e = Math.floor(n.options.slidesToShow / 2), n.options.infinite === !0 && (i >= e && i <= n.slideCount - 1 - e ? n.$slides.slice(i - e + r, i + e + 1).addClass("slick-active").attr("aria-hidden", "false") : (o = n.options.slidesToShow + i, t.slice(o - e + 1 + r, o + e + 2).addClass("slick-active").attr("aria-hidden", "false")), 0 === i ? t.eq(t.length - 1 - n.options.slidesToShow).addClass("slick-center") : i === n.slideCount - 1 && t.eq(n.options.slidesToShow).addClass("slick-center")), n.$slides.eq(i).addClass("slick-center") } else i >= 0 && i <= n.slideCount - n.options.slidesToShow ? n.$slides.slice(i, i + n.options.slidesToShow).addClass("slick-active").attr("aria-hidden", "false") : t.length <= n.options.slidesToShow ? t.addClass("slick-active").attr("aria-hidden", "false") : (s = n.slideCount % n.options.slidesToShow, o = n.options.infinite === !0 ? n.options.slidesToShow + i : i, n.options.slidesToShow == n.options.slidesToScroll && n.slideCount - i < n.options.slidesToShow ? t.slice(o - (n.options.slidesToShow - s), o + s).addClass("slick-active").attr("aria-hidden", "false") : t.slice(o, o + n.options.slidesToShow).addClass("slick-active").attr("aria-hidden", "false")); "ondemand" !== n.options.lazyLoad && "anticipated" !== n.options.lazyLoad || n.lazyLoad() }, e.prototype.setupInfinite = function () { var e, t, o, s = this; if (s.options.fade === !0 && (s.options.centerMode = !1), s.options.infinite === !0 && s.options.fade === !1 && (t = null, s.slideCount > s.options.slidesToShow)) { for (o = s.options.centerMode === !0 ? s.options.slidesToShow + 1 : s.options.slidesToShow, e = s.slideCount; e > s.slideCount - o; e -= 1)t = e - 1, i(s.$slides[t]).clone(!0).attr("id", "").attr("data-slick-index", t - s.slideCount).prependTo(s.$slideTrack).addClass("slick-cloned"); for (e = 0; e < o + s.slideCount; e += 1)t = e, i(s.$slides[t]).clone(!0).attr("id", "").attr("data-slick-index", t + s.slideCount).appendTo(s.$slideTrack).addClass("slick-cloned"); s.$slideTrack.find(".slick-cloned").find("[id]").each(function () { i(this).attr("id", "") }) } }, e.prototype.interrupt = function (i) { var e = this; i || e.autoPlay(), e.interrupted = i }, e.prototype.selectHandler = function (e) { var t = this, o = i(e.target).is(".slick-slide") ? i(e.target) : i(e.target).parents(".slick-slide"), s = parseInt(o.attr("data-slick-index")); return s || (s = 0), t.slideCount <= t.options.slidesToShow ? void t.slideHandler(s, !1, !0) : void t.slideHandler(s) }, e.prototype.slideHandler = function (i, e, t) { var o, s, n, r, l, d = null, a = this; if (e = e || !1, !(a.animating === !0 && a.options.waitForAnimate === !0 || a.options.fade === !0 && a.currentSlide === i)) return e === !1 && a.asNavFor(i), o = i, d = a.getLeft(o), r = a.getLeft(a.currentSlide), a.currentLeft = null === a.swipeLeft ? r : a.swipeLeft, a.options.infinite === !1 && a.options.centerMode === !1 && (i < 0 || i > a.getDotCount() * a.options.slidesToScroll) ? void (a.options.fade === !1 && (o = a.currentSlide, t !== !0 && a.slideCount > a.options.slidesToShow ? a.animateSlide(r, function () { a.postSlide(o) }) : a.postSlide(o))) : a.options.infinite === !1 && a.options.centerMode === !0 && (i < 0 || i > a.slideCount - a.options.slidesToScroll) ? void (a.options.fade === !1 && (o = a.currentSlide, t !== !0 && a.slideCount > a.options.slidesToShow ? a.animateSlide(r, function () { a.postSlide(o) }) : a.postSlide(o))) : (a.options.autoplay && clearInterval(a.autoPlayTimer), s = o < 0 ? a.slideCount % a.options.slidesToScroll !== 0 ? a.slideCount - a.slideCount % a.options.slidesToScroll : a.slideCount + o : o >= a.slideCount ? a.slideCount % a.options.slidesToScroll !== 0 ? 0 : o - a.slideCount : o, a.animating = !0, a.$slider.trigger("beforeChange", [a, a.currentSlide, s]), n = a.currentSlide, a.currentSlide = s, a.setSlideClasses(a.currentSlide), a.options.asNavFor && (l = a.getNavTarget(), l = l.slick("getSlick"), l.slideCount <= l.options.slidesToShow && l.setSlideClasses(a.currentSlide)), a.updateDots(), a.updateArrows(), a.options.fade === !0 ? (t !== !0 ? (a.fadeSlideOut(n), a.fadeSlide(s, function () { a.postSlide(s) })) : a.postSlide(s), void a.animateHeight()) : void (t !== !0 && a.slideCount > a.options.slidesToShow ? a.animateSlide(d, function () { a.postSlide(s) }) : a.postSlide(s))) }, e.prototype.startLoad = function () { var i = this; i.options.arrows === !0 && i.slideCount > i.options.slidesToShow && (i.$prevArrow.hide(), i.$nextArrow.hide()), i.options.dots === !0 && i.slideCount > i.options.slidesToShow && i.$dots.hide(), i.$slider.addClass("slick-loading") }, e.prototype.swipeDirection = function () { var i, e, t, o, s = this; return i = s.touchObject.startX - s.touchObject.curX, e = s.touchObject.startY - s.touchObject.curY, t = Math.atan2(e, i), o = Math.round(180 * t / Math.PI), o < 0 && (o = 360 - Math.abs(o)), o <= 45 && o >= 0 ? s.options.rtl === !1 ? "left" : "right" : o <= 360 && o >= 315 ? s.options.rtl === !1 ? "left" : "right" : o >= 135 && o <= 225 ? s.options.rtl === !1 ? "right" : "left" : s.options.verticalSwiping === !0 ? o >= 35 && o <= 135 ? "down" : "up" : "vertical" }, e.prototype.swipeEnd = function (i) { var e, t, o = this; if (o.dragging = !1, o.swiping = !1, o.scrolling) return o.scrolling = !1, !1; if (o.interrupted = !1, o.shouldClick = !(o.touchObject.swipeLength > 10), void 0 === o.touchObject.curX) return !1; if (o.touchObject.edgeHit === !0 && o.$slider.trigger("edge", [o, o.swipeDirection()]), o.touchObject.swipeLength >= o.touchObject.minSwipe) { switch (t = o.swipeDirection()) { case "left": case "down": e = o.options.swipeToSlide ? o.checkNavigable(o.currentSlide + o.getSlideCount()) : o.currentSlide + o.getSlideCount(), o.currentDirection = 0; break; case "right": case "up": e = o.options.swipeToSlide ? o.checkNavigable(o.currentSlide - o.getSlideCount()) : o.currentSlide - o.getSlideCount(), o.currentDirection = 1 }"vertical" != t && (o.slideHandler(e), o.touchObject = {}, o.$slider.trigger("swipe", [o, t])) } else o.touchObject.startX !== o.touchObject.curX && (o.slideHandler(o.currentSlide), o.touchObject = {}) }, e.prototype.swipeHandler = function (i) { var e = this; if (!(e.options.swipe === !1 || "ontouchend" in document && e.options.swipe === !1 || e.options.draggable === !1 && i.type.indexOf("mouse") !== -1)) switch (e.touchObject.fingerCount = i.originalEvent && void 0 !== i.originalEvent.touches ? i.originalEvent.touches.length : 1, e.touchObject.minSwipe = e.listWidth / e.options.touchThreshold, e.options.verticalSwiping === !0 && (e.touchObject.minSwipe = e.listHeight / e.options.touchThreshold), i.data.action) { case "start": e.swipeStart(i); break; case "move": e.swipeMove(i); break; case "end": e.swipeEnd(i) } }, e.prototype.swipeMove = function (i) { var e, t, o, s, n, r, l = this; return n = void 0 !== i.originalEvent ? i.originalEvent.touches : null, !(!l.dragging || l.scrolling || n && 1 !== n.length) && (e = l.getLeft(l.currentSlide), l.touchObject.curX = void 0 !== n ? n[0].pageX : i.clientX, l.touchObject.curY = void 0 !== n ? n[0].pageY : i.clientY, l.touchObject.swipeLength = Math.round(Math.sqrt(Math.pow(l.touchObject.curX - l.touchObject.startX, 2))), r = Math.round(Math.sqrt(Math.pow(l.touchObject.curY - l.touchObject.startY, 2))), !l.options.verticalSwiping && !l.swiping && r > 4 ? (l.scrolling = !0, !1) : (l.options.verticalSwiping === !0 && (l.touchObject.swipeLength = r), t = l.swipeDirection(), void 0 !== i.originalEvent && l.touchObject.swipeLength > 4 && (l.swiping = !0, i.preventDefault()), s = (l.options.rtl === !1 ? 1 : -1) * (l.touchObject.curX > l.touchObject.startX ? 1 : -1), l.options.verticalSwiping === !0 && (s = l.touchObject.curY > l.touchObject.startY ? 1 : -1), o = l.touchObject.swipeLength, l.touchObject.edgeHit = !1, l.options.infinite === !1 && (0 === l.currentSlide && "right" === t || l.currentSlide >= l.getDotCount() && "left" === t) && (o = l.touchObject.swipeLength * l.options.edgeFriction, l.touchObject.edgeHit = !0), l.options.vertical === !1 ? l.swipeLeft = e + o * s : l.swipeLeft = e + o * (l.$list.height() / l.listWidth) * s, l.options.verticalSwiping === !0 && (l.swipeLeft = e + o * s), l.options.fade !== !0 && l.options.touchMove !== !1 && (l.animating === !0 ? (l.swipeLeft = null, !1) : void l.setCSS(l.swipeLeft)))) }, e.prototype.swipeStart = function (i) { var e, t = this; return t.interrupted = !0, 1 !== t.touchObject.fingerCount || t.slideCount <= t.options.slidesToShow ? (t.touchObject = {}, !1) : (void 0 !== i.originalEvent && void 0 !== i.originalEvent.touches && (e = i.originalEvent.touches[0]), t.touchObject.startX = t.touchObject.curX = void 0 !== e ? e.pageX : i.clientX, t.touchObject.startY = t.touchObject.curY = void 0 !== e ? e.pageY : i.clientY, void (t.dragging = !0)) }, e.prototype.unfilterSlides = e.prototype.slickUnfilter = function () { var i = this; null !== i.$slidesCache && (i.unload(), i.$slideTrack.children(this.options.slide).detach(), i.$slidesCache.appendTo(i.$slideTrack), i.reinit()) }, e.prototype.unload = function () { var e = this; i(".slick-cloned", e.$slider).remove(), e.$dots && e.$dots.remove(), e.$prevArrow && e.htmlExpr.test(e.options.prevArrow) && e.$prevArrow.remove(), e.$nextArrow && e.htmlExpr.test(e.options.nextArrow) && e.$nextArrow.remove(), e.$slides.removeClass("slick-slide slick-active slick-visible slick-current").attr("aria-hidden", "true").css("width", "") }, e.prototype.unslick = function (i) { var e = this; e.$slider.trigger("unslick", [e, i]), e.destroy() }, e.prototype.updateArrows = function () { var i, e = this; i = Math.floor(e.options.slidesToShow / 2), e.options.arrows === !0 && e.slideCount > e.options.slidesToShow && !e.options.infinite && (e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false"), e.$nextArrow.removeClass("slick-disabled").attr("aria-disabled", "false"), 0 === e.currentSlide ? (e.$prevArrow.addClass("slick-disabled").attr("aria-disabled", "true"), e.$nextArrow.removeClass("slick-disabled").attr("aria-disabled", "false")) : e.currentSlide >= e.slideCount - e.options.slidesToShow && e.options.centerMode === !1 ? (e.$nextArrow.addClass("slick-disabled").attr("aria-disabled", "true"), e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false")) : e.currentSlide >= e.slideCount - 1 && e.options.centerMode === !0 && (e.$nextArrow.addClass("slick-disabled").attr("aria-disabled", "true"), e.$prevArrow.removeClass("slick-disabled").attr("aria-disabled", "false"))) }, e.prototype.updateDots = function () { var i = this; null !== i.$dots && (i.$dots.find("li").removeClass("slick-active").end(), i.$dots.find("li").eq(Math.floor(i.currentSlide / i.options.slidesToScroll)).addClass("slick-active")) }, e.prototype.visibility = function () { var i = this; i.options.autoplay && (document[i.hidden] ? i.interrupted = !0 : i.interrupted = !1) }, i.fn.slick = function () { var i, t, o = this, s = arguments[0], n = Array.prototype.slice.call(arguments, 1), r = o.length; for (i = 0; i < r; i++)if ("object" == typeof s || "undefined" == typeof s ? o[i].slick = new e(o[i], s) : t = o[i].slick[s].apply(o[i].slick, n), "undefined" != typeof t) return t; return o } });;

/* /atharva_theme_base/static/src/js/product_detail.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('atharva_theme_base.product_detail_js', function (require) {
    "use strict"; var VariantMixin = require('sale.VariantMixin'); var publicWidget = require('web.public.widget'); var ajax = require('web.ajax'); var core = require('web.core'); var QWeb = core.qweb; var xml_load = ajax.loadXML('/website_sale_stock/static/src/xml/website_sale_stock_product_availability.xml', QWeb); publicWidget.registry.StickProductMedia = publicWidget.Widget.extend({ selector: '#wrapwrap', events: { 'click #add_to_cart_cp_btn': '_add_to_cart_click', 'click #buy_now_cp_btn': '_buy_btn_click' }, _add_to_cart_click: function () { var cartbtn = $('#add_to_cart').hasClass('disabled out_of_stock'); if (cartbtn != true) { $('#add_to_cart').trigger('click'); } }, _buy_btn_click: function () { var buyBtn = $('#buy_now').hasClass('disabled out_of_stock'); if (buyBtn != true) { $('#buy_now').trigger('click'); } }, start: function () { this._stickyButtonAccessability() }, _stickyButtonAccessability: function () { var cartbtn = $('#add_to_cart').hasClass('disabled out_of_stock'); var buyBtn = $('#buy_now').hasClass('disabled out_of_stock'); if (cartbtn == true || buyBtn == true) { $("#add_to_cart_cp_btn").addClass("disabled"); $("#buy_now_cp_btn").addClass("disabled"); } else { $("#add_to_cart_cp_btn").removeClass("disabled"); $("#buy_now_cp_btn").removeClass("disabled"); } } }); VariantMixin._onChangeCombinationStockCustom = function (ev, $parent, combination) {
        var product_id = 0; if ($parent.find('input.product_id:checked').length) { product_id = $parent.find('input.product_id:checked').val(); } else { product_id = $parent.find('.product_id').val(); }
        var isMainProduct = combination.product_id && ($parent.is('.js_main_product') || $parent.is('.main_product')) && combination.product_id === parseInt(product_id); if (!this.isWebsite || !isMainProduct) { return; }
        var qty = $parent.find('input[name="add_qty"]').val(); $parent.find('#add_to_cart').removeClass('out_of_stock'); $parent.find('#buy_now').removeClass('out_of_stock'); if (combination.product_type === 'product' && _.contains(['always', 'threshold'], combination.inventory_availability)) {
            combination.virtual_available -= parseInt(combination.cart_qty); if (combination.virtual_available < 0) { combination.virtual_available = 0; }
            if (qty > combination.virtual_available) { var $input_add_qty = $parent.find('input[name="add_qty"]'); qty = combination.virtual_available || 1; $input_add_qty.val(qty); }
            if (qty > combination.virtual_available || combination.virtual_available < 1 || qty < 1) { $parent.find('#add_to_cart').addClass('disabled out_of_stock'); $parent.find('#buy_now').addClass('disabled out_of_stock'); }
            var stickyMedia = new publicWidget.registry.StickProductMedia(); stickyMedia._stickyButtonAccessability();
        }
        xml_load.then(function () { $('.oe_website_sale').find('.availability_message_' + combination.product_template).remove(); var $message = $(QWeb.render('website_sale_stock.product_availability', combination)); $('div.availability_messages').html($message); });
    }
    publicWidget.registry.WebsiteSale.include({ _onChangeCombination: function () { this._super.apply(this, arguments); VariantMixin._onChangeCombinationStockCustom.apply(this, arguments); } }); return VariantMixin;
});;

/* /theme_alan/static/src/snippets/s_faq_snippet/000.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('theme_alan.faq', function (require) {
    'use strict'; var ajax = require('web.ajax'); var publicWidget = require('web.public.widget'); publicWidget.registry.as_faq_slider = publicWidget.Widget.extend({
        selector: '.as_faq_slider', disabledInEditableMode: false, start: function (editable_mode) {
            var self = this; if (self.editableMode) { self.$target.empty(); }
            if (!self.editableMode) { self.getWebsiteFaqData(); }
        }, getWebsiteFaqData: function () { if ($('#wrapwrap .as_faq_slider').length) { ajax.jsonRpc('/get_website_faq_list', 'call').then(function (data) { if (data) { var content = $(data).find('.as_faq_slider'); $('.as_faq_slider').replaceWith(content); $('.as_faq_slider').show(); } }); } },
    });
});;

/* /theme_alan/static/src/lib/frontend/bootstrap-slider.min.js defined in bundle 'web.assets_frontend_lazy' */
"use strict"; var _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (a) { return typeof a } : function (a) { return a && "function" == typeof Symbol && a.constructor === Symbol && a !== Symbol.prototype ? "symbol" : typeof a }, windowIsDefined = "object" === ("undefined" == typeof window ? "undefined" : _typeof(window)); !function (a) { if ("function" == typeof define && define.amd) define(["jquery"], a); else if ("object" === ("undefined" == typeof module ? "undefined" : _typeof(module)) && module.exports) { var b; try { b = require("jquery") } catch (c) { b = null } module.exports = a(b) } else window && (window.Slider = a(window.jQuery)) }(function (a) { var b = "slider", c = "bootstrapSlider"; windowIsDefined && !window.console && (window.console = {}), windowIsDefined && !window.console.log && (window.console.log = function () { }), windowIsDefined && !window.console.warn && (window.console.warn = function () { }); var d; return function (a) { function b() { } function c(a) { function c(b) { b.prototype.option || (b.prototype.option = function (b) { a.isPlainObject(b) && (this.options = a.extend(!0, this.options, b)) }) } function e(b, c) { a.fn[b] = function (e) { if ("string" == typeof e) { for (var g = d.call(arguments, 1), h = 0, i = this.length; i > h; h++) { var j = this[h], k = a.data(j, b); if (k) if (a.isFunction(k[e]) && "_" !== e.charAt(0)) { var l = k[e].apply(k, g); if (void 0 !== l && l !== k) return l } else f("no such method '" + e + "' for " + b + " instance"); else f("cannot call methods on " + b + " prior to initialization; attempted to call '" + e + "'") } return this } var m = this.map(function () { var d = a.data(this, b); return d ? (d.option(e), d._init()) : (d = new c(this, e), a.data(this, b, d)), a(this) }); return !m || m.length > 1 ? m : m[0] } } if (a) { var f = "undefined" == typeof console ? b : function (a) { console.error(a) }; return a.bridget = function (a, b) { c(b), e(a, b) }, a.bridget } } var d = Array.prototype.slice; c(a) }(a), function (a) { function e(b, c) { function d(a, b) { var c = "data-slider-" + b.replace(/_/g, "-"), d = a.getAttribute(c); try { return JSON.parse(d) } catch (e) { return d } } this._state = { value: null, enabled: null, offset: null, size: null, percentage: null, inDrag: !1, over: !1 }, this.ticksCallbackMap = {}, this.handleCallbackMap = {}, "string" == typeof b ? this.element = document.querySelector(b) : b instanceof HTMLElement && (this.element = b), c = c ? c : {}; for (var e = Object.keys(this.defaultOptions), f = 0; f < e.length; f++) { var h = e[f], i = c[h]; i = "undefined" != typeof i ? i : d(this.element, h), i = null !== i ? i : this.defaultOptions[h], this.options || (this.options = {}), this.options[h] = i } "auto" === this.options.rtl && (this.options.rtl = "rtl" === window.getComputedStyle(this.element).direction), "vertical" !== this.options.orientation || "top" !== this.options.tooltip_position && "bottom" !== this.options.tooltip_position ? "horizontal" !== this.options.orientation || "left" !== this.options.tooltip_position && "right" !== this.options.tooltip_position || (this.options.tooltip_position = "top") : this.options.rtl ? this.options.tooltip_position = "left" : this.options.tooltip_position = "right"; var j, k, l, m, n, o = this.element.style.width, p = !1, q = this.element.parentNode; if (this.sliderElem) p = !0; else { this.sliderElem = document.createElement("div"), this.sliderElem.className = "slider"; var r = document.createElement("div"); r.className = "slider-track", k = document.createElement("div"), k.className = "slider-track-low", j = document.createElement("div"), j.className = "slider-selection", l = document.createElement("div"), l.className = "slider-track-high", m = document.createElement("div"), m.className = "slider-handle min-slider-handle", m.setAttribute("role", "slider"), m.setAttribute("aria-valuemin", this.options.min), m.setAttribute("aria-valuemax", this.options.max), n = document.createElement("div"), n.className = "slider-handle max-slider-handle", n.setAttribute("role", "slider"), n.setAttribute("aria-valuemin", this.options.min), n.setAttribute("aria-valuemax", this.options.max), r.appendChild(k), r.appendChild(j), r.appendChild(l), this.rangeHighlightElements = []; var s = this.options.rangeHighlights; if (Array.isArray(s) && s.length > 0) for (var t = 0; t < s.length; t++) { var u = document.createElement("div"), v = s[t]["class"] || ""; u.className = "slider-rangeHighlight slider-selection " + v, this.rangeHighlightElements.push(u), r.appendChild(u) } var w = Array.isArray(this.options.labelledby); if (w && this.options.labelledby[0] && m.setAttribute("aria-labelledby", this.options.labelledby[0]), w && this.options.labelledby[1] && n.setAttribute("aria-labelledby", this.options.labelledby[1]), !w && this.options.labelledby && (m.setAttribute("aria-labelledby", this.options.labelledby), n.setAttribute("aria-labelledby", this.options.labelledby)), this.ticks = [], Array.isArray(this.options.ticks) && this.options.ticks.length > 0) { for (this.ticksContainer = document.createElement("div"), this.ticksContainer.className = "slider-tick-container", f = 0; f < this.options.ticks.length; f++) { var x = document.createElement("div"); if (x.className = "slider-tick", this.options.ticks_tooltip) { var y = this._addTickListener(), z = y.addMouseEnter(this, x, f), A = y.addMouseLeave(this, x); this.ticksCallbackMap[f] = { mouseEnter: z, mouseLeave: A } } this.ticks.push(x), this.ticksContainer.appendChild(x) } j.className += " tick-slider-selection" } if (this.tickLabels = [], Array.isArray(this.options.ticks_labels) && this.options.ticks_labels.length > 0) for (this.tickLabelContainer = document.createElement("div"), this.tickLabelContainer.className = "slider-tick-label-container", f = 0; f < this.options.ticks_labels.length; f++) { var B = document.createElement("div"), C = 0 === this.options.ticks_positions.length, D = this.options.reversed && C ? this.options.ticks_labels.length - (f + 1) : f; B.className = "slider-tick-label", B.innerHTML = this.options.ticks_labels[D], this.tickLabels.push(B), this.tickLabelContainer.appendChild(B) } var E = function (a) { var b = document.createElement("div"); b.className = "tooltip-arrow"; var c = document.createElement("div"); c.className = "tooltip-inner", a.appendChild(b), a.appendChild(c) }, F = document.createElement("div"); F.className = "tooltip tooltip-main", F.setAttribute("role", "presentation"), E(F); var G = document.createElement("div"); G.className = "tooltip tooltip-min", G.setAttribute("role", "presentation"), E(G); var H = document.createElement("div"); H.className = "tooltip tooltip-max", H.setAttribute("role", "presentation"), E(H), this.sliderElem.appendChild(r), this.sliderElem.appendChild(F), this.sliderElem.appendChild(G), this.sliderElem.appendChild(H), this.tickLabelContainer && this.sliderElem.appendChild(this.tickLabelContainer), this.ticksContainer && this.sliderElem.appendChild(this.ticksContainer), this.sliderElem.appendChild(m), this.sliderElem.appendChild(n), q.insertBefore(this.sliderElem, this.element), this.element.style.display = "none" } if (a && (this.$element = a(this.element), this.$sliderElem = a(this.sliderElem)), this.eventToCallbackMap = {}, this.sliderElem.id = this.options.id, this.touchCapable = "ontouchstart" in window || window.DocumentTouch && document instanceof window.DocumentTouch, this.touchX = 0, this.touchY = 0, this.tooltip = this.sliderElem.querySelector(".tooltip-main"), this.tooltipInner = this.tooltip.querySelector(".tooltip-inner"), this.tooltip_min = this.sliderElem.querySelector(".tooltip-min"), this.tooltipInner_min = this.tooltip_min.querySelector(".tooltip-inner"), this.tooltip_max = this.sliderElem.querySelector(".tooltip-max"), this.tooltipInner_max = this.tooltip_max.querySelector(".tooltip-inner"), g[this.options.scale] && (this.options.scale = g[this.options.scale]), p === !0 && (this._removeClass(this.sliderElem, "slider-horizontal"), this._removeClass(this.sliderElem, "slider-vertical"), this._removeClass(this.sliderElem, "slider-rtl"), this._removeClass(this.tooltip, "hide"), this._removeClass(this.tooltip_min, "hide"), this._removeClass(this.tooltip_max, "hide"), ["left", "right", "top", "width", "height"].forEach(function (a) { this._removeProperty(this.trackLow, a), this._removeProperty(this.trackSelection, a), this._removeProperty(this.trackHigh, a) }, this), [this.handle1, this.handle2].forEach(function (a) { this._removeProperty(a, "left"), this._removeProperty(a, "right"), this._removeProperty(a, "top") }, this), [this.tooltip, this.tooltip_min, this.tooltip_max].forEach(function (a) { this._removeProperty(a, "left"), this._removeProperty(a, "right"), this._removeProperty(a, "top"), this._removeClass(a, "right"), this._removeClass(a, "left"), this._removeClass(a, "top") }, this)), "vertical" === this.options.orientation ? (this._addClass(this.sliderElem, "slider-vertical"), this.stylePos = "top", this.mousePos = "pageY", this.sizePos = "offsetHeight") : (this._addClass(this.sliderElem, "slider-horizontal"), this.sliderElem.style.width = o, this.options.orientation = "horizontal", this.options.rtl ? this.stylePos = "right" : this.stylePos = "left", this.mousePos = "clientX", this.sizePos = "offsetWidth"), this.options.rtl && this._addClass(this.sliderElem, "slider-rtl"), this._setTooltipPosition(), Array.isArray(this.options.ticks) && this.options.ticks.length > 0 && (this.options.max = Math.max.apply(Math, this.options.ticks), this.options.min = Math.min.apply(Math, this.options.ticks)), Array.isArray(this.options.value) ? (this.options.range = !0, this._state.value = this.options.value) : this.options.range ? this._state.value = [this.options.value, this.options.max] : this._state.value = this.options.value, this.trackLow = k || this.trackLow, this.trackSelection = j || this.trackSelection, this.trackHigh = l || this.trackHigh, "none" === this.options.selection ? (this._addClass(this.trackLow, "hide"), this._addClass(this.trackSelection, "hide"), this._addClass(this.trackHigh, "hide")) : ("after" === this.options.selection || "before" === this.options.selection) && (this._removeClass(this.trackLow, "hide"), this._removeClass(this.trackSelection, "hide"), this._removeClass(this.trackHigh, "hide")), this.handle1 = m || this.handle1, this.handle2 = n || this.handle2, p === !0) for (this._removeClass(this.handle1, "round triangle"), this._removeClass(this.handle2, "round triangle hide"), f = 0; f < this.ticks.length; f++)this._removeClass(this.ticks[f], "round triangle hide"); var I = ["round", "triangle", "custom"], J = -1 !== I.indexOf(this.options.handle); if (J) for (this._addClass(this.handle1, this.options.handle), this._addClass(this.handle2, this.options.handle), f = 0; f < this.ticks.length; f++)this._addClass(this.ticks[f], this.options.handle); if (this._state.offset = this._offset(this.sliderElem), this._state.size = this.sliderElem[this.sizePos], this.setValue(this._state.value), this.handle1Keydown = this._keydown.bind(this, 0), this.handle1.addEventListener("keydown", this.handle1Keydown, !1), this.handle2Keydown = this._keydown.bind(this, 1), this.handle2.addEventListener("keydown", this.handle2Keydown, !1), this.mousedown = this._mousedown.bind(this), this.touchstart = this._touchstart.bind(this), this.touchmove = this._touchmove.bind(this), this.touchCapable) { var K = !1; try { var L = Object.defineProperty({}, "passive", { get: function () { K = !0 } }); window.addEventListener("test", null, L) } catch (M) { } var N = K ? { passive: !0 } : !1; this.sliderElem.addEventListener("touchstart", this.touchstart, N), this.sliderElem.addEventListener("touchmove", this.touchmove, N) } if (this.sliderElem.addEventListener("mousedown", this.mousedown, !1), this.resize = this._resize.bind(this), window.addEventListener("resize", this.resize, !1), "hide" === this.options.tooltip) this._addClass(this.tooltip, "hide"), this._addClass(this.tooltip_min, "hide"), this._addClass(this.tooltip_max, "hide"); else if ("always" === this.options.tooltip) this._showTooltip(), this._alwaysShowTooltip = !0; else { if (this.showTooltip = this._showTooltip.bind(this), this.hideTooltip = this._hideTooltip.bind(this), this.options.ticks_tooltip) { var O = this._addTickListener(), P = O.addMouseEnter(this, this.handle1), Q = O.addMouseLeave(this, this.handle1); this.handleCallbackMap.handle1 = { mouseEnter: P, mouseLeave: Q }, P = O.addMouseEnter(this, this.handle2), Q = O.addMouseLeave(this, this.handle2), this.handleCallbackMap.handle2 = { mouseEnter: P, mouseLeave: Q } } else this.sliderElem.addEventListener("mouseenter", this.showTooltip, !1), this.sliderElem.addEventListener("mouseleave", this.hideTooltip, !1); this.handle1.addEventListener("focus", this.showTooltip, !1), this.handle1.addEventListener("blur", this.hideTooltip, !1), this.handle2.addEventListener("focus", this.showTooltip, !1), this.handle2.addEventListener("blur", this.hideTooltip, !1) } this.options.enabled ? this.enable() : this.disable() } var f = { formatInvalidInputErrorMsg: function (a) { return "Invalid input value '" + a + "' passed in" }, callingContextNotSliderInstance: "Calling context element does not have instance of Slider bound to it. Check your code to make sure the JQuery object returned from the call to the slider() initializer is calling the method" }, g = { linear: { toValue: function (a) { var b = a / 100 * (this.options.max - this.options.min), c = !0; if (this.options.ticks_positions.length > 0) { for (var d, e, f, g = 0, h = 1; h < this.options.ticks_positions.length; h++)if (a <= this.options.ticks_positions[h]) { d = this.options.ticks[h - 1], f = this.options.ticks_positions[h - 1], e = this.options.ticks[h], g = this.options.ticks_positions[h]; break } var i = (a - f) / (g - f); b = d + i * (e - d), c = !1 } var j = c ? this.options.min : 0, k = j + Math.round(b / this.options.step) * this.options.step; return k < this.options.min ? this.options.min : k > this.options.max ? this.options.max : k }, toPercentage: function (a) { if (this.options.max === this.options.min) return 0; if (this.options.ticks_positions.length > 0) { for (var b, c, d, e = 0, f = 0; f < this.options.ticks.length; f++)if (a <= this.options.ticks[f]) { b = f > 0 ? this.options.ticks[f - 1] : 0, d = f > 0 ? this.options.ticks_positions[f - 1] : 0, c = this.options.ticks[f], e = this.options.ticks_positions[f]; break } if (f > 0) { var g = (a - b) / (c - b); return d + g * (e - d) } } return 100 * (a - this.options.min) / (this.options.max - this.options.min) } }, logarithmic: { toValue: function (a) { var b = 0 === this.options.min ? 0 : Math.log(this.options.min), c = Math.log(this.options.max), d = Math.exp(b + (c - b) * a / 100); return Math.round(d) === this.options.max ? this.options.max : (d = this.options.min + Math.round((d - this.options.min) / this.options.step) * this.options.step, d < this.options.min ? this.options.min : d > this.options.max ? this.options.max : d) }, toPercentage: function (a) { if (this.options.max === this.options.min) return 0; var b = Math.log(this.options.max), c = 0 === this.options.min ? 0 : Math.log(this.options.min), d = 0 === a ? 0 : Math.log(a); return 100 * (d - c) / (b - c) } } }; if (d = function (a, b) { return e.call(this, a, b), this }, d.prototype = { _init: function () { }, constructor: d, defaultOptions: { id: "", min: 0, max: 10, step: 1, precision: 0, orientation: "horizontal", value: 5, range: !1, selection: "before", tooltip: "show", tooltip_split: !1, handle: "round", reversed: !1, rtl: "auto", enabled: !0, formatter: function (a) { return Array.isArray(a) ? a[0] + " : " + a[1] : a }, natural_arrow_keys: !1, ticks: [], ticks_positions: [], ticks_labels: [], ticks_snap_bounds: 0, ticks_tooltip: !1, scale: "linear", focus: !1, tooltip_position: null, labelledby: null, rangeHighlights: [] }, getElement: function () { return this.sliderElem }, getValue: function () { return this.options.range ? this._state.value : this._state.value[0] }, setValue: function (a, b, c) { a || (a = 0); var d = this.getValue(); this._state.value = this._validateInputValue(a); var e = this._applyPrecision.bind(this); this.options.range ? (this._state.value[0] = e(this._state.value[0]), this._state.value[1] = e(this._state.value[1]), this._state.value[0] = Math.max(this.options.min, Math.min(this.options.max, this._state.value[0])), this._state.value[1] = Math.max(this.options.min, Math.min(this.options.max, this._state.value[1]))) : (this._state.value = e(this._state.value), this._state.value = [Math.max(this.options.min, Math.min(this.options.max, this._state.value))], this._addClass(this.handle2, "hide"), "after" === this.options.selection ? this._state.value[1] = this.options.max : this._state.value[1] = this.options.min), this.options.max > this.options.min ? this._state.percentage = [this._toPercentage(this._state.value[0]), this._toPercentage(this._state.value[1]), 100 * this.options.step / (this.options.max - this.options.min)] : this._state.percentage = [0, 0, 100], this._layout(); var f = this.options.range ? this._state.value : this._state.value[0]; return this._setDataVal(f), b === !0 && this._trigger("slide", f), d !== f && c === !0 && this._trigger("change", { oldValue: d, newValue: f }), this }, destroy: function () { this._removeSliderEventHandlers(), this.sliderElem.parentNode.removeChild(this.sliderElem), this.element.style.display = "", this._cleanUpEventCallbacksMap(), this.element.removeAttribute("data"), a && (this._unbindJQueryEventHandlers(), this.$element.removeData("slider")) }, disable: function () { return this._state.enabled = !1, this.handle1.removeAttribute("tabindex"), this.handle2.removeAttribute("tabindex"), this._addClass(this.sliderElem, "slider-disabled"), this._trigger("slideDisabled"), this }, enable: function () { return this._state.enabled = !0, this.handle1.setAttribute("tabindex", 0), this.handle2.setAttribute("tabindex", 0), this._removeClass(this.sliderElem, "slider-disabled"), this._trigger("slideEnabled"), this }, toggle: function () { return this._state.enabled ? this.disable() : this.enable(), this }, isEnabled: function () { return this._state.enabled }, on: function (a, b) { return this._bindNonQueryEventHandler(a, b), this }, off: function (b, c) { a ? (this.$element.off(b, c), this.$sliderElem.off(b, c)) : this._unbindNonQueryEventHandler(b, c) }, getAttribute: function (a) { return a ? this.options[a] : this.options }, setAttribute: function (a, b) { return this.options[a] = b, this }, refresh: function () { return this._removeSliderEventHandlers(), e.call(this, this.element, this.options), a && a.data(this.element, "slider", this), this }, relayout: function () { return this._resize(), this._layout(), this }, _removeSliderEventHandlers: function () { if (this.handle1.removeEventListener("keydown", this.handle1Keydown, !1), this.handle2.removeEventListener("keydown", this.handle2Keydown, !1), this.options.ticks_tooltip) { for (var a = this.ticksContainer.getElementsByClassName("slider-tick"), b = 0; b < a.length; b++)a[b].removeEventListener("mouseenter", this.ticksCallbackMap[b].mouseEnter, !1), a[b].removeEventListener("mouseleave", this.ticksCallbackMap[b].mouseLeave, !1); this.handle1.removeEventListener("mouseenter", this.handleCallbackMap.handle1.mouseEnter, !1), this.handle2.removeEventListener("mouseenter", this.handleCallbackMap.handle2.mouseEnter, !1), this.handle1.removeEventListener("mouseleave", this.handleCallbackMap.handle1.mouseLeave, !1), this.handle2.removeEventListener("mouseleave", this.handleCallbackMap.handle2.mouseLeave, !1) } this.handleCallbackMap = null, this.ticksCallbackMap = null, this.showTooltip && (this.handle1.removeEventListener("focus", this.showTooltip, !1), this.handle2.removeEventListener("focus", this.showTooltip, !1)), this.hideTooltip && (this.handle1.removeEventListener("blur", this.hideTooltip, !1), this.handle2.removeEventListener("blur", this.hideTooltip, !1)), this.showTooltip && this.sliderElem.removeEventListener("mouseenter", this.showTooltip, !1), this.hideTooltip && this.sliderElem.removeEventListener("mouseleave", this.hideTooltip, !1), this.sliderElem.removeEventListener("touchstart", this.touchstart, !1), this.sliderElem.removeEventListener("touchmove", this.touchmove, !1), this.sliderElem.removeEventListener("mousedown", this.mousedown, !1), window.removeEventListener("resize", this.resize, !1) }, _bindNonQueryEventHandler: function (a, b) { void 0 === this.eventToCallbackMap[a] && (this.eventToCallbackMap[a] = []), this.eventToCallbackMap[a].push(b) }, _unbindNonQueryEventHandler: function (a, b) { var c = this.eventToCallbackMap[a]; if (void 0 !== c) for (var d = 0; d < c.length; d++)if (c[d] === b) { c.splice(d, 1); break } }, _cleanUpEventCallbacksMap: function () { for (var a = Object.keys(this.eventToCallbackMap), b = 0; b < a.length; b++) { var c = a[b]; delete this.eventToCallbackMap[c] } }, _showTooltip: function () { this.options.tooltip_split === !1 ? (this._addClass(this.tooltip, "in"), this.tooltip_min.style.display = "none", this.tooltip_max.style.display = "none") : (this._addClass(this.tooltip_min, "in"), this._addClass(this.tooltip_max, "in"), this.tooltip.style.display = "none"), this._state.over = !0 }, _hideTooltip: function () { this._state.inDrag === !1 && this.alwaysShowTooltip !== !0 && (this._removeClass(this.tooltip, "in"), this._removeClass(this.tooltip_min, "in"), this._removeClass(this.tooltip_max, "in")), this._state.over = !1 }, _setToolTipOnMouseOver: function (a) { function b(a, b) { return b ? [100 - a.percentage[0], this.options.range ? 100 - a.percentage[1] : a.percentage[1]] : [a.percentage[0], a.percentage[1]] } var c = this.options.formatter(a ? a.value[0] : this._state.value[0]), d = a ? b(a, this.options.reversed) : b(this._state, this.options.reversed); this._setText(this.tooltipInner, c), this.tooltip.style[this.stylePos] = d[0] + "%" }, _addTickListener: function () { return { addMouseEnter: function (a, b, c) { var d = function () { var b = a._state, d = c >= 0 ? c : this.attributes["aria-valuenow"].value, e = parseInt(d, 10); b.value[0] = e, b.percentage[0] = a.options.ticks_positions[e], a._setToolTipOnMouseOver(b), a._showTooltip() }; return b.addEventListener("mouseenter", d, !1), d }, addMouseLeave: function (a, b) { var c = function () { a._hideTooltip() }; return b.addEventListener("mouseleave", c, !1), c } } }, _layout: function () { var a; if (a = this.options.reversed ? [100 - this._state.percentage[0], this.options.range ? 100 - this._state.percentage[1] : this._state.percentage[1]] : [this._state.percentage[0], this._state.percentage[1]], this.handle1.style[this.stylePos] = a[0] + "%", this.handle1.setAttribute("aria-valuenow", this._state.value[0]), isNaN(this.options.formatter(this._state.value[0])) && this.handle1.setAttribute("aria-valuetext", this.options.formatter(this._state.value[0])), this.handle2.style[this.stylePos] = a[1] + "%", this.handle2.setAttribute("aria-valuenow", this._state.value[1]), isNaN(this.options.formatter(this._state.value[1])) && this.handle2.setAttribute("aria-valuetext", this.options.formatter(this._state.value[1])), this.rangeHighlightElements.length > 0 && Array.isArray(this.options.rangeHighlights) && this.options.rangeHighlights.length > 0) for (var b = 0; b < this.options.rangeHighlights.length; b++) { var c = this._toPercentage(this.options.rangeHighlights[b].start), d = this._toPercentage(this.options.rangeHighlights[b].end); if (this.options.reversed) { var e = 100 - d; d = 100 - c, c = e } var f = this._createHighlightRange(c, d); f ? "vertical" === this.options.orientation ? (this.rangeHighlightElements[b].style.top = f.start + "%", this.rangeHighlightElements[b].style.height = f.size + "%") : (this.options.rtl ? this.rangeHighlightElements[b].style.right = f.start + "%" : this.rangeHighlightElements[b].style.left = f.start + "%", this.rangeHighlightElements[b].style.width = f.size + "%") : this.rangeHighlightElements[b].style.display = "none" } if (Array.isArray(this.options.ticks) && this.options.ticks.length > 0) { var g, h = "vertical" === this.options.orientation ? "height" : "width"; g = "vertical" === this.options.orientation ? "marginTop" : this.options.rtl ? "marginRight" : "marginLeft"; var i = this._state.size / (this.options.ticks.length - 1); if (this.tickLabelContainer) { var j = 0; if (0 === this.options.ticks_positions.length) "vertical" !== this.options.orientation && (this.tickLabelContainer.style[g] = -i / 2 + "px"), j = this.tickLabelContainer.offsetHeight; else for (k = 0; k < this.tickLabelContainer.childNodes.length; k++)this.tickLabelContainer.childNodes[k].offsetHeight > j && (j = this.tickLabelContainer.childNodes[k].offsetHeight); "horizontal" === this.options.orientation && (this.sliderElem.style.marginBottom = j + "px") } for (var k = 0; k < this.options.ticks.length; k++) { var l = this.options.ticks_positions[k] || this._toPercentage(this.options.ticks[k]); this.options.reversed && (l = 100 - l), this.ticks[k].style[this.stylePos] = l + "%", this._removeClass(this.ticks[k], "in-selection"), this.options.range ? l >= a[0] && l <= a[1] && this._addClass(this.ticks[k], "in-selection") : "after" === this.options.selection && l >= a[0] ? this._addClass(this.ticks[k], "in-selection") : "before" === this.options.selection && l <= a[0] && this._addClass(this.ticks[k], "in-selection"), this.tickLabels[k] && (this.tickLabels[k].style[h] = i + "px", "vertical" !== this.options.orientation && void 0 !== this.options.ticks_positions[k] ? (this.tickLabels[k].style.position = "absolute", this.tickLabels[k].style[this.stylePos] = l + "%", this.tickLabels[k].style[g] = -i / 2 + "px") : "vertical" === this.options.orientation && (this.options.rtl ? this.tickLabels[k].style.marginRight = this.sliderElem.offsetWidth + "px" : this.tickLabels[k].style.marginLeft = this.sliderElem.offsetWidth + "px", this.tickLabelContainer.style[g] = this.sliderElem.offsetWidth / 2 * -1 + "px")) } } var m; if (this.options.range) { m = this.options.formatter(this._state.value), this._setText(this.tooltipInner, m), this.tooltip.style[this.stylePos] = (a[1] + a[0]) / 2 + "%"; var n = this.options.formatter(this._state.value[0]); this._setText(this.tooltipInner_min, n); var o = this.options.formatter(this._state.value[1]); this._setText(this.tooltipInner_max, o), this.tooltip_min.style[this.stylePos] = a[0] + "%", this.tooltip_max.style[this.stylePos] = a[1] + "%" } else m = this.options.formatter(this._state.value[0]), this._setText(this.tooltipInner, m), this.tooltip.style[this.stylePos] = a[0] + "%"; if ("vertical" === this.options.orientation) this.trackLow.style.top = "0", this.trackLow.style.height = Math.min(a[0], a[1]) + "%", this.trackSelection.style.top = Math.min(a[0], a[1]) + "%", this.trackSelection.style.height = Math.abs(a[0] - a[1]) + "%", this.trackHigh.style.bottom = "0", this.trackHigh.style.height = 100 - Math.min(a[0], a[1]) - Math.abs(a[0] - a[1]) + "%"; else { "right" === this.stylePos ? this.trackLow.style.right = "0" : this.trackLow.style.left = "0", this.trackLow.style.width = Math.min(a[0], a[1]) + "%", "right" === this.stylePos ? this.trackSelection.style.right = Math.min(a[0], a[1]) + "%" : this.trackSelection.style.left = Math.min(a[0], a[1]) + "%", this.trackSelection.style.width = Math.abs(a[0] - a[1]) + "%", "right" === this.stylePos ? this.trackHigh.style.left = "0" : this.trackHigh.style.right = "0", this.trackHigh.style.width = 100 - Math.min(a[0], a[1]) - Math.abs(a[0] - a[1]) + "%"; var p = this.tooltip_min.getBoundingClientRect(), q = this.tooltip_max.getBoundingClientRect(); "bottom" === this.options.tooltip_position ? p.right > q.left ? (this._removeClass(this.tooltip_max, "bottom"), this._addClass(this.tooltip_max, "top"), this.tooltip_max.style.top = "", this.tooltip_max.style.bottom = "22px") : (this._removeClass(this.tooltip_max, "top"), this._addClass(this.tooltip_max, "bottom"), this.tooltip_max.style.top = this.tooltip_min.style.top, this.tooltip_max.style.bottom = "") : p.right > q.left ? (this._removeClass(this.tooltip_max, "top"), this._addClass(this.tooltip_max, "bottom"), this.tooltip_max.style.top = "18px") : (this._removeClass(this.tooltip_max, "bottom"), this._addClass(this.tooltip_max, "top"), this.tooltip_max.style.top = this.tooltip_min.style.top) } }, _createHighlightRange: function (a, b) { return this._isHighlightRange(a, b) ? a > b ? { start: b, size: a - b } : { start: a, size: b - a } : null }, _isHighlightRange: function (a, b) { return a >= 0 && 100 >= a && b >= 0 && 100 >= b ? !0 : !1 }, _resize: function (a) { this._state.offset = this._offset(this.sliderElem), this._state.size = this.sliderElem[this.sizePos], this._layout() }, _removeProperty: function (a, b) { a.style.removeProperty ? a.style.removeProperty(b) : a.style.removeAttribute(b) }, _mousedown: function (a) { if (!this._state.enabled) return !1; a.preventDefault && a.preventDefault(), this._state.offset = this._offset(this.sliderElem), this._state.size = this.sliderElem[this.sizePos]; var b = this._getPercentage(a); if (this.options.range) { var c = Math.abs(this._state.percentage[0] - b), d = Math.abs(this._state.percentage[1] - b); this._state.dragged = d > c ? 0 : 1, this._adjustPercentageForRangeSliders(b) } else this._state.dragged = 0; this._state.percentage[this._state.dragged] = b, this._layout(), this.touchCapable && (document.removeEventListener("touchmove", this.mousemove, !1), document.removeEventListener("touchend", this.mouseup, !1)), this.mousemove && document.removeEventListener("mousemove", this.mousemove, !1), this.mouseup && document.removeEventListener("mouseup", this.mouseup, !1), this.mousemove = this._mousemove.bind(this), this.mouseup = this._mouseup.bind(this), this.touchCapable && (document.addEventListener("touchmove", this.mousemove, !1), document.addEventListener("touchend", this.mouseup, !1)), document.addEventListener("mousemove", this.mousemove, !1), document.addEventListener("mouseup", this.mouseup, !1), this._state.inDrag = !0; var e = this._calculateValue(); return this._trigger("slideStart", e), this._setDataVal(e), this.setValue(e, !1, !0), a.returnValue = !1, this.options.focus && this._triggerFocusOnHandle(this._state.dragged), !0 }, _touchstart: function (a) { if (void 0 === a.changedTouches) return void this._mousedown(a); var b = a.changedTouches[0]; this.touchX = b.pageX, this.touchY = b.pageY }, _triggerFocusOnHandle: function (a) { 0 === a && this.handle1.focus(), 1 === a && this.handle2.focus() }, _keydown: function (a, b) { if (!this._state.enabled) return !1; var c; switch (b.keyCode) { case 37: case 40: c = -1; break; case 39: case 38: c = 1 }if (c) { if (this.options.natural_arrow_keys) { var d = "vertical" === this.options.orientation && !this.options.reversed, e = "horizontal" === this.options.orientation && this.options.reversed; (d || e) && (c = -c) } var f = this._state.value[a] + c * this.options.step, g = f / this.options.max * 100; if (this._state.keyCtrl = a, this.options.range) { this._adjustPercentageForRangeSliders(g); var h = this._state.keyCtrl ? this._state.value[0] : f, i = this._state.keyCtrl ? f : this._state.value[1]; f = [h, i] } return this._trigger("slideStart", f), this._setDataVal(f), this.setValue(f, !0, !0), this._setDataVal(f), this._trigger("slideStop", f), this._layout(), this._pauseEvent(b), delete this._state.keyCtrl, !1 } }, _pauseEvent: function (a) { a.stopPropagation && a.stopPropagation(), a.preventDefault && a.preventDefault(), a.cancelBubble = !0, a.returnValue = !1 }, _mousemove: function (a) { if (!this._state.enabled) return !1; var b = this._getPercentage(a); this._adjustPercentageForRangeSliders(b), this._state.percentage[this._state.dragged] = b, this._layout(); var c = this._calculateValue(!0); return this.setValue(c, !0, !0), !1 }, _touchmove: function (a) { if (void 0 !== a.changedTouches) { var b = a.changedTouches[0], c = b.pageX - this.touchX, d = b.pageY - this.touchY; this._state.inDrag || ("vertical" === this.options.orientation && 5 >= c && c >= -5 && (d >= 15 || -15 >= d) ? this._mousedown(a) : 5 >= d && d >= -5 && (c >= 15 || -15 >= c) && this._mousedown(a)) } }, _adjustPercentageForRangeSliders: function (a) { if (this.options.range) { var b = this._getNumDigitsAfterDecimalPlace(a); b = b ? b - 1 : 0; var c = this._applyToFixedAndParseFloat(a, b); 0 === this._state.dragged && this._applyToFixedAndParseFloat(this._state.percentage[1], b) < c ? (this._state.percentage[0] = this._state.percentage[1], this._state.dragged = 1) : 1 === this._state.dragged && this._applyToFixedAndParseFloat(this._state.percentage[0], b) > c ? (this._state.percentage[1] = this._state.percentage[0], this._state.dragged = 0) : 0 === this._state.keyCtrl && this._state.value[1] / this.options.max * 100 < a ? (this._state.percentage[0] = this._state.percentage[1], this._state.keyCtrl = 1, this.handle2.focus()) : 1 === this._state.keyCtrl && this._state.value[0] / this.options.max * 100 > a && (this._state.percentage[1] = this._state.percentage[0], this._state.keyCtrl = 0, this.handle1.focus()) } }, _mouseup: function () { if (!this._state.enabled) return !1; this.touchCapable && (document.removeEventListener("touchmove", this.mousemove, !1), document.removeEventListener("touchend", this.mouseup, !1)), document.removeEventListener("mousemove", this.mousemove, !1), document.removeEventListener("mouseup", this.mouseup, !1), this._state.inDrag = !1, this._state.over === !1 && this._hideTooltip(); var a = this._calculateValue(!0); return this._layout(), this._setDataVal(a), this._trigger("slideStop", a), !1 }, _calculateValue: function (a) { var b; if (this.options.range ? (b = [this.options.min, this.options.max], 0 !== this._state.percentage[0] && (b[0] = this._toValue(this._state.percentage[0]), b[0] = this._applyPrecision(b[0])), 100 !== this._state.percentage[1] && (b[1] = this._toValue(this._state.percentage[1]), b[1] = this._applyPrecision(b[1]))) : (b = this._toValue(this._state.percentage[0]), b = parseFloat(b), b = this._applyPrecision(b)), a) { for (var c = [b, 1 / 0], d = 0; d < this.options.ticks.length; d++) { var e = Math.abs(this.options.ticks[d] - b); e <= c[1] && (c = [this.options.ticks[d], e]) } if (c[1] <= this.options.ticks_snap_bounds) return c[0] } return b }, _applyPrecision: function (a) { var b = this.options.precision || this._getNumDigitsAfterDecimalPlace(this.options.step); return this._applyToFixedAndParseFloat(a, b) }, _getNumDigitsAfterDecimalPlace: function (a) { var b = ("" + a).match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/); return b ? Math.max(0, (b[1] ? b[1].length : 0) - (b[2] ? +b[2] : 0)) : 0 }, _applyToFixedAndParseFloat: function (a, b) { var c = a.toFixed(b); return parseFloat(c) }, _getPercentage: function (a) { !this.touchCapable || "touchstart" !== a.type && "touchmove" !== a.type || (a = a.touches[0]); var b = a[this.mousePos], c = this._state.offset[this.stylePos], d = b - c; "right" === this.stylePos && (d = -d); var e = d / this._state.size * 100; return e = Math.round(e / this._state.percentage[2]) * this._state.percentage[2], this.options.reversed && (e = 100 - e), Math.max(0, Math.min(100, e)) }, _validateInputValue: function (a) { if (isNaN(+a)) { if (Array.isArray(a)) return this._validateArray(a), a; throw new Error(f.formatInvalidInputErrorMsg(a)) } return +a }, _validateArray: function (a) { for (var b = 0; b < a.length; b++) { var c = a[b]; if ("number" != typeof c) throw new Error(f.formatInvalidInputErrorMsg(c)) } }, _setDataVal: function (a) { this.element.setAttribute("data-value", a), this.element.setAttribute("value", a), this.element.value = a }, _trigger: function (b, c) { c = c || 0 === c ? c : void 0; var d = this.eventToCallbackMap[b]; if (d && d.length) for (var e = 0; e < d.length; e++) { var f = d[e]; f(c) } a && this._triggerJQueryEvent(b, c) }, _triggerJQueryEvent: function (a, b) { var c = { type: a, value: b }; this.$element.trigger(c), this.$sliderElem.trigger(c) }, _unbindJQueryEventHandlers: function () { this.$element.off(), this.$sliderElem.off() }, _setText: function (a, b) { "undefined" != typeof a.textContent ? a.textContent = b : "undefined" != typeof a.innerText && (a.innerText = b) }, _removeClass: function (a, b) { for (var c = b.split(" "), d = a.className, e = 0; e < c.length; e++) { var f = c[e], g = new RegExp("(?:\\s|^)" + f + "(?:\\s|$)"); d = d.replace(g, " ") } a.className = d.trim() }, _addClass: function (a, b) { for (var c = b.split(" "), d = a.className, e = 0; e < c.length; e++) { var f = c[e], g = new RegExp("(?:\\s|^)" + f + "(?:\\s|$)"), h = g.test(d); h || (d += " " + f) } a.className = d.trim() }, _offsetLeft: function (a) { return a.getBoundingClientRect().left }, _offsetRight: function (a) { return a.getBoundingClientRect().right }, _offsetTop: function (a) { for (var b = a.offsetTop; (a = a.offsetParent) && !isNaN(a.offsetTop);)b += a.offsetTop, "BODY" !== a.tagName && (b -= a.scrollTop); return b }, _offset: function (a) { return { left: this._offsetLeft(a), right: this._offsetRight(a), top: this._offsetTop(a) } }, _css: function (b, c, d) { if (a) a.style(b, c, d); else { var e = c.replace(/^-ms-/, "ms-").replace(/-([\da-z])/gi, function (a, b) { return b.toUpperCase() }); b.style[e] = d } }, _toValue: function (a) { return this.options.scale.toValue.apply(this, [a]) }, _toPercentage: function (a) { return this.options.scale.toPercentage.apply(this, [a]) }, _setTooltipPosition: function () { var a = [this.tooltip, this.tooltip_min, this.tooltip_max]; if ("vertical" === this.options.orientation) { var b; b = this.options.tooltip_position ? this.options.tooltip_position : this.options.rtl ? "left" : "right"; var c = "left" === b ? "right" : "left"; a.forEach(function (a) { this._addClass(a, b), a.style[c] = "100%" }.bind(this)) } else "bottom" === this.options.tooltip_position ? a.forEach(function (a) { this._addClass(a, "bottom"), a.style.top = "22px" }.bind(this)) : a.forEach(function (a) { this._addClass(a, "top"), a.style.top = -this.tooltip.outerHeight - 14 + "px" }.bind(this)) } }, a && a.fn) { var h = void 0; a.fn.slider ? (windowIsDefined && window.console.warn("bootstrap-slider.js - WARNING: $.fn.slider namespace is already bound. Use the $.fn.bootstrapSlider namespace instead."), h = c) : (a.bridget(b, d), h = b), a.bridget(c, d), a(function () { a("input[data-provide=slider]")[h]() }) } }(a), d });;

/* /theme_alan/static/src/js/product_share.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('theme_alan.product_share', function (require) {
    'use strict'; const publicWidget = require('web.public.widget'); publicWidget.registry.websiteBlog = publicWidget.Widget.extend({
        selector: '.product_share', events: { 'click .o_pinterest, .o_twitter, .o_facebook, .o_linkedin , .o_mail': '_onShareProduct', }, _onShareProduct: function (ev) {
            ev.preventDefault(); var url = ''; var $element = $(ev.currentTarget); var product_name = encodeURIComponent($('#product_name').html() || ''); var product_desc = encodeURIComponent($('#product_desc').html() || ''); var productURL = encodeURIComponent(window.location.href); var simpleProductURL = window.location.href; if ($element.hasClass('o_twitter')) { url = 'https://twitter.com/intent/tweet?tw_p=tweetbutton&text=Amazing Product : ' + product_name + ' ,' + product_desc + '! ' + productURL; } else if ($element.hasClass('o_facebook')) { url = 'https://www.facebook.com/sharer/sharer.php?u=' + productURL; } else if ($element.hasClass('o_linkedin')) { url = 'https://www.linkedin.com/sharing/share-offsite/?url=' + productURL; } else if ($element.hasClass('o_pinterest')) { url = 'http://pinterest.com/pin/create/button/?url=' + productURL + '&description=' + product_desc; }
            else if ($element.hasClass('o_mail')) { url = 'mailto:?subject=Check Amazing Product&amp;body=Check out this site' + simpleProductURL; }
            window.open(url, '', 'menubar=no, width=500, height=400');
        },
    });
});;

/* /theme_alan/static/src/js/product.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define("theme_alan.product", function (require) {
    "use strict"; const publicWidget = require("web.public.widget"); publicWidget.registry.product = publicWidget.Widget.extend({
        selector: "#wrapwrap", 'events': { 'click a.img-gallery-tag': '_productImageClick', 'click a.video-gallery-tag': '_productVideoClick', 'click div.slick-active': '_onClickThumbImg', 'click a.carousel-control-next': '_changeNxtImg', 'click a.carousel-control-prev': '_changePreImg', }, start: function () { self = this; this._super.apply(this, arguments); self.displayHeader(); }, _changePreImg: function (ev) {
            ev.preventDefault(); var $getActiveElm = this.$el.find('.thumb-active'); var thumbIndex = this.$el.find('.thumb-active').parent().parent().attr('data-slick-index'); var ProdCurrIndex = this.$el.find('.carousel-item.h-100.active').index(); ProdCurrIndex = ProdCurrIndex - 1; thumbIndex = parseInt(thumbIndex) - 1; var totalImg = $("#thumbs-sliders").attr('data-total_img'); var isVertical = $("[data-vertical='True']").length; var isHorizontal = $("[data-horizontal='True']").length; if (parseInt(totalImg) < 6 && isVertical == 1) { if (ProdCurrIndex == 0) { var createElem = "[data-slick-index=" + totalImg + "]"; $(createElem).children().children().addClass('thumb-active'); } }
            else if (parseInt(totalImg) < 7 && isHorizontal == 1) { if (ProdCurrIndex == 0) { var createElem = "[data-slick-index=" + totalImg + "]"; $(createElem).children().children().addClass('thumb-active'); } }
            if (ProdCurrIndex === -1 && thumbIndex === -1) {
                $getActiveElm.removeClass('thumb-active'); var getNumImg = $("#thumbs-sliders").attr('data-total_img'); getNumImg = parseInt(getNumImg); if (isVertical == true) { var jumpLastSlider = getNumImg - 5; } else { var jumpLastSlider = getNumImg - 6; }
                var lastImgIndex = getNumImg - 1; var createElem = "[data-slick-index=" + lastImgIndex + "]"; $(createElem).children().children().addClass('thumb-active'); $('.thumbnails-slides').slick('slickGoTo', jumpLastSlider);
            }
            else {
                if (ProdCurrIndex === thumbIndex) {
                    var getCurIdn = $getActiveElm.parent().parent().prev().attr('data-slick-index'); if (isVertical == 1) {
                        var maxSlider = totalImg - 5; if (getCurIdn >= maxSlider) { $('.thumbnails-slides').slick('slickGoTo', maxSlider); }
                        else { $('.thumbnails-slides').slick('slickGoTo', getCurIdn); }
                    } else {
                        var maxSlider = totalImg - 6; if (getCurIdn >= maxSlider) { $('.thumbnails-slides').slick('slickGoTo', maxSlider); }
                        else { $('.thumbnails-slides').slick('slickGoTo', getCurIdn); }
                    }
                    $getActiveElm.removeClass('thumb-active').parent().parent().prev().children().children().addClass('thumb-active');
                }
            };
        }, _changeNxtImg: function (ev) {
            ev.preventDefault(); var $getActiveElm = this.$el.find('.thumb-active'); var thumbIndex = this.$el.find('.thumb-active').parent().parent().attr('data-slick-index'); var ProdCurrIndex = this.$el.find('.carousel-item.h-100.active').index(); var totalImg = $("#thumbs-sliders").attr('data-total_img'); var totalImg = $("#thumbs-sliders").attr('data-total_img'); var isVertical = $("[data-vertical='True']").length; var isHorizontal = $("[data-horizontal='True']").length; totalImg = totalImg - 1; if (parseInt(totalImg) < 6 && isVertical == 1) { if (ProdCurrIndex == totalImg) { $("[data-slick-index='0']").children().children().addClass('thumb-active'); } }
            else if (parseInt(totalImg) < 7 && isHorizontal == 1) { if (ProdCurrIndex == totalImg) { $("[data-slick-index='0']").children().children().addClass('thumb-active'); } }
            if (ProdCurrIndex === parseInt(totalImg)) { $getActiveElm.removeClass('thumb-active'); $("[data-slick-index=0]").children().children().addClass('thumb-active'); $('.thumbnails-slides').slick('slickGoTo', 0); } else {
                if (ProdCurrIndex === parseInt(thumbIndex)) {
                    var getCurIdn = $getActiveElm.parent().parent().next().attr('data-slick-index')
                    if (isVertical == 1) {
                        var maxSlider = totalImg - 4; if (getCurIdn >= maxSlider) { $('.thumbnails-slides').slick('slickGoTo', maxSlider); }
                        else { $('.thumbnails-slides').slick('slickGoTo', getCurIdn); }
                    } else {
                        var maxSlider = totalImg - 5; if (getCurIdn >= maxSlider) { $('.thumbnails-slides').slick('slickGoTo', maxSlider); }
                        else { $('.thumbnails-slides').slick('slickGoTo', getCurIdn); }
                    }
                    $getActiveElm.removeClass('thumb-active').parent().parent().next().children().children().addClass('thumb-active');
                }
            }
        }, _onClickThumbImg: function (e) { this.$el.find('.thumb-active').removeClass('thumb-active'); $(e.currentTarget).children().children().addClass('thumb-active'); }, _productImageClick: function (e) { e.preventDefault(); $(e.currentTarget).parent().parent().magnificPopup({ delegate: 'a', type: 'image', gallery: { enabled: true, } }) }, _productVideoClick: function (e) { e.preventDefault(); $(e.currentTarget).parent().magnificPopup({ delegate: 'a', disableOn: 700, type: 'iframe', mainClass: 'mfp-fade', removalDelay: 160, preloader: false, fixedContentPos: false }); }, displayHeader: function () {
            $("#wrapwrap").on("scroll", function () {
                const getPriceHtml = $("div#product_details .product_price").html(); if ($(".as_prod_sticky").length && $("div#product_details a#add_to_cart").length) {
                    if ($(this).scrollTop() > $("div#product_details a#add_to_cart").offset().top) {
                        $("div#wrapwrap .as_prod_sticky").fadeIn(); if ($(".js_product .js_main_product").hasClass("css_not_available")) { $("div#wrapwrap .prod_price").html(""); $(".as_prod_sticky .as_add_cart #add_to_cart, .as_prod_sticky .as_add_cart #buy_now").addClass("disabled"); } else { $("div#wrapwrap .prod_price").html(getPriceHtml); $(".as_prod_sticky .as_add_cart #add_to_cart, .as_prod_sticky .as_add_cart #buy_now").removeClass("disabled"); }
                        $(".as_prod_sticky .as_add_cart #add_to_cart").click(function () { $("div#product_details .js_product .js_main_product #add_to_cart").trigger("click"); }); $(".as_prod_sticky .as_add_cart #buy_now").click(function () { $("div#product_details .js_product .js_main_product #buy_now").trigger("click"); });
                    } else { $("div#wrapwrap .as_prod_sticky").fadeOut(); }
                }
            });
        },
    });
});;

/* /theme_alan/static/src/js/shop.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('theme_alan.shop', function (require) {
    'use strict'; const sAnimations = require('website.content.snippets.animation'); var publicWidget = require('web.public.widget'); sAnimations.registry.shopScript = sAnimations.Class.extend({
        selector: '.oe_website_sale', read_events: { 'click .clear_filter': '_onClearAttribute', 'click .as_attribute_name': '_onAttributeClick', 'click .as-collapse-widget': '_onAttrTitleClick', 'click .tag-open-close': '_toggleTag', 'click .tag-item': '_onTagClick', 'click .div_class_price_filter_heading': '_onPriceClick' }, _onPriceClick: function (ev) { var $getTags = $(ev.currentTarget).next(); if ($getTags.hasClass('show_price_section')) { $getTags.removeClass('hide_price_section').slideToggle('slow'); } else { $getTags.addClass('show_price_section').slideToggle('slow'); } }, _toggleTag: function (ev) { var $getTags = $(ev.currentTarget).parent().next(); if ($getTags.hasClass('show_tag_section')) { $getTags.removeClass('hide_tag_section').slideToggle('slow'); } else { $getTags.addClass('show_tag_section').slideToggle('slow'); } }, _onTagClick: function (ev) { $(ev.currentTarget).parents('form.js_product_tags').submit(); }, _onAttrTitleClick: function (evt) {
            if ($(evt.currentTarget).hasClass('open') === false) { $(evt.currentTarget).addClass('open'); }
            else { $(evt.currentTarget).removeClass('open'); }
        }, _onClearAttribute: function (ev) { ev.stopPropagation(); var self = ev.currentTarget; var $attr_box = $(self).parents('li.nav-item'); $attr_box.find("input[name='attrib'][value^='" + $(self).data("attr_id") + "-']").each(function () { $(this).prop('checked', false); }); var id = $(self).attr('data-id'); $attr_box.find("option[selected='True']").each(function () { $(this).removeAttr('selected'); }); $attr_box.find("input[name='brand']").each(function () { $(this).removeAttr('checked'); }); $attr_box.find("input[name='rating']").each(function () { $(this).removeAttr('checked'); }); $attr_box.find("input[name='tags']").each(function () { $(this).removeAttr('checked'); }); $(self).parents('form.js_attributes').submit(); }, _onAttributeClick: function (ev) {
            var self = ev.currentTarget; var attr_li = $(self).parents('li.nav-item'); var attr_ul = attr_li.find('ul'); var select_attr = attr_li.find('select'); if (attr_ul.hasClass('show_section')) { attr_ul.removeClass('show_section').toggle('slow'); } else { attr_ul.addClass('show_section').toggle('slow'); }
            if (select_attr.length == 1) {
                $('select.form-control.open_select').css('display', 'block'); if (select_attr.hasClass('show_select')) { select_attr.removeClass('show_select').toggle('slow'); }
                else { select_attr.addClass('show_select').toggle('slow'); }
            }
            var color_attr = attr_li.find('div.collapsible_attr_color'); if (color_attr.length == 1) {
                if (color_attr.hasClass('show_color')) { color_attr.removeClass('show_color').toggle('slow'); }
                else { color_attr.addClass('show_color').toggle('slow'); }
            }
        },
    }); var change_in_price_filter = false; publicWidget.registry.shopAttFiler = publicWidget.Widget.extend({ 'selector': '#wrapwrap', events: { 'change #price_filter_input': '_priceFilterChange', 'click #products_grid_before .apply_price_filter': '_subFilterVals', 'click .as_aside_filter_open': '_openFilter', 'click .as_aside_filter_close': '_closeFilter', 'click .mm-mega-menu .mob_menu': '_mobileView_mm', 'click .mm-category-level .mob_menu': '_mobileView_mm_cat', }, init: function () { this._super.apply(this, arguments); $('#top_menu .dropdown > .dropdown-toggle').after("<span class='mob_menu' data-toggle='dropdown' aria-expanded='false'></span>"); $('.mm-mega-menu .mm-cat-level-1 > .cat-level-title .mm-title').after("<span class='mob_menu'></span>"); }, _openFilter: function (evt) { $(evt.currentTarget).addClass('active'); $('.as-aside-filter-close').addClass('active'); $('#products_grid_before').addClass('products_grid_before_open'); }, _closeFilter: function () { $('.as-aside-filter-close').removeClass('active'); $('.as_aside_filter_open').removeClass('active'); $('#products_grid_before').removeClass('products_grid_before_open'); }, _mobileView_mm: function (evt) { $(evt.currentTarget).parent('li').toggleClass('open-mob-menu'); $(evt.currentTarget).toggleClass('mob-menu-open'); }, _mobileView_mm_cat: function (evt) { $(evt.currentTarget).parent().parent('.mm-cat-level-1').toggleClass('open-mob-menu'); $(evt.currentTarget).toggleClass('mob-menu-open'); }, _priceFilterChange: function (evt) { if ($(evt.currentTarget).val()) { var prices = $(evt.currentTarget).val().split(','); $('#min_val').val(prices[0]); $('#max_val').val(prices[1]); $('span.text_min_val').text(prices[0]); $('span.text_max_val').text(prices[1]); change_in_price_filter = true; } }, _subFilterVals: function () { $('#products_grid_before form.js_attributes').submit(); } });
});;

/* /theme_alan/static/src/js/cart.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('theme_alan.cart', function (require) {
    'use strict'; var publicWidget = require('web.public.widget'); var wSaleUtils = require('website_sale.utils'); var rpc = require('web.rpc')
    publicWidget.registry.AtharvaCart = publicWidget.Widget.extend({
        selector: '#wrapwrap', init: function () { this._super.apply(this, arguments); }, _onClickRemoveProduct: function (ev) { ev.preventDefault(); $(ev.currentTarget).siblings().find('.js_quantity').val(0).trigger('change'); }, _onUpdateQty: function (ev) {
            ev.preventDefault(); var $link = $(ev.currentTarget); var $input = $link.closest('.input-group').find('input'); var min = parseFloat($input.data('min') || 0); var max = parseFloat($input.data('max') || Infinity); var previousQty = parseFloat($input.val() || 0, 10); var quantity = ($link.has('.fa-minus').length ? -1 : 1) + previousQty; var newQty = quantity > min ? (quantity < max ? quantity : max) : min; if (newQty !== previousQty) { $input.val(newQty).trigger('change'); }
            return false;
        }, _onChangeQty: function (ev) {
            var $input = $(ev.currentTarget); var self = this; $input.data('update_change', false); var value = parseInt($input.val() || 0, 10); if (isNaN(value)) { value = 1; }
            var line_id = parseInt($input.data('line-id'), 10); rpc.query({ route: '/shop/cart/update_json', params: { line_id: line_id, product_id: parseInt($input.data('product-id'), 10), set_qty: value }, }).then(function (data) {
                $input.data('update_change', false); var check_value = parseInt($input.val() || 0, 10); if (isNaN(check_value)) { check_value = 1; }
                if (value !== check_value) { $input.trigger('change'); return; }
                if (!data.cart_quantity) { return window.location = '/shop'; }
                wSaleUtils.updateCartNavBar(data); $input.val(data.quantity); $('.js_quantity[data-line-id=' + line_id + ']').val(data.quantity).html(data.quantity); $.get('/shop/cart', { type: 'cart_lines_popup', }).then(function (data) { $('.cart_lines_popup').empty().html(data); $('a.js_add_cart_json').on('click', function (ev) { ev.preventDefault(); self._onUpdateQty(ev) }); $('.js_quantity[data-product-id]').off('change').on('change', function (ev) { ev.preventDefault(); self._onChangeQty(ev) }); $('a.js_delete_product').off('click').on('click', function (ev) { ev.preventDefault(); self._onClickRemoveProduct(ev) }); });
            });
        }
    }); publicWidget.registry.atharvaCartLink = publicWidget.Widget.extend({ selector: '#wrapwrap', events: { 'click header #my_cart .my_cart_btn': '_onCartClick', 'click .cart_lines_popup .m_c_close': '_onCloseClick', }, _onCartClick: function (ev) { var $target = $(ev.currentTarget); $.get('cart.html', { type: 'cart_lines_popup' }).then(function (data) { var cartUpdate = new publicWidget.registry.AtharvaCart(); if (data.trim()) { var $mini_cart_popup = $target.parents('header').find('.cart_lines_popup'); $mini_cart_popup.empty().append(data.trim()).addClass('show_mini_cart'); $('body').addClass('cart-open-on-body'); $('a.js_add_cart_json').off('click').on('click', function (ev) { ev.preventDefault(); cartUpdate._onUpdateQty(ev) }); $('.js_quantity[data-product-id]').off('change').on('change', function (ev) { ev.preventDefault(); cartUpdate._onChangeQty(ev) }); $('a.js_delete_product').off('click').on('click', function (ev) { ev.preventDefault(); cartUpdate._onClickRemoveProduct(ev) }); } }); ev.stopPropagation(); }, _onCloseClick: function (ev) { $(ev.currentTarget).parents('.cart_lines_popup').removeClass('show_mini_cart'); $('body').removeClass('cart-open-on-body'); }, });
});;

/* /theme_alan/static/src/js/login_popup.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define("theme_alan.login_pop_js", function (require) {
    "use strict"; var publicWidget = require("web.public.widget"); publicWidget.registry.loginpop = publicWidget.Widget.extend({
        "selector": "#wrapwrap", "events": { "click .loginpop": "_openPopAndRenderTemp", "click .loginbtn": "_checkAuthentication", "click .haveAccount": "_backToLogin", "click .signupbtn": "_userSignup", "click .resetbtn": "_resetFormTemp", "click .resetbtnconf": "_resetPassword" }, _resetPassword: function (ev) {
            if ($("#loginr").val().trim() != "") {
                ev.preventDefault(); return this._rpc({ route: "/json/web/reset_password", params: { "login": $("#loginr").val(), } }).then(function (result) {
                    if ("error" in result) { $("#errorr").css("display", "block").empty().append(result["error"]); }
                    else if ("message" in result) { $("#reset_form").css("display", "none"); $("#msgbox").css("display", "block"); $("#messager").empty().append(result["message"]); }
                });
            }
        }, _resetFormTemp: function () { $("#nav-reset-tab").click(); }, _userSignup: function (ev) {
            if ($("#logins").val().trim() != "" && $("#passwords").val().trim() != "" && $("#confirm_passwords").val().trim() != "" && $("#names").val().trim() != "") {
                ev.preventDefault(); return this._rpc({ route: "/json/signup/", params: { "login": $("#logins").val(), "name": $("#names").val(), "mobile": $("#mobile").val(), "name": $("#names").val(), "password": $("#passwords").val(), "confirm_password": $("#confirm_passwords").val(), "token": $("#token").val() } }).then(function (result) {
                    if ("error" in result) { $("#errors").css("display", "block").empty().append(result["error"]) }
                    else if (result["signup_success"] == true) { window.location.reload(); }
                });
            }
        }, _backToLogin: function () { $("#nav-login-tab").click(); }, _openPopAndRenderTemp: function (evt) {
            var theme_name = $(evt.currentTarget).attr('data-theme_name'); return this._rpc({ route: "/json/login/", params: { 'theme_name': theme_name } }).then(function (result) {
                $("#nav-login").empty().append(result["loginTemp"]); $("#nav-login-tab").click(); if ("signupTemp" in result) { $("#nav-register").empty().append(result["signupTemp"]); }
                if ("resetTemp" in result) { $("#nav-reset").empty().append(result["resetTemp"]); }
            });
        }, _checkAuthentication: function (ev) {
            if ($("#login").val().trim() != "" && $("#password").val().trim() != "") {
                ev.preventDefault(); return this._rpc({ route: "/json/web/login", params: { "login": $("#login").val(), "password": $("#password").val() } }).then(function (result) {
                    if (result["login_success"] == true) { window.location.reload(); }
                    else if ("error" in result) { $("#errormsg").css("display", "block").empty().append(result["error"]); }
                });
            }
        }
    });
});;

/* /theme_alan/static/src/js/load_on_scroll.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('theme_alan.load_on_scroll', function (require) { 'use strict'; var publicWidget = require('web.public.widget'); var call = false; publicWidget.registry.ajaxProductLoadAuto = publicWidget.Widget.extend({ selector: 'div#wrapwrap', events: { 'scroll': '_autoLoadShopProduct' }, _autoLoadShopProduct: function () { if ($('#nxt').offset() != undefined) { var gettop = $('#nxt').offset().top; var getheight = $('#nxt').outerHeight(); var getwindowheight = $(window).height(); var nxtbtnpos = gettop + getheight - getwindowheight; if (nxtbtnpos < 30) { if (call != true) { $('#nxt').click(); call = true; } } else { call = false; } } } }); });;

/* /theme_alan/static/src/js/quick_alternative.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('theme_alan.quick_alternative_view', function (require) {
    'use strict'; var publicWidget = require('web.public.widget'); publicWidget.registry.quick_altern = publicWidget.Widget.extend({
        'selector': '#wrapwrap', 'events': { 'click a.o_alter_view': '_getAlternativeProduct' }, _getAlternativeProduct: function (ev) {
            var prod_temp_id = $(ev.currentTarget).attr('data-product_template_id'); return this._rpc({ route: '/json/alternative_product/', params: { 'prod_tmp_id': prod_temp_id, } }).then(function (result) {
                var $mini_popup_temp = $('html').find('.cart_lines_popup'); if ($mini_popup_temp.length == 0) { $('html').find('header').append('<div class="cart_lines_popup"/>'); }
                var $mini_popup_temp = $('html').find('.cart_lines_popup'); $mini_popup_temp.empty().append(result['quickAlterTemp'].trim()).addClass('show_mini_cart'); $('body').addClass('cart-open-on-body');
            });
        }
    });
});;

/* /theme_alan/static/src/js/megamenu_front.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define("theme_alan.megamenu_front_js", function (require) {
    "use strict"; var publicWidget = require("web.public.widget"); publicWidget.registry.megemenu_multi_leve = publicWidget.Widget.extend({
        "selector": "#wrapwrap", events: { "mouseenter header li.mm-mega-menu": "_active_mm", "mouseenter .mm-cat-level-1": "_active_menu", "mouseleave .mm-cat-level-1": "_inactive_menu", }, _active_mm: function (evt) { if ($(evt.currentTarget).find(".mm-maga-main.mm-mega-cat-level").length > 0) { var $first_tab = $(evt.currentTarget).find(".mm-category-level .mm-cat-level-1:eq(0)"); $first_tab.find(".cat-level-title").addClass("active-li"); $first_tab.find(".mm-cat-level-2").addClass("menu-active"); } }, _active_menu: function (evt) { var $first_div = $(evt.currentTarget).find(".cat-level-title"); $first_div.addClass("active-li"); $(evt.currentTarget).find(".mm-cat-level-2").addClass("menu-active"); }, _inactive_menu: function (evt) {
            var $first_div = $(evt.currentTarget).find(".cat-level-title")
            $first_div.removeClass("active-li"); $(evt.currentTarget).find(".mm-cat-level-2").removeClass("menu-active");
        }
    });
});;

/* /theme_alan/static/src/js/quick_add_to_cart.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('theme_alan.quick_add_to_cart', function (require) {
    "use strict"; var publicWidget = require('web.public.widget'); var varientMixin = require('sale.VariantMixin'); var random_index = 0; var random_class_list = ['warning', 'primary', 'secondary']; publicWidget.registry.quickAddToCart = publicWidget.Widget.extend({
        selector: '#wrapwrap', events: { "click a.js_quick_cart": "_quickAddToCart", "click a.ajax_add_cart": "_ajaxAddToCart", "click a.ajax_cart_no_varient": "_ajaxAddCartNoVerient" }, _quickCart: function (self, prod_varient_id, product_temp_id, formVals, customVals, varient) {
            return self._rpc({ route: '/quick_update_cart', params: { 'prod_varient_id': prod_varient_id, 'product_temp_id': product_temp_id, 'varient': varient, 'formVals': formVals, 'customVals': customVals } }).then(function (result) {
                if (result["warning"] != false) {
                    if ($('#wrapwrap > #cart_warning_content').length === 0)
                        $('#wrapwrap').append("<div id='cart_warning_content'></div>"); $("#wrapwrap > #cart_warning_content").append("<div class='add_cart_warning alert alert-" + random_class_list[random_index % 3] + " alert-dismissible fade show'  role='alert'><p class='warning-msg'>" + result['warning'] + "</p><button class='close-btn' type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button></div>"); random_index++;
                } else {
                    var preCartQty = self.$target.find('.my_cart_quantity').html(); if (preCartQty.trim() != '') { var currCartQty = parseInt(preCartQty) + result['add_qty']; self.$target.find('.my_cart_quantity').html(currCartQty); } else { self.$target.find('.my_cart_quantity').html(result['add_qty']); }
                    return self._rpc({ route: '/quick_suggestion_and_notifier', params: { 'prod_id': result['prod_temp_id'] } }).then(function (result) { self.$target.find('.quick_cart_base').empty().append(result['template']); self.$target.find('#quick_cart_detail_modal').modal('show'); $('.as_confirm_product_slider').owlCarousel({ loop: true, rewind: true, margin: 10, nav: true, lazyLoad: true, dots: false, navText: ['<span aria-label="Previous"></span>', '<span aria-label="Next"></span>'], items: 2, }); return false; });
                }
            });
        }, _ajaxAddCartNoVerient: function (ev) { var self = this; var prod_varient_id = $(ev.currentTarget).data('product_varient_id'); var prod_temp_id = $(ev.currentTarget).data('product_template_id'); this._quickCart(self, prod_varient_id, prod_temp_id, [], [], false); }, _ajaxAddToCart: function (ev) { var self = this; var $getForm = $(ev.currentTarget).parents('form'); var formVals = $getForm.serializeArray(); var product_varient_id = formVals[1]['value']; var product_temp_id = formVals[2]['value']; var customVals = varientMixin.getCustomVariantValues($getForm); this._quickCart(self, product_varient_id, product_temp_id, formVals, customVals, true); }, _quickAddToCart: function (ev) {
            var self = this; var prodId = $(ev.currentTarget).data('product-id')
            return this._rpc({ route: '/get/quick_add_to_cart', params: { 'prodId': prodId } }).then(function (result) {
                self.$target.find('.quick_cart_base').empty().append(result['template']); self.$target.find('#quick_cart_modal').modal('show'); var sale = new publicWidget.registry.WebsiteSale(); sale.init(); $("[data-attribute_exclusions]").on("change", function (event) { sale.onChangeVariant(event); }); $("[data-attribute_exclusions]").trigger("change"); $(".css_attribute_color input").click(function (event) { sale._changeColorAttribute(event); }); $(".a-submit").on("click", function (event) { sale._onClickAdd(event); }); $('#buy_now').on('click', function (event) { sale._onClickAdd(event); })
                $("a.js_add_cart_json").on("click", function (event) { sale._onClickAddCartJSON(event); }); $("input[name='add_qty']").on("change", function (event) { sale._onChangeAddQuantity(event); });
            });
        }
    }); publicWidget.registry.WebsiteSale.include({ _onClickAdd: function (ev) { ev.preventDefault(); var is_quick_cart_active = $(ev.currentTarget).hasClass("quick-add-to-cart-active"); if (is_quick_cart_active != true) { this.isBuyNow = $(ev.currentTarget).attr('id') === 'buy_now'; return this._handleAdd($(ev.currentTarget).closest('form')); } }, });
});;

/* /theme_alan/static/src/snippets/s_brand_product_slider/000.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('theme_alan.s_brand_product_slider', function (require) {
    'use strict'; var sAnimation = require('website.content.snippets.animation'); var ajax = require('web.ajax'); sAnimation.registry.brand_product_slider_actions = sAnimation.Class.extend({
        selector: '.as_brand_product', disabledInEditableMode: false, start: function (editable_mode) {
            var self = this; if (self.editableMode) { var getSliderName = self.$target.attr('data-slider-style-name') == undefined ? '' : self.$target.attr('data-slider-style-name'); self.$target.find('div').empty().append('<div class="seaction-head"><h2>Brand Product Slider: ' + getSliderName + '</h2></div>'); }
            if (!self.editableMode) { var style_id = self.$target.attr('data-slider-style-id'); var brand_ids = self.$target.attr('data-slider-brand-id'); ajax.jsonRpc('/get_brand_products_data', 'call', { 'style_id': style_id, 'brand_ids': brand_ids }).then(function (data) { if (data) { self.$target.find('div').empty().append(data); self.initialize_owl(); } }); }
        }, initialize_owl: function () { $('.as-product-carousel').owlCarousel({ loop: false, rewind: true, margin: 10, nav: true, lazyLoad: true, dots: false, navText: ['<span aria-label="Previous"></span>', '<span aria-label="Next"></span>'], items: 4, responsive: { 0: { items: 1, }, 481: { items: 2, }, 768: { items: 2, }, 1024: { items: 4, }, 1200: { items: 4, } }, }); },
    });
});;

/* /theme_alan/static/src/snippets/s_brand_slider/000.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('theme_alan.s_brand_slider', function (require) {
    'use strict'; var sAnimation = require('website.content.snippets.animation'); var ajax = require('web.ajax'); sAnimation.registry.brand_slider_actions = sAnimation.Class.extend({
        selector: '.as_brand_slider', disabledInEditableMode: false, start: function (editable_mode) {
            var self = this; if (self.editableMode) { self.$target.empty().append('<div class="container"><div class="seaction-head"><h2>' + self.$target.attr('data-collection_name') + '</h2></div></div>'); }
            if (!self.editableMode) { this.getBrandData(); }
        }, getBrandData: function () {
            var self = this; var list_id = self.$target.attr('data-collection_id') || false; ajax.jsonRpc('/shop/get_brand_snippet_content', 'call', { 'collection_id': list_id }).then(function (data) {
                if (!data.disable_group) {
                    var slider = data.slider
                    var autoplay = data.auto_slider_value
                    var items = data.item_count
                    var slider_timing = data.slider_timing
                    self.$target.empty().append(slider); self.$target.find('.as_our_brand').owlCarousel({ loop: true, rewind: true, margin: 10, nav: true, lazyLoad: true, dots: false, navText: ['<span aria-label="Previous"></span>', '<span aria-label="Next"></span>'], autoplay: autoplay, autoplaySpeed: parseInt(slider_timing) || 5000, autoplayTimeout: 3000, autoplayHoverPause: true, items: items, responsive: { 0: { items: 2, }, 481: { items: 3, }, 768: { items: 4, }, 1024: { items: parseInt(items) || 4, } } });
                } else { self.$target.empty().append("<div class='alert alert-danger'> Record has been deleted or disable </div>"); }
            });
        },
    });
});;

/* /theme_alan/static/src/snippets/s_category_product_slider/000.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('theme_alan.s_category_product_slider', function (require) {
    'use strict'; var sAnimation = require('website.content.snippets.animation'); var ajax = require('web.ajax'); sAnimation.registry.category_product_slider_actions = sAnimation.Class.extend({
        selector: '.as_category_product', disabledInEditableMode: false, start: function (editable_mode) {
            var self = this; if (self.editableMode) { var getSliderName = self.$target.attr('data-slider-style-name') == undefined ? '' : self.$target.attr('data-slider-style-name'); self.$target.find('div').empty().append('<div class="seaction-head"><h2>Category Product Slider: ' + getSliderName + '</h2></div>'); }
            if (!self.editableMode) { var style_id = self.$target.attr('data-slider-style-id'); var category_ids = self.$target.attr('data-slider-category-id'); ajax.jsonRpc('/get_category_products_data', 'call', { 'style_id': style_id, 'category_ids': category_ids }).then(function (data) { if (data) { self.$target.find('div').empty().append(data); self.initialize_owl(); } }); }
        }, initialize_owl: function () { $('.as-product-carousel').owlCarousel({ loop: false, rewind: true, margin: 10, nav: true, lazyLoad: true, dots: false, navText: ['<span aria-label="Previous"></span>', '<span aria-label="Next"></span>'], items: 4, responsive: { 0: { items: 1, }, 481: { items: 2, }, 768: { items: 2, }, 1024: { items: 4, }, 1200: { items: 4, } }, }); },
    });
});;

/* /theme_alan/static/src/snippets/s_category_slider/000.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('theme_alan.s_category_slider', function (require) {
    'use strict'; var ajax = require('web.ajax'); var sAnimation = require('website.content.snippets.animation'); sAnimation.registry.cat_slider_actions = sAnimation.Class.extend({
        selector: '.as_cat_slider', disabledInEditableMode: false, start: function (editable_mode) {
            var self = this; if (self.editableMode) { self.$target.empty().append('<div class="container"><div class="seaction-head"><h2> ' + self.$target.attr('data-collection_name') + ' </h2></div></div>'); }
            if (!self.editableMode) { this.getCategoryData(); }
        }, getCategoryData: function () { var self = this; var list_id = self.$target.attr('data-collection_id') || false; ajax.jsonRpc('#', 'call', { 'collection_id': list_id }).then(function (data) { if (!data.disable_group) { self.$target.empty().append(data.slider); self.$target.find
            
            $(document).ready(function() { $('#as_category_slider_1').owlCarousel({ items: 8, margin: 10, loop: true, autoplay: false, autoplaySpeed: 5000, 
                autoplayHoverPause: true, dots: false, nav: true, lazyLoad: true, navText: ['<span aria-label="Previous"></span>', '<span aria-label="Next"></span>'], 
            responsive: { 0: { items: 4, }, 481: { items: 6, }, 768: { items: 6, }, 1024: { items: 8, } } }); 
            
            self.$target.find('#as_category_slider_3')
            .owlCarousel({ items: 2, center: true, loop: true, margin: 10, autoplay: false, autoplaySpeed: 5000,
                 autoplayHoverPause: true, dots: false, nav: true, lazyLoad: true, navText: ['<span aria-label="Previous"></span>', '<span aria-label="Next"></span>'], 
                 responsive: { 0: { items: 1, }, 481: { items: 1, }, 768: { items: 2, } } }); 
                 self.$target.find('#as_category_slider_4').owlCarousel({ items: 2, loop: true, margin: 0, autoplay: false, autoplaySpeed: 5000, 
                    autoplayHoverPause: true, dots: false, nav: true, lazyLoad: true, navText: ['<span aria-label="Previous"></span>', '<span aria-label="Next"></span>'], 
                    responsive: { 0: { items: 1, }, 481: { items: 2, }, 768: { items: 2, }, 992: { items: 3, }, 1200: { items: 4, }, 1300: { items: 5, } } }); 
                    self.$target.find('#as_category_slider_6').owlCarousel({ items: 2, center: true, loop: true, margin: 0, autoplay: false, autoplaySpeed: 5000, 
                        autoplayHoverPause: true, dots: false, nav: true, lazyLoad: true, navText: ['<span aria-label="Previous"></span>', '<span aria-label="Next"></span>'], 
                        responsive: { 0: { items: 2, }, 481: { items: 2, }, 768: { items: 3, }, 992: { items: 4, }, 1200: { items: 4, } } }); } 
                        else { self.$target.empty().append("<div class='alert alert-danger'> Record has been deleted or disable </div>"); } }); },
    });
});;

/* /theme_alan/static/src/snippets/s_best_seller_product/000.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('theme_alan.s_best_seller_product', function (require) {
    'use strict'; var sAnimation = require('website.content.snippets.animation'); var ajax = require('web.ajax'); sAnimation.registry.best_seller_product_slider_actions = sAnimation.Class.extend({
        selector: '.as_best_seller', disabledInEditableMode: false, start: function (editable_mode) {
            var self = this; if (self.editableMode) { var getSliderName = self.$target.attr('data-slider-style-name') == undefined ? '' : self.$target.attr('data-slider-style-name'); self.$target.find('div').empty().append('<div class="seaction-head"><h2>Product Best Seller Slider: ' + getSliderName + '</h2></div>'); }
            if (!self.editableMode) { var style_id = self.$target.attr('data-slider-style-id'); ajax.jsonRpc('/get_best_seller_product_data', 'call', { 'style_id': style_id }).then(function (data) { if (data) { self.$target.find('div').empty().append(data); self.initialize_owl(); } }); }
        }, initialize_owl: function () { $('.as-product-carousel').owlCarousel({ loop: false, rewind: true, margin: 10, nav: true, lazyLoad: true, dots: false, navText: ['<span aria-label="Previous"></span>', '<span aria-label="Next"></span>'], items: 4, responsive: { 0: { items: 1, }, 481: { items: 2, }, 768: { items: 2, }, 1024: { items: 4, }, 1200: { items: 4, } }, }); },
    });
});;

/* /theme_alan/static/src/snippets/s_blog_slider/000.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('theme_alan.s_blog_slider', function (require) {
    'use strict'; var publicWidget = require('web.public.widget'); publicWidget.registry.latest_blog = publicWidget.Widget.extend({
        selector: '.web_blog_slider', disabledInEditableMode: false, start: function (editable_mode) {
            var self = this; if (self.editableMode) { self.$target.empty().append('<div class="seaction-head"><h2>Blog Slider</h2></div>'); }
            if (!self.editableMode) { var list_id = self.$target.attr('data-blog_list-id') || false; $.get('/blog/get_blog_content', { 'blog_config_id': list_id }).then(function (data) { if (data) { self.$target.empty().append(data); self.$target.removeClass('hidden'); $('.tqt-blog-slide').owlCarousel({ items: 4, navText: ['<span aria-label="Previous"></span>', '<span aria-label="Next"></span>'], margin: 30, lazyLoad: true, dots: true, nav: true, responsive: { 0: { items: 1, }, 481: { items: 2, }, 768: { items: 2, }, 1024: { items: 3, } } }); } }); }
        },
    });
});;

/* /theme_alan/static/src/snippets/s_latest_product_slider/000.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('theme_alan.s_latest_product_slider', function (require) {
    'use strict'; var sAnimation = require('website.content.snippets.animation'); var ajax = require('web.ajax'); sAnimation.registry.latest_product_slider_actions = sAnimation.Class.extend({
        selector: '.as_latest_product', disabledInEditableMode: false, start: function (editable_mode) {
            var self = this; if (self.editableMode) { var getSliderName = self.$target.attr('data-slider-style-name') == undefined ? '' : self.$target.attr('data-slider-style-name'); self.$target.find('div').empty().append('<div class="seaction-head"><h2>Latest Product Slider: ' + getSliderName + '</h2></div>'); }
            if (!self.editableMode) { var style_id = self.$target.attr('data-slider-style-id'); ajax.jsonRpc('/get_latest_product_data', 'call', { 'style_id': style_id }).then(function (data) { if (data) { self.$target.find('div').empty().append(data); self.initialize_owl(); } }); }
        }, initialize_owl: function () { $('.as-product-carousel').owlCarousel({ loop: false, rewind: true, margin: 10, nav: true, lazyLoad: true, dots: false, navText: ['<span aria-label="Previous"></span>', '<span aria-label="Next"></span>'], items: 4, responsive: { 0: { items: 1, }, 481: { items: 2, }, 768: { items: 2, }, 1024: { items: 4, }, 1200: { items: 4, } }, }); },
    });
});;

/* /theme_alan/static/src/snippets/s_offer_timer/000.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('theme_alan.s_offer_timer', function (require) {
    'use strict'; var publicWidget = require('web.public.widget'); var timer; publicWidget.registry.WebsiteSale.include({
        _onChangeCombination: function (ev, $parent, combination) {
            this._super.apply(this, arguments); var self = this; var product_offer; clearInterval(timer); var start_date = new Date(combination.start_date)
            var current_date = new Date(combination.current_date)
            var end_date = new Date(combination.end_date)
            var msg = combination.deals_msg
            if (msg) {
                $('.timer_msg').empty()
                var append_msg = "<div><span class='text-black'>" + msg + "</span></div>"
                $('.timer_msg').append(append_msg)
            }
            else { $('.timer_msg').empty() }
            if (start_date != 'nan') {
                timer = setInterval(function () {
                    var now = new Date(); if (start_date <= current_date && end_date >= current_date) {
                        var duration = end_date - now; var distance = duration + 86400000
                        product_offer = true;
                    } else { product_offer = false; }
                    if (distance > 0) {
                        var days = Math.floor(distance / (1000 * 60 * 60 * 24)); var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)); var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60)); var seconds = Math.floor((distance % (1000 * 60)) / 1000); if ((seconds + '').length == 1) { seconds = '0' + seconds; }
                        if ((days + '').length == 1) { days = '0' + days; }
                        if ((hours + '').length == 1) { hours = '0' + hours; }
                        if ((minutes + '').length == 1) { minutes = '0' + minutes; }
                    }
                    if (product_offer == true && distance > 0) {
                        self.$target.find('.right_timer_div').remove(); var append_data = "<div class='right_timer_div text-left mt16 date_time'>\
                    <span class='col-lg-3 col-md-3 col-sm-3 col-3 text-center d-inline-block p-0 pr-4'>\
                    <div class='rounded_digit py-3'><span id='days' class='d-block  te_days_hr_min_sec_digit text-black'>"+ days + "</span><span id='d_lbl' class='d-block'>Days</span></div></span><span class='col-lg-3 col-md-3 col-sm-3 col-3 text-center d-inline-block p-0 pr-4'><div class='rounded_digit py-3'><span id='hours' class='d-block  te_days_hr_min_sec_digit text-black'>" + hours + "</span><span id='h_lbl' class='d-block'>Hrs</span></div></span><span class='col-lg-3 col-md-3 col-sm-3 col-3 text-center d-inline-block p-0 pr-4'><div class='rounded_digit py-3'><span id='minutes' class='d-block te_days_hr_min_sec_digit text-black'>" + minutes + "</span><span id='m_lbl' class=' d-block'>Mins</span></div></span><span class='col-lg-3 col-md-3 col-sm-3 col-3 text-center d-inline-block p-0 pr-4'><div class='rounded_digit py-3'><span id='seconds' class='d-block te_days_hr_min_sec_digit text-black'>" + seconds + "</span><span id='s_lbl' class='d-block'>Secs</span></div></span></div>"; $('.timer_data').append(append_data)
                    }
                    else { $('.timer_data').empty() }
                }, 1000);
            }
        },
    });
});;

/* /theme_alan/static/src/snippets/s_offer_timer/001.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('theme_alan.fron_offer_timer', function (require) {
    'use strict'; var sAnimation = require('website.content.snippets.animation'); var timer; sAnimation.registry.offer_timer = sAnimation.Class.extend({
        selector: '.offer_timer', start: function () {
            var self = this; var date = self.$target.data('date'); if (date != 'nan') {
                var inputDate = new Date(date).getTime(); timer = setInterval(function () {
                    var now = new Date().getTime(); var distance = inputDate - now; if (distance > 0) {
                        var days = Math.floor(distance / (1000 * 60 * 60 * 24)); var hours = Math.floor((distance % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)); var minutes = Math.floor((distance % (1000 * 60 * 60)) / (1000 * 60)); var seconds = Math.floor((distance % (1000 * 60)) / 1000); if ((seconds + '').length == 1) { seconds = '0' + seconds; }
                        if ((days + '').length == 1) { days = '0' + days; }
                        if ((hours + '').length == 1) { hours = '0' + hours; }
                        if ((minutes + '').length == 1) { minutes = '0' + minutes; }
                    }
                    if (distance > 0 && self.$target.find('.snippet_offer_timer')) {
                        self.$target.find('.snippet_offer_timer').remove()
                        var append_data = "<div class='snippet_offer_timer'><ul contenteditable='false'><li><span>" + days + "</span><label>Days</label></li><li><span>" + hours + "</span><label>Hours</label></li><li><span>" + minutes + "</span><label>Minutes</label></li><li><span>" + seconds + "</span><label>Seconds</label></li></ul></div>"; self.$target.find('.snippet_offer_timer').css('display', 'block')
                        self.$target.append(append_data)
                    }
                    else {
                        self.$target.find('.snippet_offer_timer').remove()
                        var append_data = "<div class='snippet_offer_timer'><ul><li><span>" + '00' + "</span><label>Days</label></li><li><span>" + '00' + "</span><label>Hours</label></li><li><span>" + '00' + "</span><label>Minutes</label></li><li><span>" + '00' + "</span><label>Seconds</label></li></ul></div>"; self.$target.find('.snippet_offer_timer').css('display', 'block')
                        self.$target.append(append_data)
                    }
                }, 1000);
            }
        },
    });
});;

/* /theme_alan/static/src/snippets/s_product_banner/000.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('theme_alan.s_product_banner_slide_front', function (require) {
    'use strict'; var publicWidget = require('web.public.widget'); publicWidget.registry.product_banner_slide_front = publicWidget.Widget.extend({
        'selector': '.as_product_banner_slider', disabledInEditableMode: false, start: function (editable_mode) {
            var self = this; if (self.editableMode) { self.$target.empty().append('<div class="container"><div class="seaction-head"><h2>' + self.$target.attr('data-sp_name') + '</h2></div></div>'); }
            if (!self.editableMode) { var product_id = self.$target.attr('data-sp_id'); if (product_id != '0') { var addCart = self.$target.attr('data-add_to_cart'); var buyBtn = self.$target.attr('data-buy_btn'); var prodRating = self.$target.attr('data-prod_rating'); var prodLab = self.$target.attr('data-prob_label'); var pos = self.$target.attr('data-pos'); return self._rpc({ route: '/get/product_banner/', params: { 'id': product_id, 'edit_mode': false, 'add_to_cart': addCart, 'buy_btn': buyBtn, 'prod_rating': prodRating, 'prod_label': prodLab, 'pos': pos, } }).then(function (result) { self.$target.empty().append(result['prods_banner_temp']); self.initialize_owl() }); } }
        }, initialize_owl: function (autoplay = false, items = 4, slider_timing = 5000) { $('.prod_banner_carousel_list').owlCarousel({ items: 1, loop: true, margin: 10, merge: true, responsive: { 0: { items: 1, }, 768: { items: 1, } } }); },
    });
});;

/* /theme_alan/static/src/snippets/s_product_slider/000.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('theme_alan.s_product_slider', function (require) {
    'use strict'; var sAnimation = require('website.content.snippets.animation'); var concurrency = require('web.concurrency'); var ajax = require('web.ajax'); var publicWidget = require('web.public.widget'); var sale = new sAnimation.registry.WebsiteSale(); if ($('.oe_website_sale').length === 0) { $('div#wrap').addClass('oe_website_sale'); }
    sAnimation.registry.product_slider_actions = sAnimation.Class.extend({
        selector: '.as_product_slider', disabledInEditableMode: false, start: function (editable_mode) {
            var self = this; if (self.editableMode) { self.$target.find('div').empty().append('<div class="seaction-head"><h2>' + self.$target.attr("data-collection_name") + '</h2></div>'); }
            if (!self.editableMode) { this.getProductData(); }
        }, initialize_owl: function (autoplay = false, items = 4, slider_timing = 6, is_infinite = false) {
            if (slider_timing > 10) { var slider_timing = 6000 } else { var slider_timing = parseInt(slider_timing) * 1000; var slider_timing = slider_timing == 0 ? 6000 : slider_timing; }
            is_infinite = is_infinite == 'true' ? true : false; $('.as-product-carousel').owlCarousel({ loop: is_infinite, rewind: true, margin: 10, nav: true, lazyLoad: true, dots: false, navText: ['<span aria-label="Previous"></span>', '<span aria-label="Next"></span>'], autoplay: autoplay || false, autoplaySpeed: 1000, autoplayTimeout: slider_timing, autoplayHoverPause: true, items: items, responsive: { 0: { items: 1, }, 481: { items: 2, }, 768: { items: 2, }, 1024: { items: 4, }, 1200: { items: items, } }, });
        }, getProductData: function () { var self = this; ajax.jsonRpc('/shop/get_product_snippet_content', 'call', { 'collection_id': self.$target.attr('data-collection_id') || 0, 'slider_type': self.$target.attr('data-slider_type') || '', 'add_to_cart': self.$target.attr('data-add_to_cart') || '', 'quick_view': self.$target.attr('data-quick_view') || '', 'pro_compare': self.$target.attr('data-pro_compare') || '', 'pro_wishlist': self.$target.attr('data-pro_wishlist') || '', 'pro_ribbon': self.$target.attr('data-pro_ribbon') || '', 'pro_ratting': self.$target.attr('data-pro_ratting') || '', }).then(function (data) { if (data) { var autoplay = self.$target.attr('data-prod-auto') || false; var prod_count = parseInt(self.$target.attr('data-prod-count')) || 4; var slider_timing = parseInt(self.$target.attr('data-slider_timing')) || 0; self.$target.find('div').empty().append(data.slider); var is_infinite = self.$target.attr('data-is_infinite') || false; self.initialize_owl(eval(autoplay), prod_count, slider_timing, is_infinite); $(self.$target).find('.as_collection_change').first().addClass('active'); self.get_slider_data($(self.$target)); } }); }, get_slider_data: function (target) {
            var self = this; $(target).find('.as_collection_change').click(function () {
                $('.as_theme_loader_layout').removeClass('d-none'); var current_filter_id = $(this).attr('data-id'); $(target).find('.as_collection_change').removeClass('active'); $(this).addClass('active'); var current_filter = $(target).find("div[filter-id='" + current_filter_id + "']"); var slider_id = $(target).attr('data-collection_id'); $(target).find('.as_collection_data').hide()
                if (current_filter.length == 1) { $('.as_theme_loader_layout').addClass('d-none'); $('.as_theme_loader_layout').addClass('hidden'); current_filter.show() } else { ajax.jsonRpc('/shop/get_product_snippet_content', 'call', { 'collection_id': self.$target.attr('data-collection_id'), 'slider_type': self.$target.attr('data-slider_type') || '', 'add_to_cart': self.$target.attr('data-add_to_cart') || '', 'quick_view': self.$target.attr('data-quick_view') || '', 'pro_compare': self.$target.attr('data-pro_compare') || '', 'pro_wishlist': self.$target.attr('data-pro_wishlist') || '', 'pro_ribbon': self.$target.attr('data-pro_ribbon') || '', 'pro_ratting': self.$target.attr('data-pro_ratting') || '', 'current_filter_id': current_filter_id, }).then(function (data) { $('.as_theme_loader_layout').addClass('d-none'); $('.as_theme_loader_layout').addClass('hidden'); var autoplay = self.$target.attr('data-prod-auto') || false; var prod_count = parseInt(self.$target.attr('data-prod-count')) || 4; var slider_timing = parseInt(self.$target.attr('data-slider_timing')) || 0; var is_infinite = self.$target.attr('data-is_infinite') || false; $(target).find('.as_data_container').append($(data.slider).find('.as_collection_data')); self.initialize_owl(eval(autoplay), prod_count, slider_timing, is_infinite); }); }
            });
        },
    });
});;

/* /theme_alan/static/src/snippets/s_product_var_slider/000.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('theme_alan.s_product_var_slider', function (require) {
    'use strict'; var sAnimation = require('website.content.snippets.animation'); var ajax = require('web.ajax'); sAnimation.registry.product_variant_slider_actions = sAnimation.Class.extend({
        selector: '.as_product_variant_slider', disabledInEditableMode: false, start: function (editable_mode) {
            var self = this; if (self.editableMode) { self.$target.find('div').empty().append('<div class="seaction-head"><h2>' + self.$target.attr('data-collection_name') + '</h2></div>'); }
            if (!self.editableMode) { this.getVarProductData(); }
        }, initialize_owl: function (autoplay = false, items = 4, slider_timing = 6, is_infinite = false) {
            if (slider_timing > 10) { var slider_timing = 6000 } else { var slider_timing = parseInt(slider_timing) * 1000; var slider_timing = slider_timing == 0 ? 6000 : slider_timing; }
            is_infinite = is_infinite == 'true' ? true : false; $('.as-product-var-carousel').owlCarousel({ loop: is_infinite, rewind: true, margin: 10, nav: true, lazyLoad: true, dots: false, navText: ['<span aria-label="Previous"></span>', '<span aria-label="Next"></span>'], autoplay: autoplay || false, autoplaySpeed: 1000, autoplayTimeout: slider_timing, autoplayHoverPause: true, items: items, responsive: { 0: { items: 1, }, 481: { items: 2, }, 768: { items: 2, }, 1024: { items: 4, }, 1200: { items: items, } }, });
        }, getVarProductData: function () { var self = this; ajax.jsonRpc('/shop/get_product_variant_snippet_content', 'call', { 'collection_id': self.$target.attr('data-collection_id') || 0, 'slider_type': self.$target.attr('data-slider_type') || '', 'add_to_cart': self.$target.attr('data-add_to_cart') || '', 'quick_view': self.$target.attr('data-quick_view') || '', 'pro_compare': self.$target.attr('data-pro_compare') || '', 'pro_wishlist': self.$target.attr('data-pro_wishlist') || '', 'pro_ribbon': self.$target.attr('data-pro_ribbon') || '', 'pro_ratting': self.$target.attr('data-pro_ratting') || '' }).then(function (data) { if (data) { var autoplay = self.$target.attr('data-prod-auto') || false; var prod_count = parseInt(self.$target.attr('data-prod-count')) || 4; var slider_timing = parseInt(self.$target.attr('data-slider_timing')) || 0; self.$target.find('div').empty().append(data.slider); var is_infinite = self.$target.attr('data-is_infinite') || false; self.initialize_owl(eval(autoplay), prod_count, slider_timing, is_infinite); $(self.$target).find('.as_collection_change').first().addClass('active'); self.get_variant_slider_data($(self.$target)); } }); }, get_variant_slider_data: function (target) {
            var self = this; $(target).find('.as_collection_change').click(function () {
                $('.as_theme_loader_layout').removeClass('d-none'); var current_filter_id = $(this).attr('data-id'); $(target).find('.as_collection_change').removeClass('active'); $(this).addClass('active'); var current_filter = $(target).find("div[filter-id='" + current_filter_id + "']"); var slider_id = $(target).attr('data-collection_id'); $(target).find('.as_collection_data').hide()
                if (current_filter.length == 1) { $('.as_theme_loader_layout').addClass('d-none'); $('.as_theme_loader_layout').addClass('hidden'); current_filter.show(); }
                else { ajax.jsonRpc('/shop/get_product_variant_snippet_content', 'call', { 'collection_id': self.$target.attr('data-collection_id'), 'slider_type': self.$target.attr('data-slider_type') || '', 'add_to_cart': self.$target.attr('data-add_to_cart') || '', 'quick_view': self.$target.attr('data-quick_view') || '', 'pro_compare': self.$target.attr('data-pro_compare') || '', 'pro_wishlist': self.$target.attr('data-pro_wishlist') || '', 'pro_ribbon': self.$target.attr('data-pro_ribbon') || '', 'pro_ratting': self.$target.attr('data-pro_ratting') || '', 'current_filter_id': current_filter_id }).then(function (data) { $('.as_theme_loader_layout').addClass('d-none'); $('.as_theme_loader_layout').addClass('hidden'); var autoplay = self.$target.attr('data-prod-auto') || false; var prod_count = parseInt(self.$target.attr('data-prod-count')) || 4; var slider_timing = parseInt(self.$target.attr('data-slider_timing')) || 0; var is_infinite = self.$target.attr('data-is_infinite') || false; $(target).find('.as_data_container').append($(data.slider).find('.as_collection_data')); self.initialize_owl(eval(autoplay), prod_count, slider_timing, is_infinite); }); }
            });
        },
    });
});;

/* /theme_alan/static/src/snippets/s_snippet_builder/000.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('theme_alan.alan_snippet_builder', function (require) { "use strict"; var publicWidget = require('web.public.widget'); publicWidget.registry.alan_snippet_builder = publicWidget.Widget.extend({ selector: "#wrapwrap", 'events': { 'click .popup-youtube': '_openVideoPop' }, _openVideoPop: function (ev) { ev.preventDefault(); $(ev.currentTarget).magnificPopup({ disableOn: 700, type: 'iframe', mainClass: 'mfp-fade', removalDelay: 160, preloader: false, fixedContentPos: false }); }, }); });;

/* /theme_alan/static/src/js/image_zoomer.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('theme_alan.elevatezoom', function (require) { 'use strict'; var publicWidget = require('web.public.widget'); publicWidget.registry.WebsiteSale.include({ _startZoom: function () { $('.zoomContainer').remove(); var $image = $('#o-carousel-product .carousel-item.active .product_detail_img'); $image.removeData('elevateZoom'); $image.elevateZoom({ constrainType: 'height', constrainSize: 274, zoomType: 'lens', containLensZoom: true, cursor: 'pointer', }); } }); publicWidget.registry.websiteImageZoom = publicWidget.Widget.extend({ selector: '#wrapwrap', events: { 'slid.bs.carousel #o-carousel-product': '_onChangeSlide', }, _onChangeSlide: function (ev) { ev.preventDefault(); var sale = new publicWidget.registry.WebsiteSale(); sale._startZoom(); }, }); });;

/* /website_links/static/src/js/website_links.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website_links.website_links', function (require) {
    'use strict'; var core = require('web.core'); var publicWidget = require('web.public.widget'); var _t = core._t; var SelectBox = publicWidget.Widget.extend({
        events: { 'change': '_onChange', }, init: function (parent, obj, placeholder) { this._super.apply(this, arguments); this.obj = obj; this.placeholder = placeholder; }, willStart: function () { var self = this; var defs = [this._super.apply(this, arguments)]; defs.push(this._rpc({ model: this.obj, method: 'search_read', params: { fields: ['id', 'name'], }, }).then(function (result) { self.objects = _.map(result, function (val) { return { id: val.id, text: val.name }; }); })); return Promise.all(defs); }, start: function () {
            var self = this; this.$el.select2({
                placeholder: self.placeholder, allowClear: true, createSearchChoice: function (term) {
                    if (self._objectExists(term)) { return null; }
                    return { id: term, text: _.str.sprintf("Create '%s'", term) };
                }, createSearchChoicePosition: 'bottom', multiple: false, data: self.objects, minimumInputLength: self.objects.length > 100 ? 3 : 0,
            });
        }, _objectExists: function (query) { return _.find(this.objects, function (val) { return val.text.toLowerCase() === query.toLowerCase(); }) !== undefined; }, _createObject: function (name) {
            var self = this; var args = { name: name }; if (this.obj === "utm.campaign") { args.is_website = true; }
            return this._rpc({ model: this.obj, method: 'create', args: [args], }).then(function (record) { self.$el.attr('value', record); self.objects.push({ 'id': record, 'text': name }); });
        }, _onChange: function (ev) {
            if (!ev.added || !_.isString(ev.added.id)) { return; }
            this._createObject(ev.added.id);
        },
    }); var RecentLinkBox = publicWidget.Widget.extend({
        template: 'website_links.RecentLink', xmlDependencies: ['/website_links/static/src/xml/recent_link.xml'], events: { 'click .btn_shorten_url_clipboard': '_toggleCopyButton', 'click .o_website_links_edit_code': '_editCode', 'click .o_website_links_ok_edit': '_onLinksOkClick', 'click .o_website_links_cancel_edit': '_onLinksCancelClick', 'submit #o_website_links_edit_code_form': '_onSubmitCode', }, init: function (parent, obj) { this._super.apply(this, arguments); this.link_obj = obj; this.animating_copy = false; }, start: function () { new ClipboardJS(this.$('.btn_shorten_url_clipboard').get(0)); return this._super.apply(this, arguments); }, _toggleCopyButton: function () {
            if (this.animating_copy) { return; }
            var self = this; this.animating_copy = true; var top = this.$('.o_website_links_short_url').position().top; this.$('.o_website_links_short_url').clone().css('position', 'absolute').css('left', 15).css('top', top - 2).css('z-index', 2).removeClass('o_website_links_short_url').addClass('animated-link').insertAfter(this.$('.o_website_links_short_url')).animate({ opacity: 0, top: '-=20', }, 500, function () { self.$('.animated-link').remove(); self.animating_copy = false; });
        }, _notification: function (message) { this.$('.notification').append('<strong>' + message + '</strong>'); }, _editCode: function () { var initCode = this.$('#o_website_links_code').html(); this.$('#o_website_links_code').html('<form style="display:inline;" id="o_website_links_edit_code_form"><input type="hidden" id="init_code" value="' + initCode + '"/><input type="text" id="new_code" value="' + initCode + '"/></form>'); this.$('.o_website_links_edit_code').hide(); this.$('.copy-to-clipboard').hide(); this.$('.o_website_links_edit_tools').show(); }, _cancelEdit: function () { this.$('.o_website_links_edit_code').show(); this.$('.copy-to-clipboard').show(); this.$('.o_website_links_edit_tools').hide(); this.$('.o_website_links_code_error').hide(); var oldCode = this.$('#o_website_links_edit_code_form #init_code').val(); this.$('#o_website_links_code').html(oldCode); this.$('#code-error').remove(); this.$('#o_website_links_code form').remove(); }, _submitCode: function () {
            var self = this; var initCode = this.$('#o_website_links_edit_code_form #init_code').val(); var newCode = this.$('#o_website_links_edit_code_form #new_code').val(); if (newCode === '') { self.$('.o_website_links_code_error').html(_t("The code cannot be left empty")); self.$('.o_website_links_code_error').show(); return; }
            function showNewCode(newCode) { self.$('.o_website_links_code_error').html(''); self.$('.o_website_links_code_error').hide(); self.$('#o_website_links_code form').remove(); var host = self.$('#o_website_links_host').html(); self.$('#o_website_links_code').html(newCode); self.$('.btn_shorten_url_clipboard').attr('data-clipboard-text', host + newCode); self.$('.o_website_links_edit_code').show(); self.$('.copy-to-clipboard').show(); self.$('.o_website_links_edit_tools').hide(); }
            if (initCode === newCode) { showNewCode(newCode); } else { this._rpc({ route: '/website_links/add_code', params: { init_code: initCode, new_code: newCode, }, }).then(function (result) { showNewCode(result[0].code); }, function () { self.$('.o_website_links_code_error').show(); self.$('.o_website_links_code_error').html(_t("This code is already taken")); }); }
        }, _onLinksOkClick: function (ev) { ev.preventDefault(); this._submitCode(); }, _onLinksCancelClick: function (ev) { ev.preventDefault(); this._cancelEdit(); }, _onSubmitCode: function (ev) { ev.preventDefault(); this._submitCode(); },
    }); var RecentLinks = publicWidget.Widget.extend({ getRecentLinks: function (filter) { var self = this; return this._rpc({ route: '/website_links/recent_links', params: { filter: filter, limit: 20, }, }).then(function (result) { _.each(result.reverse(), function (link) { self._addLink(link); }); self._updateNotification(); }, function () { var message = _t("Unable to get recent links"); self.$el.append('<div class="alert alert-danger">' + message + '</div>'); }); }, _addLink: function (link) { var nbLinks = this.getChildren().length; var recentLinkBox = new RecentLinkBox(this, link); recentLinkBox.prependTo(this.$el); $('.link-tooltip').tooltip(); if (nbLinks === 0) { this._updateNotification(); } }, removeLinks: function () { _.invoke(this.getChildren(), 'destroy'); }, _updateNotification: function () { if (this.getChildren().length === 0) { var message = _t("You don't have any recent links."); $('.o_website_links_recent_links_notification').html('<div class="alert alert-info">' + message + '</div>'); } else { $('.o_website_links_recent_links_notification').empty(); } }, }); publicWidget.registry.websiteLinks = publicWidget.Widget.extend({
        selector: '.o_website_links_create_tracked_url', events: { 'click #filter-newest-links': '_onFilterNewestLinksClick', 'click #filter-most-clicked-links': '_onFilterMostClickedLinksClick', 'click #filter-recently-used-links': '_onFilterRecentlyUsedLinksClick', 'click #generated_tracked_link a': '_onGeneratedTrackedLinkClick', 'keyup #url': '_onUrlKeyUp', 'click #btn_shorten_url': '_onShortenUrlButtonClick', 'submit #o_website_links_link_tracker_form': '_onFormSubmit', }, start: function () { var defs = [this._super.apply(this, arguments)]; var campaignSelect = new SelectBox(this, 'utm.campaign', _t("e.g. Promotion of June, Winter Newsletter, ..")); defs.push(campaignSelect.attachTo($('#campaign-select'))); var mediumSelect = new SelectBox(this, 'utm.medium', _t("e.g. Newsletter, Social Network, ..")); defs.push(mediumSelect.attachTo($('#channel-select'))); var sourceSelect = new SelectBox(this, 'utm.source', _t("e.g. Search Engine, Website page, ..")); defs.push(sourceSelect.attachTo($('#source-select'))); this.recentLinks = new RecentLinks(this); defs.push(this.recentLinks.appendTo($('#o_website_links_recent_links'))); this.recentLinks.getRecentLinks('newest'); new ClipboardJS($('#btn_shorten_url').get(0)); this.url_copy_animating = false; $('[data-toggle="tooltip"]').tooltip(); return Promise.all(defs); }, _onFilterNewestLinksClick: function () { this.recentLinks.removeLinks(); this.recentLinks.getRecentLinks('newest'); }, _onFilterMostClickedLinksClick: function () { this.recentLinks.removeLinks(); this.recentLinks.getRecentLinks('most-clicked'); }, _onFilterRecentlyUsedLinksClick: function () { this.recentLinks.removeLinks(); this.recentLinks.getRecentLinks('recently-used'); }, _onGeneratedTrackedLinkClick: function () { $('#generated_tracked_link a').text(_t("Copied")).removeClass('btn-primary').addClass('btn-success'); setTimeout(function () { $('#generated_tracked_link a').text(_t("Copy")).removeClass('btn-success').addClass('btn-primary'); }, 5000); }, _onUrlKeyUp: function (ev) {
            if (!$('#btn_shorten_url').hasClass('btn-copy') || ev.which === 13) { return; }
            $('#btn_shorten_url').removeClass('btn-success btn-copy').addClass('btn-primary').html('Get tracked link'); $('#generated_tracked_link').css('display', 'none'); $('.o_website_links_utm_forms').show();
        }, _onShortenUrlButtonClick: function () {
            if (!$('#btn_shorten_url').hasClass('btn-copy') || this.url_copy_animating) { return; }
            var self = this; this.url_copy_animating = true; $('#generated_tracked_link').clone().css('position', 'absolute').css('left', '78px').css('bottom', '8px').css('z-index', 2).removeClass('#generated_tracked_link').addClass('url-animated-link').appendTo($('#generated_tracked_link')).animate({ opacity: 0, bottom: '+=20', }, 500, function () { $('.url-animated-link').remove(); self.url_copy_animating = false; });
        }, _onFormSubmit: function (ev) {
            var self = this; ev.preventDefault(); if ($('#btn_shorten_url').hasClass('btn-copy')) { return; }
            ev.stopPropagation(); var campaignID = $('#campaign-select').attr('value'); var mediumID = $('#channel-select').attr('value'); var sourceID = $('#source-select').attr('value'); var params = {}; params.url = $('#url').val(); if (campaignID !== '') { params.campaign_id = parseInt(campaignID); }
            if (mediumID !== '') { params.medium_id = parseInt(mediumID); }
            if (sourceID !== '') { params.source_id = parseInt(sourceID); }
            $('#btn_shorten_url').text(_t("Generating link...")); this._rpc({ route: '/website_links/new', params: params, }).then(function (result) { if ('error' in result) { if (result.error === 'empty_url') { $('.notification').html('<div class="alert alert-danger">The URL is empty.</div>'); } else if (result.error === 'url_not_found') { $('.notification').html('<div class="alert alert-danger">URL not found (404)</div>'); } else { $('.notification').html('<div class="alert alert-danger">An error occur while trying to generate your link. Try again later.</div>'); } } else { var link = result[0]; $('#btn_shorten_url').removeClass('btn-primary').addClass('btn-success btn-copy').html('Copy'); $('#btn_shorten_url').attr('data-clipboard-text', link.short_url); $('.notification').html(''); $('#generated_tracked_link').html(link.short_url); $('#generated_tracked_link').css('display', 'inline'); self.recentLinks._addLink(link); $('#campaign-select').select2('val', ''); $('#channel-select').select2('val', ''); $('#source-select').select2('val', ''); $('.o_website_links_utm_forms').hide(); } });
        },
    }); return { SelectBox: SelectBox, RecentLinkBox: RecentLinkBox, RecentLinks: RecentLinks, };
});;

/* /website_links/static/src/js/website_links_code_editor.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website_links.code_editor', function (require) {
    'use strict'; var core = require('web.core'); var publicWidget = require('web.public.widget'); var _t = core._t; publicWidget.registry.websiteLinksCodeEditor = publicWidget.Widget.extend({
        selector: '#wrapwrap:has(.o_website_links_edit_code)', events: { 'click .o_website_links_edit_code': '_onEditCodeClick', 'click .o_website_links_cancel_edit': '_onCancelEditClick', 'submit #edit-code-form': '_onEditCodeFormSubmit', 'click .o_website_links_ok_edit': '_onEditCodeFormSubmit', }, _showNewCode: function (newCode) { $('.o_website_links_code_error').html(''); $('.o_website_links_code_error').hide(); $('#o_website_links_code form').remove(); var host = $('#short-url-host').html(); $('#o_website_links_code').html(newCode); $('.copy-to-clipboard').attr('data-clipboard-text', host + newCode); $('.o_website_links_edit_code').show(); $('.copy-to-clipboard').show(); $('.o_website_links_edit_tools').hide(); }, _submitCode: function () {
            var initCode = $('#edit-code-form #init_code').val(); var newCode = $('#edit-code-form #new_code').val(); var self = this; if (newCode === '') { self.$('.o_website_links_code_error').html(_t("The code cannot be left empty")); self.$('.o_website_links_code_error').show(); return; }
            this._showNewCode(newCode); if (initCode === newCode) { this._showNewCode(newCode); } else { return this._rpc({ route: '/website_links/add_code', params: { init_code: initCode, new_code: newCode, }, }).then(function (result) { self._showNewCode(result[0].code); }, function () { $('.o_website_links_code_error').show(); $('.o_website_links_code_error').html(_t("This code is already taken")); }); }
            return Promise.resolve();
        }, _onEditCodeClick: function () { var initCode = $('#o_website_links_code').html(); $('#o_website_links_code').html('<form style="display:inline;" id="edit-code-form"><input type="hidden" id="init_code" value="' + initCode + '"/><input type="text" id="new_code" value="' + initCode + '"/></form>'); $('.o_website_links_edit_code').hide(); $('.copy-to-clipboard').hide(); $('.o_website_links_edit_tools').show(); }, _onCancelEditClick: function (ev) { ev.preventDefault(); $('.o_website_links_edit_code').show(); $('.copy-to-clipboard').show(); $('.o_website_links_edit_tools').hide(); $('.o_website_links_code_error').hide(); var oldCode = $('#edit-code-form #init_code').val(); $('#o_website_links_code').html(oldCode); $('#code-error').remove(); $('#o_website_links_code form').remove(); }, _onEditCodeFormSubmit: function (ev) { ev.preventDefault(); this._submitCode(); },
    });
});;

/* /website_links/static/src/js/website_links_charts.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website_links.charts', function (require) {
    'use strict'; var core = require('web.core'); var publicWidget = require('web.public.widget'); var _t = core._t; var BarChart = publicWidget.Widget.extend({
        jsLibs: ['/web/static/lib/Chart/Chart.js',], init: function (parent, beginDate, endDate, dates) { this._super.apply(this, arguments); this.beginDate = beginDate; this.endDate = endDate; this.number_of_days = this.endDate.diff(this.beginDate, 'days') + 2; this.dates = dates; }, start: function () {
            var clicksArray = []; var beginDateCopy = this.beginDate; for (var i = 0; i < this.number_of_days; i++) { var dateKey = beginDateCopy.format('YYYY-MM-DD'); clicksArray.push([dateKey, (dateKey in this.dates) ? this.dates[dateKey] : 0]); beginDateCopy.add(1, 'days'); }
            var nbClicks = 0; var data = []; var labels = []; clicksArray.forEach(function (pt) { labels.push(pt[0]); nbClicks += pt[1]; data.push(pt[1]); }); this.$('.title').html(nbClicks + _t(' clicks')); var config = { type: 'line', data: { labels: labels, datasets: [{ data: data, fill: 'start', label: _t('# of clicks'), backgroundColor: '#ebf2f7', borderColor: '#6aa1ca', }], }, }; var canvas = this.$('canvas')[0]; var context = canvas.getContext('2d'); new Chart(context, config);
        },
    }); var PieChart = publicWidget.Widget.extend({
        jsLibs: ['/web/static/lib/Chart/Chart.js',], init: function (parent, data) { this._super.apply(this, arguments); this.data = data; }, start: function () {
            var labels = []; var data = []; for (var i = 0; i < this.data.length; i++) { var countryName = this.data[i]['country_id'] ? this.data[i]['country_id'][1] : _t('Undefined'); labels.push(countryName + ' (' + this.data[i]['country_id_count'] + ')'); data.push(this.data[i]['country_id_count']); }
            this.$('.title').html(this.data.length + _t(' countries')); var config = { type: 'pie', data: { labels: labels, datasets: [{ data: data, label: this.data.length > 0 ? this.data[0].key : _t('No data'), }] }, }; var canvas = this.$('canvas')[0]; var context = canvas.getContext('2d'); new Chart(context, config);
        },
    }); publicWidget.registry.websiteLinksCharts = publicWidget.Widget.extend({
        selector: '.o_website_links_chart', events: { 'click .graph-tabs li a': '_onGraphTabClick', 'click .copy-to-clipboard': '_onCopyToClipboardClick', }, start: function () {
            var self = this; this.charts = {}; var linkID = parseInt($('#link_id').val()); this.links_domain = ['link_id', '=', linkID]; var defs = []; defs.push(this._totalClicks()); defs.push(this._clicksByDay()); defs.push(this._clicksByCountry()); defs.push(this._lastWeekClicksByCountry()); defs.push(this._lastMonthClicksByCountry()); defs.push(this._super.apply(this, arguments)); new ClipboardJS($('.copy-to-clipboard')[0]); this.animating_copy = false; return Promise.all(defs).then(function (results) {
                var _totalClicks = results[0]; var _clicksByDay = results[1]; var _clicksByCountry = results[2]; var _lastWeekClicksByCountry = results[3]; var _lastMonthClicksByCountry = results[4]; if (!_totalClicks) { $('#all_time_charts').prepend(_t("There is no data to show")); $('#last_month_charts').prepend(_t("There is no data to show")); $('#last_week_charts').prepend(_t("There is no data to show")); return; }
                var formattedClicksByDay = {}; var beginDate; for (var i = 0; i < _clicksByDay.length; i++) {
                    var date = moment(_clicksByDay[i]['create_date:day'], 'DD MMMM YYYY'); if (i === 0) { beginDate = date; }
                    formattedClicksByDay[date.format('YYYY-MM-DD')] = _clicksByDay[i]['create_date_count'];
                }
                var now = moment(); self.charts.all_time_bar = new BarChart(self, beginDate, now, formattedClicksByDay); self.charts.all_time_bar.attachTo($('#all_time_clicks_chart')); beginDate = moment().subtract(30, 'days'); self.charts.last_month_bar = new BarChart(self, beginDate, now, formattedClicksByDay); self.charts.last_month_bar.attachTo($('#last_month_clicks_chart')); beginDate = moment().subtract(7, 'days'); self.charts.last_week_bar = new BarChart(self, beginDate, now, formattedClicksByDay); self.charts.last_week_bar.attachTo($('#last_week_clicks_chart')); self.charts.all_time_pie = new PieChart(self, _clicksByCountry); self.charts.all_time_pie.attachTo($('#all_time_countries_charts')); self.charts.last_month_pie = new PieChart(self, _lastMonthClicksByCountry); self.charts.last_month_pie.attachTo($('#last_month_countries_charts')); self.charts.last_week_pie = new PieChart(self, _lastWeekClicksByCountry); self.charts.last_week_pie.attachTo($('#last_week_countries_charts')); var rowWidth = $('#all_time_countries_charts').parent().width(); var $chartCanvas = $('#all_time_countries_charts,last_month_countries_charts,last_week_countries_charts').find('canvas'); $chartCanvas.height(Math.max(_clicksByCountry.length * (rowWidth > 750 ? 1 : 2), 20) + 'em');
            });
        }, _totalClicks: function () { return this._rpc({ model: 'link.tracker.click', method: 'search_count', args: [[this.links_domain]], }); }, _clicksByDay: function () { return this._rpc({ model: 'link.tracker.click', method: 'read_group', args: [[this.links_domain], ['create_date']], kwargs: { groupby: 'create_date:day' }, }); }, _clicksByCountry: function () { return this._rpc({ model: 'link.tracker.click', method: 'read_group', args: [[this.links_domain], ['country_id']], kwargs: { groupby: 'country_id' }, }); }, _lastWeekClicksByCountry: function () { var interval = moment().subtract(7, 'days').format('YYYY-MM-DD'); return this._rpc({ model: 'link.tracker.click', method: 'read_group', args: [[this.links_domain, ['create_date', '>', interval]], ['country_id']], kwargs: { groupby: 'country_id' }, }); }, _lastMonthClicksByCountry: function () { var interval = moment().subtract(30, 'days').format('YYYY-MM-DD'); return this._rpc({ model: 'link.tracker.click', method: 'read_group', args: [[this.links_domain, ['create_date', '>', interval]], ['country_id']], kwargs: { groupby: 'country_id' }, }); }, _onGraphTabClick: function (ev) { ev.preventDefault(); $('.graph-tabs li a').tab('show'); }, _onCopyToClipboardClick: function (ev) {
            ev.preventDefault(); if (this.animating_copy) { return; }
            this.animating_copy = true; $('.o_website_links_short_url').clone().css('position', 'absolute').css('left', '15px').css('bottom', '10px').css('z-index', 2).removeClass('.o_website_links_short_url').addClass('animated-link').appendTo($('.o_website_links_short_url')).animate({ opacity: 0, bottom: '+=20', }, 500, function () { $('.animated-link').remove(); this.animating_copy = false; });
        },
    }); return { BarChart: BarChart, PieChart: PieChart, };
});;

/* /website_sale_extended/static/src/js/website_sale_extended.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website_sale_extended.direct_add_to_cart', function (require) {
    'use strict'; var publicWidget = require('web.public.widget'); const dom = require('web.dom'); var wSaleUtils = require('website_sale.utils'); var random_index = 0; var random_class_list = ['warning', 'primary', 'secondary']; var ajax = require('web.ajax'); publicWidget.registry.direct_add_to_cart = publicWidget.Widget.extend({
        'selector': '.oe_website_sale', events: { 'click .js_cart_add_direct': '_onAddToCartDirect', 'click a.js_cart_shop_list': '_onAddToCartShop', }, _onAddToCartDirect: function (event) {
            var $card = $(event.currentTarget).closest('.js_main_product'); var add_qty = $('input[name="add_qty"]').val(); this._rpc({ route: '/shop/cart/update_json', params: { product_id: parseInt($card.find('input[name="product_id"]').val()), add_qty: add_qty }, }).then(function (data) {
                wSaleUtils.updateCartNavBar(data); var $navButton = $('header .o_wsale_my_cart').first(); if (!$(event.currentTarget).hasClass('as-color')) { $(event.currentTarget).addClass('as-color'); }
                if (data['warning']) {
                    if ($('#wrapwrap > #cart_warning_content').length === 0)
                        $('#wrapwrap').append("<div id='cart_warning_content'></div>"); $("#wrapwrap > #cart_warning_content").append("<div class='add_cart_warning alert alert-" + random_class_list[random_index % 3] + " alert-dismissible fade show'  role='alert'><p class='warning-msg'>" + data['warning'] + "</p><button class='close-btn' type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button></div>"); random_index++;
                }
                wSaleUtils.animateClone($navButton, $('#o-carousel-product'), -50, 10);
            });
        }, _onAddToCartShop: function (event) {
            var $card = $(event.currentTarget); this._rpc({ route: '/shop/cart/update_json', params: { product_id: $card.parent().find('input[name="product-id"]').data('product-id'), add_qty: 1 }, }).then(function (data) {
                wSaleUtils.updateCartNavBar(data); var $navButton = $('header .o_wsale_my_cart').first(); if (!$(event.currentTarget).hasClass('as-color')) { $(event.currentTarget).addClass('as-color'); }
                if (data['warning']) {
                    if ($('#wrapwrap > #cart_warning_content').length === 0)
                        $('#wrapwrap').append("<div id='cart_warning_content'></div>"); $("#wrapwrap > #cart_warning_content").append("<div class='add_cart_warning alert alert-" + random_class_list[random_index % 3] + " alert-dismissible fade show'  role='alert'><p class='warning-msg'>" + data['warning'] + "</p><button class='close-btn' type='button' class='close' data-dismiss='alert' aria-label='Close'><span aria-hidden='true'>&times;</span></button></div>"); random_index++;
                }
                wSaleUtils.animateClone($navButton, $card.parents('.oe_product'), 25, 40);
            });
        },
    }); publicWidget.registry.WebsiteSale.include({
        _setUrlHash: function ($parent) {
            this._super.apply(this, arguments); var self = this; var qty = $parent.find('input[name="add_qty"]').val(); var combination = this.getSelectedVariantValues($parent); var parentCombination = $parent.find('ul[data-attribute_exclusions]').data('attribute_exclusions').parent_combination; var productTemplateId = parseInt($parent.find('.product_template_id').val()); var product_weight_div = $('#product_weight'); var product_volume_div = $('#product_volume'); self._checkExclusions($parent, combination); return ajax.jsonRpc(this._getUri('/sale/get_combination_info'), 'call', { 'product_template_id': productTemplateId, 'product_id': this._getProductId($parent), 'combination': combination, 'add_qty': parseInt(qty), 'pricelist_id': this.pricelistId || false, 'parent_combination': parentCombination, 'specification_info': true, }).then(function (specifications) {
                product_weight_div.empty(); product_volume_div.empty(); if (specifications) {
                    if (specifications.weight) {
                        var content = "<strong>Weight : </strong><span>" + specifications.weight + "</span>"
                        product_weight_div.append(content)
                    }
                    if (specifications.volume) {
                        var content = "<strong>Volume : </strong><span>" + specifications.volume + "</span>"
                        product_volume_div.append(content)
                    }
                }
            });
        },
    }); publicWidget.registry.BottomFixedElement.include({
        _hideBottomFixedElements() {
            const $bottomFixedElements = $('.o_bottom_fixed_element'); if (!$bottomFixedElements.length) { return; }
            $bottomFixedElements.removeClass('o_bottom_fixed_element_hidden'); if (this.$scrollingElement[0] && (this.$scrollingElement[0].offsetHeight + this.$scrollingElement[0].scrollTop) >= (this.$scrollingElement[0].scrollHeight - 2)) { const buttonEls = [...this.$('.btn:visible')]; for (const el of $bottomFixedElements) { if (buttonEls.some(button => dom.areColliding(button, el))) { el.classList.add('o_bottom_fixed_element_hidden'); } } }
        }
    });
});;

/* /theme_alan/static/src/snippets/s_img_hotspot/000.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('atharva_theme_base.s_img_hotspots', function (require) {
    "use strict"; var publicWidget = require('web.public.widget'); publicWidget.registry.img_hotspot = publicWidget.Widget.extend({
        selector: '#wrapwrap', disabledInEditableMode: false, events: { 'click a.icon': '_addThemeStyle' }, _addThemeStyle: function (ev) {
            if (!this.editableMode) {
                var getUserData = $(ev.currentTarget).attr('data-content'); if (getUserData != undefined) {
                    var getclass = $(getUserData).attr('class').split(' '); getclass.shift(); getclass = getclass.join(" "); var popTemp = '<div class="popover as-hotspot-popover ' + getclass + '" style="position: absolute; transform: translate3d(675px, 153px, 0px); top: 0px; left: 0px; will-change: transform;">\
                    <div class="arrow" style="top: 43px;"></div>\
                    <h3 class="popover-header"></h3>\
                    <div class="popover-body">\
                    </div>\
                    </div>'; $(ev.currentTarget).popover({ container: '#wrap', template: popTemp }); if ($(ev.currentTarget).attr('aria-describedby') == undefined) { $(ev.currentTarget).trigger('click'); };
                }
            }
        }, start: function (editable_mode) {
            var self = this; if (!self.editableMode) {
                var getDyanmicHs = self.$target.find('p.dynamic_type'); $.each(getDyanmicHs, function (index, eachDOM) {
                    var gettype = $(eachDOM).attr('data-dy_type'); var prod_id = $(eachDOM).attr('data-product_template_id'); if (gettype == "popover") { var po_style = $(eachDOM).attr('data-po_style'); $(eachDOM).children().removeClass("o_quick_view").removeAttr('data-product_template_id', prod_id); self._rpc({ route: '/get/product_detail/', params: { 'id': prod_id, 'popstyle': po_style, 'popover': true } }).then(function (result) { $(eachDOM).children().attr('data-toggle', 'popover').attr('data-html', true).attr('data-content', result); }); }
                    else { $(eachDOM).children().removeAttr('data-toggle').removeAttr('data-html').removeAttr('data-content').attr('data-product_template_id', prod_id); $(eachDOM).children().addClass("o_quick_view"); }
                }); var getStaticHs = self.$target.find('p.static_type'); $.each(getStaticHs, function (index, eachDOM) { var title = $(eachDOM).attr('data-po_title') == undefined ? 'Title' : $(eachDOM).attr('data-po_title'); var description = $(eachDOM).attr('data-po_desc') == undefined ? 'description' : $(eachDOM).attr('data-po_desc'); var btn_txt = $(eachDOM).attr('data-po_btxt') == undefined ? 'text' : $(eachDOM).attr('data-po_btxt'); var btn_url = $(eachDOM).attr('data-po_bturl') == undefined ? '/' : $(eachDOM).attr('data-po_bturl'); var img_url = $(eachDOM).attr('data-po_imgurl') == undefined ? '/theme_alan/static/src/img/snippets/image.png' : $(eachDOM).attr('data-po_imgurl'); var pop_thm = $(eachDOM).attr('data-po_theme') == undefined ? '' : $(eachDOM).attr('data-po_theme'); var pop_style = $(eachDOM).attr('data-po_style') == undefined ? '' : $(eachDOM).attr('data-po_style'); var style_cls = pop_thm + " " + pop_style; var popoverhtm = "<div class='hp-media " + style_cls + "'>\<div class='hp-img'><img src='" + img_url + "' alt='Image'></div>\<div class='hp-media-body'>\<h5 class='hp-title'>" + title + "</h5><p>" + description + "</p><a href='" + btn_url + "' class='as-btn as-btn-theme btn-sm'>" + btn_txt + "</a></div></div>"; $(eachDOM).children().attr('data-content', popoverhtm); });
            }
            else { var getDyanmicHs = self.$target.find('p.dynamic_type'); $.each(getDyanmicHs, function (index, eachDOM) { $(eachDOM).children().removeClass("o_quick_view"); }); }
        }
    });
});;

/* /odoo_e_wallet/static/src/js/odoo_e_wallet.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('odoo_e_wallet.odoo_e_wallet_js', function (require) {
    'use strict'; var ajax = require('web.ajax'); var PaymentForm = require('payment.payment_form'); PaymentForm.include({ payEvent: function (ev) { ev.preventDefault(); var self = this; var pf_super = self._super; var args = arguments; var pay_using_wallet = $('#wallet_payment #pay_using_wallet').prop('checked'); if (pay_using_wallet) { ajax.jsonRpc('/wallet/check/status', 'call', { 'is_checked': pay_using_wallet, }).then(function (res) { if (res.is_safe) { return pf_super.apply(self, args); } else { location.reload(); } }); } else { return self._super.apply(self, arguments); } } })
    $(document).ready(function () {
        const $pay_using_wallet = $('#pay_using_wallet'); var isSubmit = 0; var cur_lang = $('html').attr('lang'); var loc_url = $(location).attr("href"); const $wallet_acq = $('#payment_method input[data-provider="e_wallet"]'); $wallet_acq.prop('checked', false); function placeholder() {
            let placeholder = ''; if (localStorage.getItem('selection') == 'sale_order') { $('#wk_input').attr("placeholder", "Sale Order ID..."); }
            else if (localStorage.getItem('selection') == 'transaction_id') { $('#wk_input').attr("placeholder", "Transaction ID..."); }
            else if (localStorage.getItem('selection') == 'all') { $('#wk_input').val(''); $('#wk_input').attr("placeholder", "Search..."); }
        }
        if (localStorage.getItem('selection') == null) { localStorage.setItem('selection', 'sale_order'); $('#wk_input').attr("placeholder", "Search..."); }
        else { placeholder(); }
        $('#wallet_selection').click(function () { localStorage.setItem('selection', $('option:selected', this).attr('value')); placeholder(); }); $(window).on("beforeunload", function () { var loc_url = $(location).attr("href"); if (loc_url.includes('/shop/payment') && isSubmit != 1) { $.blockUI({ css: { backgroundColor: '#f00', color: '#fff' } }); let $orderTotal = $('#order_total'); $orderTotal.addClass('d-none'); ajax.jsonRpc("/payment/add/wallet", 'call', { 'add_wallet': false }).then(function (data) { $.unblockUI(); }) } }); $(window).on('load', function () {
            if ($pay_using_wallet.prop('checked')) { $pay_using_wallet.prop('checked', false); }
            if (localStorage.getItem('selection') != null && localStorage.getItem('selection')) { $('#wallet_selection option[value=' + localStorage.getItem("selection") + ']').attr("selected", "selected"); }
            if (loc_url.includes('/shop/payment')) { ajax.jsonRpc("/payment/add/wallet", 'call', { 'add_wallet': false }); }
        })
        $pay_using_wallet.on('change', function () {
            let cur_checkbox = $(this); let add_wallet = cur_checkbox.is(':checked'); $.blockUI({ css: { backgroundColor: '#f00', color: '#fff' } }); $('#wallet_payment .card-body').find('.js_add_msg').remove(); $('#payment_method > h3, #payment_method .card').removeClass('d-none'); ajax.jsonRpc("/payment/add/wallet", 'call', { 'add_wallet': add_wallet, }).then(function (data) {
                $('#wallet_payment #wallet_bal').remove(); let walletIndependent = data.wallet_debit == data.amount_total ? true : false; if (walletIndependent && add_wallet) { $('#payment_method > h3, #payment_method .card').addClass('d-none'); $wallet_acq.prop('checked', true); } else if (!walletIndependent && add_wallet) { let message = 'Please select a payment acquirer to the pay the remaining amount...'; let html = '<div class="bg-warning js_add_msg">' + message + '</div>'; $('#wallet_payment .card-body').append(html); $wallet_acq.prop('checked', false); } else { $wallet_acq.prop('checked', false); }
                let $orderTotal = $('#order_total'); let symbol = data.symbol; let position = data.position; if (data.wallet_debit == 0) { $('#wallet_tr').remove(); $('#order_total_w').remove(); $('#wallet_payment .js_wallet_bal').html(data.used_wallet_amount_template); $orderTotal.removeClass('d-none'); } else { $('#wallet_payment .js_wallet_bal').html(data.used_wallet_amount_template); $orderTotal.before(data.wallet_total_template); $orderTotal.addClass('d-none'); $('#wallet_tr').after(data.total_amount_template); }
                $.unblockUI();
            })
        }); var $carriers = $("#delivery_carrier .o_delivery_carrier_select"); $carriers.click(function () { if ($pay_using_wallet.prop('checked')) { $.blockUI({ css: { backgroundColor: '#f00', color: '#fff' } }); $pay_using_wallet.prop("checked", false); $pay_using_wallet.trigger('change'); } }); $('#o_payment_form_pay').on('click', function () { isSubmit = 1; }); $('.o_payment_form input[name="pm_id"]').on('click', function () { if ($(this).prop('checked')) { $('#wallet_payment .card-body').find('.js_add_msg').remove(); } });
    });
});;

/* /website_wallet_add_money/static/src/js/main.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website_wallet_add_money.wallet_add_money', function (require) {
    'use strict'; var ajax = require('web.ajax'); $(document).ready(function () {
        var $input_amount = $('#wk_wallet_amount'); $('#wk_wallet_add_money').click(function () {
            let amount = $input_amount.val().replace(/\,/g, ''); if (isNaN(amount) || parseFloat(amount) < 0) { $input_amount.addClass('wallet-amount-invalid'); return; }
            ajax.jsonRpc('/wallet/get/product', 'call', { 'amount': amount }).then(function (result) { window.location.replace('/shop/checkout'); })
        }); $('.wk-demo-amount').click(function () { $input_amount.removeClass('wallet-amount-invalid'); if ($input_amount.data('id') == $(this).data('id')) { $input_amount.val((parseFloat($input_amount.val().replace(/,/g, '')) + parseFloat($(this).find('.oe_currency_value').text().replace(/,/g, ''))).toFixed(2)); } else { $input_amount.val($(this).find('.oe_currency_value').text()); $input_amount.data('id', $(this).data('id')); } }); $('#wk-add-money').click(function () { $input_amount.removeClass('wallet-amount-invalid'); });
    });
});;

/* /project_extended/static/src/js/project_extended.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('project_extended.stage_change', function (require) {
    'use strict'; var ajax = require('web.ajax'); $('.btn-state-change').on('click', function (ev) {
        $(this).attr('disabled', true)
        var TaskID = $(this).attr('data-id')
        console.log(TaskID)
        if (TaskID) { ajax.jsonRpc('/task-stage-change', 'call', { 'task_id': parseInt(TaskID) }).then(function (data) { if (data) { location.reload(); } }); }
        $(this).removeAttr('disabled')
    });
});;

/* /portal_rating/static/src/js/portal_chatter.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('rating.portal.chatter', function (require) {
    'use strict'; var core = require('web.core'); var portalChatter = require('portal.chatter'); var utils = require('web.utils'); var time = require('web.time'); var _t = core._t; var PortalChatter = portalChatter.PortalChatter; var qweb = core.qweb; PortalChatter.include({
        events: _.extend({}, PortalChatter.prototype.events, { 'click .o_website_rating_select': '_onClickStarDomain', 'click .o_website_rating_select_text': '_onClickStarDomainReset', 'click .o_wrating_js_publisher_comment_btn': '_onClickPublisherComment', 'click .o_wrating_js_publisher_comment_edit': '_onClickPublisherComment', 'click .o_wrating_js_publisher_comment_delete': '_onClickPublisherCommentDelete', 'click .o_wrating_js_publisher_comment_submit': '_onClickPublisherCommentSubmit', 'click .o_wrating_js_publisher_comment_cancel': '_onClickPublisherCommentCancel', }), xmlDependencies: (PortalChatter.prototype.xmlDependencies || []).concat(['/portal_rating/static/src/xml/portal_tools.xml', '/portal_rating/static/src/xml/portal_chatter.xml']), init: function (parent, options) {
            this._super.apply(this, arguments); if (!_.contains(this.options, 'display_rating')) { this.options = _.defaults(this.options, { 'display_rating': false, 'rating_default_value': 0.0, }); }
            this.set('rating_card_values', {}); this.set('rating_value', false); this.on("change:rating_value", this, this._onChangeRatingDomain);
        }, preprocessMessages: function (messages) {
            var self = this; messages = this._super.apply(this, arguments); if (this.options['display_rating']) { _.each(messages, function (m, i) { m.rating_value = self.roundToHalf(m['rating_value']); m.rating = self._preprocessCommentData(m.rating, i); }); }
            this.messages = messages; return messages;
        }, roundToHalf: function (value) {
            var converted = parseFloat(value); var decimal = (converted - parseInt(converted, 10)); decimal = Math.round(decimal * 10); if (decimal === 5) { return (parseInt(converted, 10) + 0.5); }
            if ((decimal < 3) || (decimal > 7)) { return Math.round(converted); } else { return (parseInt(converted, 10) + 0.5); }
        }, _chatterInit: function () {
            var self = this; return this._super.apply(this, arguments).then(function (result) {
                if (!result['rating_stats']) { return; }
                var ratingData = { 'avg': Math.round(result['rating_stats']['avg'] * 100) / 100, 'percent': [], }; _.each(_.keys(result['rating_stats']['percent']).reverse(), function (rating) { ratingData['percent'].push({ 'num': rating, 'percent': utils.round_precision(result['rating_stats']['percent'][rating], 0.01), }); }); self.set('rating_card_values', ratingData);
            });
        }, _messageFetchPrepareParams: function () {
            var params = this._super.apply(this, arguments); if (this.options['display_rating']) { params['rating_include'] = true; }
            return params;
        }, _newPublisherCommentData: function (messageIndex) { return { mes_index: messageIndex, publisher_id: this.options.partner_id, publisher_avatar: _.str.sprintf('/web/image/%s/%s/image_128/50x50', 'res.partner', this.options.partner_id), publisher_name: _t("Write your comment"), publisher_datetime: '', publisher_comment: '', }; }, _preprocessCommentData: function (rawRating, messageIndex) {
            var ratingData = { id: rawRating.id, mes_index: messageIndex, publisher_datetime: rawRating.publisher_datetime ? moment(time.str_to_datetime(rawRating.publisher_datetime)).format('MMMM Do YYYY, h:mm:ss a') : "", publisher_comment: rawRating.publisher_comment ? rawRating.publisher_comment : '', }; if (rawRating.publisher_id && rawRating.publisher_id.length >= 2) { ratingData.publisher_id = rawRating.publisher_id[0]; ratingData.publisher_name = rawRating.publisher_id[1]; ratingData.publisher_avatar = _.str.sprintf('/web/image/%s/%s/image_128/50x50', 'res.partner', ratingData.publisher_id); }
            var commentData = _.extend(this._newPublisherCommentData(messageIndex), ratingData); return commentData;
        }, _getCommentContainer: function ($source) { return $source.parents(".o_wrating_publisher_container").first().find(".o_wrating_publisher_comment").first(); }, _getCommentButton: function ($source) { return $source.parents(".o_wrating_publisher_container").first().find(".o_wrating_js_publisher_comment_btn").first(); }, _getCommentTextarea: function ($source) { return $source.parents(".o_wrating_publisher_container").first().find(".o_portal_rating_comment_input").first(); }, _focusTextComment: function ($source) { this._getCommentTextarea($source).focus(); }, _onClickStarDomain: function (ev) { var $tr = this.$(ev.currentTarget); var num = $tr.data('star'); if ($tr.css('opacity') === '1') { this.set('rating_value', num); this.$('.o_website_rating_select').css({ 'opacity': 0.5, }); this.$('.o_website_rating_select_text[data-star="' + num + '"]').css({ 'visibility': 'visible', 'opacity': 1, }); this.$('.o_website_rating_select[data-star="' + num + '"]').css({ 'opacity': 1, }); } }, _onClickStarDomainReset: function (ev) { ev.stopPropagation(); ev.preventDefault(); this.set('rating_value', false); this.$('.o_website_rating_select_text').css('visibility', 'hidden'); this.$('.o_website_rating_select').css({ 'opacity': 1, }); }, _onClickPublisherComment: function (ev) {
            var $source = this.$(ev.currentTarget); if (this._getCommentTextarea($source).length === 1) { this._getCommentContainer($source).empty(); return; }
            var messageIndex = $source.data("mes_index"); var data = { is_publisher: this.options['is_user_publisher'] }; data.rating = this._newPublisherCommentData(messageIndex); var oldRating = this.messages[messageIndex].rating; data.rating.publisher_comment = oldRating.publisher_comment ? oldRating.publisher_comment : ''; this._getCommentContainer($source).html($(qweb.render("portal_rating.chatter_rating_publisher_form", data))); this._focusTextComment($source);
        }, _onClickPublisherCommentDelete: function (ev) { var self = this; var $source = this.$(ev.currentTarget); var messageIndex = $source.data("mes_index"); var ratingId = this.messages[messageIndex].rating.id; this._rpc({ route: '/website/rating/comment', params: { "rating_id": ratingId, "publisher_comment": '' } }).then(function (res) { self.messages[messageIndex].rating = self._preprocessCommentData(res, messageIndex); self._getCommentButton($source).removeClass("d-none"); self._getCommentContainer($source).empty(); }); }, _onClickPublisherCommentSubmit: function (ev) { var self = this; var $source = this.$(ev.currentTarget); var messageIndex = $source.data("mes_index"); var comment = this._getCommentTextarea($source).val(); var ratingId = this.messages[messageIndex].rating.id; this._rpc({ route: '/website/rating/comment', params: { "rating_id": ratingId, "publisher_comment": comment } }).then(function (res) { self.messages[messageIndex].rating = self._preprocessCommentData(res, messageIndex); if (self.messages[messageIndex].rating.publisher_comment !== '') { self._getCommentButton($source).addClass('d-none'); self._getCommentContainer($source).html($(qweb.render("portal_rating.chatter_rating_publisher_comment", { rating: self.messages[messageIndex].rating, is_publisher: self.options.is_user_publisher }))); } else { self._getCommentButton($source).removeClass("d-none"); self._getCommentContainer($source).empty(); } }); }, _onClickPublisherCommentCancel: function (ev) { var $source = this.$(ev.currentTarget); var messageIndex = $source.data("mes_index"); var comment = this.messages[messageIndex].rating.publisher_comment; if (comment) { var data = { rating: this.messages[messageIndex].rating, is_publisher: this.options.is_user_publisher }; this._getCommentContainer($source).html($(qweb.render("portal_rating.chatter_rating_publisher_comment", data))); } else { this._getCommentContainer($source).empty(); } }, _onChangeRatingDomain: function () {
            var domain = []; if (this.get('rating_value')) { domain = [['rating_value', '=', this.get('rating_value')]]; }
            this._changeCurrentPage(1, domain);
        },
    });
});;

/* /portal_rating/static/src/js/portal_composer.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('rating.portal.composer', function (require) {
    'use strict'; var core = require('web.core'); var portalComposer = require('portal.composer'); var _t = core._t; var PortalComposer = portalComposer.PortalComposer; PortalComposer.include({
        events: _.extend({}, PortalComposer.prototype.events, { 'click .stars i': '_onClickStar', 'mouseleave .stars': '_onMouseleaveStarBlock', 'mousemove .stars i': '_onMoveStar', 'mouseleave .stars i': '_onMoveLeaveStar', }), init: function (parent, options) {
            this._super.apply(this, arguments); if (options.default_rating_value) { options.default_rating_value = parseFloat(options.default_rating_value); }
            this.options = _.defaults(this.options, { 'default_message': false, 'default_message_id': false, 'default_rating_value': 0.0, 'force_submit_url': false, }); this.labels = { '0': "", '1': _t("I hate it"), '2': _t("I don't like it"), '3': _t("It's okay"), '4': _t("I like it"), '5': _t("I love it"), }; this.user_click = false; this.set("star_value", this.options.default_rating_value); this.on("change:star_value", this, this._onChangeStarValue);
        }, start: function () { var self = this; return this._super.apply(this, arguments).then(function () { self.$input = self.$('input[name="rating_value"]'); self.$star_list = self.$('.stars').find('i'); self.set("star_value", self.options.default_rating_value); self.$input.val(self.options.default_rating_value); }); }, _onChangeStarValue: function () {
            var val = this.get("star_value"); var index = Math.floor(val); var decimal = val - index; this.$star_list.removeClass('fa-star fa-star-half-o').addClass('fa-star-o'); this.$('.stars').find("i:lt(" + index + ")").removeClass('fa-star-o fa-star-half-o').addClass('fa-star'); if (decimal) { this.$('.stars').find("i:eq(" + index + ")").removeClass('fa-star-o fa-star fa-star-half-o').addClass('fa-star-half-o'); }
            this.$('.rate_text .badge').text(this.labels[index]);
        }, _onClickStar: function (ev) { var index = this.$('.stars i').index(ev.currentTarget); this.set("star_value", index + 1); this.user_click = true; this.$input.val(this.get("star_value")); }, _onMouseleaveStarBlock: function () { this.$('.rate_text').hide(); }, _onMoveStar: function (ev) { var index = this.$('.stars i').index(ev.currentTarget); this.$('.rate_text').show(); this.set("star_value", index + 1); }, _onMoveLeaveStar: function () {
            if (!this.user_click) { this.set("star_value", parseInt(this.$input.val())); }
            this.user_click = false;
        },
    });
});;

/* /portal_rating/static/src/js/portal_rating_composer.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('portal.rating.composer', function (require) { 'use strict'; var publicWidget = require('web.public.widget'); var session = require('web.session'); var portalComposer = require('portal.composer'); var PortalComposer = portalComposer.PortalComposer; var RatingPopupComposer = publicWidget.Widget.extend({ template: 'portal_rating.PopupComposer', xmlDependencies: ['/portal/static/src/xml/portal_chatter.xml', '/portal_rating/static/src/xml/portal_tools.xml', '/portal_rating/static/src/xml/portal_rating_composer.xml',], init: function (parent, options) { this._super.apply(this, arguments); this.rating_avg = Math.round(options['ratingAvg'] * 100) / 100 || 0.0; this.rating_total = options['ratingTotal'] || 0.0; this.options = _.defaults({}, options, { 'token': false, 'res_model': false, 'res_id': false, 'pid': 0, 'display_composer': options['disable_composer'] ? false : !session.is_website_user, 'display_rating': true, 'csrf_token': odoo.csrf_token, 'user_id': session.user_id, }); }, start: function () { var defs = []; defs.push(this._super.apply(this, arguments)); this._composer = new PortalComposer(this, this.options); defs.push(this._composer.replace(this.$('.o_portal_chatter_composer'))); return Promise.all(defs); }, }); publicWidget.registry.RatingPopupComposer = publicWidget.Widget.extend({ selector: '.o_rating_popup_composer', start: function () { var ratingPopupData = this.$el.data(); var ratingPopup = new RatingPopupComposer(this, ratingPopupData); return Promise.all([this._super.apply(this, arguments), ratingPopup.appendTo(this.$el)]); }, }); return RatingPopupComposer; });;

/* /web_tour/static/src/js/public/tour_manager.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('web_tour.public.TourManager', function (require) { 'use strict'; var TourManager = require('web_tour.TourManager'); var lazyloader = require('web.public.lazyloader'); TourManager.include({ _waitBeforeTourStart: function () { return this._super.apply(this, arguments).then(function () { return lazyloader.allScriptsLoaded; }).then(function () { return new Promise(function (resolve) { setTimeout(resolve); }); }); }, }); });;

/* /bus/static/src/js/longpolling_bus.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('bus.Longpolling', function (require) {
    "use strict"; var Bus = require('web.Bus'); var ServicesMixin = require('web.ServicesMixin'); var LongpollingBus = Bus.extend(ServicesMixin, {
        PARTNERS_PRESENCE_CHECK_PERIOD: 30000, ERROR_RETRY_DELAY: 10000, POLL_ROUTE: '/longpolling/poll', _isActive: null, _lastNotificationID: 0, _isOdooFocused: true, _pollRetryTimeout: null, init: function (parent, params) { this._super.apply(this, arguments); this._id = _.uniqueId('bus'); this._longPollingBusId = this._id; this._options = {}; this._channels = []; this._lastPresenceTime = new Date().getTime(); $(window).on("focus." + this._longPollingBusId, this._onFocusChange.bind(this, { focus: true })); $(window).on("blur." + this._longPollingBusId, this._onFocusChange.bind(this, { focus: false })); $(window).on("unload." + this._longPollingBusId, this._onFocusChange.bind(this, { focus: false })); $(window).on("click." + this._longPollingBusId, this._onPresence.bind(this)); $(window).on("keydown." + this._longPollingBusId, this._onPresence.bind(this)); $(window).on("keyup." + this._longPollingBusId, this._onPresence.bind(this)); }, destroy: function () { this.stopPolling(); $(window).off("focus." + this._longPollingBusId); $(window).off("blur." + this._longPollingBusId); $(window).off("unload." + this._longPollingBusId); $(window).off("click." + this._longPollingBusId); $(window).off("keydown." + this._longPollingBusId); $(window).off("keyup." + this._longPollingBusId); this._super(); }, addChannel: function (channel) { if (this._channels.indexOf(channel) === -1) { this._channels.push(channel); if (this._pollRpc) { this._pollRpc.abort(); } else { this.startPolling(); } } }, deleteChannel: function (channel) { var index = this._channels.indexOf(channel); if (index !== -1) { this._channels.splice(index, 1); if (this._pollRpc) { this._pollRpc.abort(); } } }, isOdooFocused: function () { return this._isOdooFocused; }, startPolling: function () {
            if (this._isActive === null) { this._poll = this._poll.bind(this); }
            if (!this._isActive) { this._isActive = true; this._poll(); }
        }, stopPolling: function () { this._isActive = false; this._channels = []; clearTimeout(this._pollRetryTimeout); if (this._pollRpc) { this._pollRpc.abort(); } }, updateOption: function (key, value) { this._options[key] = value; }, _getLastPresence: function () { return this._lastPresenceTime; }, _poll: function () {
            var self = this; if (!this._isActive) { return; }
            var now = new Date().getTime(); var options = _.extend({}, this._options, { bus_inactivity: now - this._getLastPresence(), }); var data = { channels: this._channels, last: this._lastNotificationID, options: options }; this._pollRpc = this._makePoll(data); this._pollRpc.then(function (result) { self._pollRpc = false; self._onPoll(result); self._poll(); }).guardedCatch(function (result) { self._pollRpc = false; result.event.preventDefault(); if (result.message === "XmlHttpRequestError abort") { self._poll(); } else { self._pollRetryTimeout = setTimeout(self._poll, self.ERROR_RETRY_DELAY + (Math.floor((Math.random() * 20) + 1) * 1000)); } });
        }, _makePoll: function (data) { return this._rpc({ route: this.POLL_ROUTE, params: data }, { shadow: true, timeout: 60000 }); }, _onFocusChange: function (params) { this._isOdooFocused = params.focus; if (params.focus) { this._lastPresenceTime = new Date().getTime(); this.trigger('window_focus', this._isOdooFocused); } }, _onPoll: function (notifications) {
            var self = this; var notifs = _.map(notifications, function (notif) {
                if (notif.id > self._lastNotificationID) { self._lastNotificationID = notif.id; }
                return [notif.channel, notif.message];
            }); this.trigger("notification", notifs); return notifs;
        }, _onPresence: function () { this._lastPresenceTime = new Date().getTime(); },
    }); return LongpollingBus;
});;

/* /bus/static/src/js/crosstab_bus.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('bus.CrossTab', function (require) {
    "use strict"; var Longpolling = require('bus.Longpolling'); var session = require('web.session'); var CrossTabBus = Longpolling.extend({
        TAB_HEARTBEAT_PERIOD: 10000, MASTER_TAB_HEARTBEAT_PERIOD: 1500, HEARTBEAT_OUT_OF_DATE_PERIOD: 5000, HEARTBEAT_KILL_OLD_PERIOD: 15000, LOCAL_STORAGE_PREFIX: 'bus', _isMasterTab: false, _isRegistered: false, init: function () {
            this._super.apply(this, arguments); var now = new Date().getTime(); this._sanitizedOrigin = session.origin.replace(/:\/{0,2}/g, '_'); this._id = _.uniqueId(this.LOCAL_STORAGE_PREFIX) + ':' + now; if (this._callLocalStorage('getItem', 'last_ts', 0) + 50000 < now) { this._callLocalStorage('removeItem', 'last'); }
            this._lastNotificationID = this._callLocalStorage('getItem', 'last', 0); this.call('local_storage', 'onStorage', this, this._onStorage);
        }, destroy: function () { this._super(); clearTimeout(this._heartbeatTimeout); }, addChannel: function () { this._super.apply(this, arguments); this._callLocalStorage('setItem', 'channels', this._channels); }, deleteChannel: function () { this._super.apply(this, arguments); this._callLocalStorage('setItem', 'channels', this._channels); }, getTabId: function () { return this._id; }, isMasterTab: function () { return this._isMasterTab; }, startPolling: function () {
            if (this._isActive === null) { this._heartbeat = this._heartbeat.bind(this); }
            if (!this._isRegistered) {
                this._isRegistered = true; var peers = this._callLocalStorage('getItem', 'peers', {}); peers[this._id] = new Date().getTime(); this._callLocalStorage('setItem', 'peers', peers); this._registerWindowUnload(); if (!this._callLocalStorage('getItem', 'master')) { this._startElection(); }
                this._heartbeat(); if (this._isMasterTab) { this._callLocalStorage('setItem', 'channels', this._channels); this._callLocalStorage('setItem', 'options', this._options); } else { this._channels = this._callLocalStorage('getItem', 'channels', this._channels); this._options = this._callLocalStorage('getItem', 'options', this._options); }
                return;
            }
            if (this._isMasterTab) { this._super.apply(this, arguments); }
        }, updateOption: function () { this._super.apply(this, arguments); this._callLocalStorage('setItem', 'options', this._options); }, _callLocalStorage: function (method, key, param) { return this.call('local_storage', method, this._generateKey(key), param); }, _generateKey: function (key) { return this.LOCAL_STORAGE_PREFIX + '.' + this._sanitizedOrigin + '.' + key; }, _getLastPresence: function () { return this._callLocalStorage('getItem', 'lastPresence') || this._super(); }, _heartbeat: function () {
            var now = new Date().getTime(); var heartbeatValue = parseInt(this._callLocalStorage('getItem', 'heartbeat', 0)); var peers = this._callLocalStorage('getItem', 'peers', {}); if ((heartbeatValue + this.HEARTBEAT_OUT_OF_DATE_PERIOD) < now) { this._startElection(); heartbeatValue = parseInt(this._callLocalStorage('getItem', 'heartbeat', 0)); }
            if (this._isMasterTab) {
                var cleanedPeers = {}; for (var peerName in peers) { if (peers[peerName] + this.HEARTBEAT_KILL_OLD_PERIOD > now) { cleanedPeers[peerName] = peers[peerName]; } }
                if (heartbeatValue !== this.lastHeartbeat) { this._isMasterTab = false; this.lastHeartbeat = 0; peers[this._id] = now; this._callLocalStorage('setItem', 'peers', peers); this.stopPolling(); this.trigger('no_longer_master'); } else { this.lastHeartbeat = now; this._callLocalStorage('setItem', 'heartbeat', now); this._callLocalStorage('setItem', 'peers', cleanedPeers); }
            } else { peers[this._id] = now; this._callLocalStorage('setItem', 'peers', peers); }
            var hbPeriod = this._isMasterTab ? this.MASTER_TAB_HEARTBEAT_PERIOD : this.TAB_HEARTBEAT_PERIOD; if (this._lastPresenceTime + hbPeriod > now) { this._callLocalStorage('setItem', 'lastPresence', this._lastPresenceTime); }
            this._heartbeatTimeout = setTimeout(this._heartbeat.bind(this), hbPeriod);
        }, _registerWindowUnload: function () { $(window).on('unload.' + this._id, this._onUnload.bind(this)); }, _startElection: function () {
            if (this._isMasterTab) { return; }
            var now = new Date().getTime(); var peers = this._callLocalStorage('getItem', 'peers', {}); var heartbeatKillOld = now - this.HEARTBEAT_KILL_OLD_PERIOD; var newMaster; for (var peerName in peers) {
                if (peers[peerName] < heartbeatKillOld) { continue; }
                newMaster = peerName; break;
            }
            if (newMaster === this._id) { this.lastHeartbeat = now; this._callLocalStorage('setItem', 'heartbeat', this.lastHeartbeat); this._callLocalStorage('setItem', 'master', true); this._isMasterTab = true; this.startPolling(); this.trigger('become_master'); delete peers[newMaster]; this._callLocalStorage('setItem', 'peers', peers); }
        }, _onFocusChange: function (params) { this._super.apply(this, arguments); this._callLocalStorage('setItem', 'focus', params.focus); }, _onPoll: function (notifications) { var notifs = this._super(notifications); if (this._isMasterTab && notifs.length) { this._callLocalStorage('setItem', 'last', this._lastNotificationID); this._callLocalStorage('setItem', 'last_ts', new Date().getTime()); this._callLocalStorage('setItem', 'notification', notifs); } }, _onStorage: function (e) {
            var value = JSON.parse(e.newValue); var key = e.key; if (this._isRegistered && key === this._generateKey('master') && !value) { this._startElection(); }
            if (key === this._generateKey('last')) { this._lastNotificationID = value || 0; }
            else if (key === this._generateKey('notification')) { if (!this._isMasterTab) { this.trigger("notification", value); } }
            else if (key === this._generateKey('channels')) { this._channels = value; }
            else if (key === this._generateKey('options')) { this._options = value; }
            else if (key === this._generateKey('focus')) { this._isOdooFocused = value; this.trigger('window_focus', this._isOdooFocused); }
        }, _onUnload: function () { var peers = this._callLocalStorage('getItem', 'peers') || {}; delete peers[this._id]; this._callLocalStorage('setItem', 'peers', peers); if (this._isMasterTab) { this._callLocalStorage('removeItem', 'master'); } },
    }); return CrossTabBus;
});;

/* /bus/static/src/js/services/bus_service.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('bus.BusService', function (require) {
    "use strict"; var CrossTab = require('bus.CrossTab'); var core = require('web.core'); var ServicesMixin = require('web.ServicesMixin'); const session = require('web.session'); var BusService = CrossTab.extend(ServicesMixin, {
        dependencies: ['local_storage'], _audio: null, init: function (env) { this.env = env; this._super(); }, _trigger_up: function (ev) {
            if (ev.name === 'call_service') {
                const payload = ev.data; let args = payload.args || []; if (payload.service === 'ajax' && payload.method === 'rpc') { args = args.concat(ev.target); }
                const service = this.env.services[payload.service]; const result = service[payload.method].apply(service, args); payload.callback(result);
            }
        }, start: function () { }, sendNotification: function (title, content, callback) { if (window.Notification && Notification.permission === "granted") { if (this.isMasterTab()) { try { this._sendNativeNotification(title, content, callback); } catch (error) { if (error.message.indexOf('ServiceWorkerRegistration') > -1) { this.do_notify(title, content); this._beep(); } else { throw error; } } } } else { this.do_notify(title, content); if (this.isMasterTab()) { this._beep(); } } }, onNotification: function () { this.on.apply(this, ["notification"].concat(Array.prototype.slice.call(arguments))); }, _beep: function () {
            if (typeof (Audio) !== "undefined") {
                if (!this._audio) { this._audio = new Audio(); var ext = this._audio.canPlayType("audio/ogg; codecs=vorbis") ? ".ogg" : ".mp3"; this._audio.src = session.url("/mail/static/src/audio/ting" + ext); }
                Promise.resolve(this._audio.play()).catch(_.noop);
            }
        }, _sendNativeNotification: function (title, content, callback) {
            var notification = new Notification(_.unescape(title), { body: _.unescape(content), icon: "/mail/static/src/img/odoobot_transparent.png" }); notification.onclick = function () {
                window.focus(); if (this.cancel) { this.cancel(); } else if (this.close) { this.close(); }
                if (callback) { callback(); }
            };
        },
    }); core.serviceRegistry.add('bus_service', BusService); return BusService;
});;

/* /auth_signup/static/src/js/signup.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('auth_signup.signup', function (require) { 'use strict'; var publicWidget = require('web.public.widget'); publicWidget.registry.SignUpForm = publicWidget.Widget.extend({ selector: '.oe_signup_form', events: { 'submit': '_onSubmit', }, _onSubmit: function () { var $btn = this.$('.oe_login_buttons > button[type="submit"]'); $btn.attr('disabled', 'disabled'); $btn.prepend('<i class="fa fa-refresh fa-spin"/> '); }, }); });;

/* /account/static/src/js/account_portal_sidebar.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('account.AccountPortalSidebar', function (require) {
    'use strict'; const dom = require('web.dom'); var publicWidget = require('web.public.widget'); var PortalSidebar = require('portal.PortalSidebar'); var utils = require('web.utils'); publicWidget.registry.AccountPortalSidebar = PortalSidebar.extend({
        selector: '.o_portal_invoice_sidebar', events: { 'click .o_portal_invoice_print': '_onPrintInvoice', }, start: function () {
            var def = this._super.apply(this, arguments); var $invoiceHtml = this.$el.find('iframe#invoice_html'); var updateIframeSize = this._updateIframeSize.bind(this, $invoiceHtml); $(window).on('resize', updateIframeSize); var iframeDoc = $invoiceHtml[0].contentDocument || $invoiceHtml[0].contentWindow.document; if (iframeDoc.readyState === 'complete') { updateIframeSize(); } else { $invoiceHtml.on('load', updateIframeSize); }
            return def;
        }, _updateIframeSize: function ($el) {
            var $wrapwrap = $el.contents().find('div#wrapwrap'); $el.height(0); $el.height($wrapwrap[0].scrollHeight); if (!utils.isValidAnchor(window.location.hash)) { return; }
            var $target = $(window.location.hash); if (!$target.length) { return; }
            dom.scrollTo($target[0], { duration: 0 });
        }, _onPrintInvoice: function (ev) { ev.preventDefault(); var href = $(ev.currentTarget).attr('href'); this._printIframeContent(href); },
    });
});;

/* /payment/static/lib/jquery.payment/jquery.payment.js defined in bundle 'web.assets_frontend_lazy' */
(function () {
    var $, cardFromNumber, cardFromType, cards, defaultFormat, formatBackCardNumber, formatBackExpiry, formatCardNumber, formatExpiry, formatForwardExpiry, formatForwardSlashAndSpace, hasTextSelected, luhnCheck, reFormatCVC, reFormatCardNumber, reFormatExpiry, reFormatNumeric, replaceFullWidthChars, restrictCVC, restrictCardNumber, restrictExpiry, restrictNumeric, safeVal, setCardType, __slice = [].slice, __indexOf = [].indexOf || function (item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; }; $ = window.jQuery || window.Zepto || window.$; $.payment = {}; $.payment.fn = {}; $.fn.payment = function () { var args, method; method = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : []; return $.payment.fn[method].apply(this, args); }; defaultFormat = /(\d{1,4})/g; $.payment.cards = cards = [{ type: 'maestro', patterns: [5018, 502, 503, 506, 56, 58, 639, 6220, 67], format: defaultFormat, length: [12, 13, 14, 15, 16, 17, 18, 19], cvcLength: [3], luhn: true }, { type: 'forbrugsforeningen', patterns: [600], format: defaultFormat, length: [16], cvcLength: [3], luhn: true }, { type: 'dankort', patterns: [5019], format: defaultFormat, length: [16], cvcLength: [3], luhn: true }, { type: 'visa', patterns: [4], format: defaultFormat, length: [13, 16], cvcLength: [3], luhn: true }, { type: 'mastercard', patterns: [51, 52, 53, 54, 55, 22, 23, 24, 25, 26, 27], format: defaultFormat, length: [16], cvcLength: [3], luhn: true }, { type: 'amex', patterns: [34, 37], format: /(\d{1,4})(\d{1,6})?(\d{1,5})?/, length: [15], cvcLength: [3, 4], luhn: true }, { type: 'dinersclub', patterns: [30, 36, 38, 39], format: /(\d{1,4})(\d{1,6})?(\d{1,4})?/, length: [14], cvcLength: [3], luhn: true }, { type: 'discover', patterns: [60, 64, 65, 622], format: defaultFormat, length: [16], cvcLength: [3], luhn: true }, { type: 'unionpay', patterns: [62, 88], format: defaultFormat, length: [16, 17, 18, 19], cvcLength: [3], luhn: false }, { type: 'jcb', patterns: [35], format: defaultFormat, length: [16], cvcLength: [3], luhn: true }]; cardFromNumber = function (num) { var card, p, pattern, _i, _j, _len, _len1, _ref; num = (num + '').replace(/\D/g, ''); for (_i = 0, _len = cards.length; _i < _len; _i++) { card = cards[_i]; _ref = card.patterns; for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) { pattern = _ref[_j]; p = pattern + ''; if (num.substr(0, p.length) === p) { return card; } } } }; cardFromType = function (type) { var card, _i, _len; for (_i = 0, _len = cards.length; _i < _len; _i++) { card = cards[_i]; if (card.type === type) { return card; } } }; luhnCheck = function (num) {
        var digit, digits, odd, sum, _i, _len; odd = true; sum = 0; digits = (num + '').split('').reverse(); for (_i = 0, _len = digits.length; _i < _len; _i++) {
            digit = digits[_i]; digit = parseInt(digit, 10); if ((odd = !odd)) { digit *= 2; }
            if (digit > 9) { digit -= 9; }
            sum += digit;
        }
        return sum % 10 === 0;
    }; hasTextSelected = function ($target) {
        var _ref; if (($target.prop('selectionStart') != null) && $target.prop('selectionStart') !== $target.prop('selectionEnd')) { return true; }
        if ((typeof document !== "undefined" && document !== null ? (_ref = document.selection) != null ? _ref.createRange : void 0 : void 0) != null) { if (document.selection.createRange().text) { return true; } }
        return false;
    }; safeVal = function (value, $target) {
        var currPair, cursor, digit, error, last, prevPair; try { cursor = $target.prop('selectionStart'); } catch (_error) { error = _error; cursor = null; }
        last = $target.val(); $target.val(value); if (cursor !== null && $target.is(":focus")) {
            if (cursor === last.length) { cursor = value.length; }
            if (last !== value) { prevPair = last.slice(cursor - 1, +cursor + 1 || 9e9); currPair = value.slice(cursor - 1, +cursor + 1 || 9e9); digit = value[cursor]; if (/\d/.test(digit) && prevPair === ("" + digit + " ") && currPair === (" " + digit)) { cursor = cursor + 1; } }
            $target.prop('selectionStart', cursor); return $target.prop('selectionEnd', cursor);
        }
    }; replaceFullWidthChars = function (str) {
        var chars, chr, fullWidth, halfWidth, idx, value, _i, _len; if (str == null) { str = ''; }
        fullWidth = '\uff10\uff11\uff12\uff13\uff14\uff15\uff16\uff17\uff18\uff19'; halfWidth = '0123456789'; value = ''; chars = str.split(''); for (_i = 0, _len = chars.length; _i < _len; _i++) {
            chr = chars[_i]; idx = fullWidth.indexOf(chr); if (idx > -1) { chr = halfWidth[idx]; }
            value += chr;
        }
        return value;
    }; reFormatNumeric = function (e) { var $target; $target = $(e.currentTarget); return setTimeout(function () { var value; value = $target.val(); value = replaceFullWidthChars(value); value = value.replace(/\D/g, ''); return safeVal(value, $target); }); }; reFormatCardNumber = function (e) { var $target; $target = $(e.currentTarget); return setTimeout(function () { var value; value = $target.val(); value = replaceFullWidthChars(value); value = $.payment.formatCardNumber(value); return safeVal(value, $target); }); }; formatCardNumber = function (e) {
        var $target, card, digit, length, re, upperLength, value; digit = String.fromCharCode(e.which); if (!/^\d+$/.test(digit)) { return; }
        $target = $(e.currentTarget); value = $target.val(); card = cardFromNumber(value + digit); length = (value.replace(/\D/g, '') + digit).length; upperLength = 16; if (card) { upperLength = card.length[card.length.length - 1]; }
        if (length >= upperLength) { return; }
        if (($target.prop('selectionStart') != null) && $target.prop('selectionStart') !== value.length) { return; }
        if (card && card.type === 'amex') { re = /^(\d{4}|\d{4}\s\d{6})$/; } else { re = /(?:^|\s)(\d{4})$/; }
        if (re.test(value)) { e.preventDefault(); return setTimeout(function () { return $target.val(value + ' ' + digit); }); } else if (re.test(value + digit)) { e.preventDefault(); return setTimeout(function () { return $target.val(value + digit + ' '); }); }
    }; formatBackCardNumber = function (e) {
        var $target, value; $target = $(e.currentTarget); value = $target.val(); if (e.which !== 8) { return; }
        if (($target.prop('selectionStart') != null) && $target.prop('selectionStart') !== value.length) { return; }
        if (/\d\s$/.test(value)) { e.preventDefault(); return setTimeout(function () { return $target.val(value.replace(/\d\s$/, '')); }); } else if (/\s\d?$/.test(value)) { e.preventDefault(); return setTimeout(function () { return $target.val(value.replace(/\d$/, '')); }); }
    }; reFormatExpiry = function (e) { var $target; $target = $(e.currentTarget); return setTimeout(function () { var value; value = $target.val(); value = replaceFullWidthChars(value); value = $.payment.formatExpiry(value); return safeVal(value, $target); }); }; formatExpiry = function (e) {
        var $target, digit, val; digit = String.fromCharCode(e.which); if (!/^\d+$/.test(digit)) { return; }
        $target = $(e.currentTarget); val = $target.val() + digit; if (/^\d$/.test(val) && (val !== '0' && val !== '1')) { e.preventDefault(); return setTimeout(function () { return $target.val("0" + val + " / "); }); } else if (/^\d\d$/.test(val)) { e.preventDefault(); return setTimeout(function () { var m1, m2; m1 = parseInt(val[0], 10); m2 = parseInt(val[1], 10); if (m2 > 2 && m1 !== 0) { return $target.val("0" + m1 + " / " + m2); } else { return $target.val("" + val + " / "); } }); }
    }; formatForwardExpiry = function (e) {
        var $target, digit, val; digit = String.fromCharCode(e.which); if (!/^\d+$/.test(digit)) { return; }
        $target = $(e.currentTarget); val = $target.val(); if (/^\d\d$/.test(val)) { return $target.val("" + val + " / "); }
    }; formatForwardSlashAndSpace = function (e) {
        var $target, val, which; which = String.fromCharCode(e.which); if (!(which === '/' || which === ' ')) { return; }
        $target = $(e.currentTarget); val = $target.val(); if (/^\d$/.test(val) && val !== '0') { return $target.val("0" + val + " / "); }
    }; formatBackExpiry = function (e) {
        var $target, value; $target = $(e.currentTarget); value = $target.val(); if (e.which !== 8) { return; }
        if (($target.prop('selectionStart') != null) && $target.prop('selectionStart') !== value.length) { return; }
        if (/\d\s\/\s$/.test(value)) { e.preventDefault(); return setTimeout(function () { return $target.val(value.replace(/\d\s\/\s$/, '')); }); }
    }; reFormatCVC = function (e) { var $target; $target = $(e.currentTarget); return setTimeout(function () { var value; value = $target.val(); value = replaceFullWidthChars(value); value = value.replace(/\D/g, '').slice(0, 4); return safeVal(value, $target); }); }; restrictNumeric = function (e) {
        var input; if (e.metaKey || e.ctrlKey) { return true; }
        if (e.which === 32) { return false; }
        if (e.which === 0) { return true; }
        if (e.which < 33) { return true; }
        input = String.fromCharCode(e.which); return !!/[\d\s]/.test(input);
    }; restrictCardNumber = function (e) {
        var $target, card, digit, value; $target = $(e.currentTarget); digit = String.fromCharCode(e.which); if (!/^\d+$/.test(digit)) { return; }
        if (hasTextSelected($target)) { return; }
        value = ($target.val() + digit).replace(/\D/g, ''); card = cardFromNumber(value); if (card) { return value.length <= card.length[card.length.length - 1]; } else { return value.length <= 16; }
    }; restrictExpiry = function (e) {
        var $target, digit, value; $target = $(e.currentTarget); digit = String.fromCharCode(e.which); if (!/^\d+$/.test(digit)) { return; }
        if (hasTextSelected($target)) { return; }
        value = $target.val() + digit; value = value.replace(/\D/g, ''); if (value.length > 6) { return false; }
    }; restrictCVC = function (e) {
        var $target, digit, val; $target = $(e.currentTarget); digit = String.fromCharCode(e.which); if (!/^\d+$/.test(digit)) { return; }
        if (hasTextSelected($target)) { return; }
        val = $target.val() + digit; return val.length <= 4;
    }; setCardType = function (e) {
        var $target, allTypes, card, cardType, val; $target = $(e.currentTarget); val = $target.val(); cardType = $.payment.cardType(val) || 'unknown'; if (!$target.hasClass(cardType)) {
            allTypes = (function () {
                var _i, _len, _results; _results = []; for (_i = 0, _len = cards.length; _i < _len; _i++) { card = cards[_i]; _results.push(card.type); }
                return _results;
            })(); $target.removeClass('unknown'); $target.removeClass(allTypes.join(' ')); $target.addClass(cardType); $target.toggleClass('identified', cardType !== 'unknown'); return $target.trigger('payment.cardType', cardType);
        }
    }; $.payment.fn.formatCardCVC = function () { this.on('keypress', restrictNumeric); this.on('keypress', restrictCVC); this.on('paste', reFormatCVC); this.on('change', reFormatCVC); this.on('input', reFormatCVC); return this; }; $.payment.fn.formatCardExpiry = function () { this.on('keypress', restrictNumeric); this.on('keypress', restrictExpiry); this.on('keypress', formatExpiry); this.on('keypress', formatForwardSlashAndSpace); this.on('keypress', formatForwardExpiry); this.on('keydown', formatBackExpiry); this.on('change', reFormatExpiry); this.on('input', reFormatExpiry); return this; }; $.payment.fn.formatCardNumber = function () { this.on('keypress', restrictNumeric); this.on('keypress', restrictCardNumber); this.on('keypress', formatCardNumber); this.on('keydown', formatBackCardNumber); this.on('keyup', setCardType); this.on('paste', reFormatCardNumber); this.on('change', reFormatCardNumber); this.on('input', reFormatCardNumber); this.on('input', setCardType); return this; }; $.payment.fn.restrictNumeric = function () { this.on('keypress', restrictNumeric); this.on('paste', reFormatNumeric); this.on('change', reFormatNumeric); this.on('input', reFormatNumeric); return this; }; $.payment.fn.cardExpiryVal = function () { return $.payment.cardExpiryVal($(this).val()); }; $.payment.cardExpiryVal = function (value) {
        var month, prefix, year, _ref; _ref = value.split(/[\s\/]+/, 2), month = _ref[0], year = _ref[1]; if ((year != null ? year.length : void 0) === 2 && /^\d+$/.test(year)) { prefix = (new Date).getFullYear(); prefix = prefix.toString().slice(0, 2); year = prefix + year; }
        month = parseInt(month, 10); year = parseInt(year, 10); return { month: month, year: year };
    }; $.payment.validateCardNumber = function (num) {
        var card, _ref; num = (num + '').replace(/\s+|-/g, ''); if (!/^\d+$/.test(num)) { return false; }
        card = cardFromNumber(num); if (!card) { return false; }
        return (_ref = num.length, __indexOf.call(card.length, _ref) >= 0) && (card.luhn === false || luhnCheck(num));
    }; $.payment.validateCardExpiry = function (month, year) {
        var currentTime, expiry, _ref; if (typeof month === 'object' && 'month' in month) { _ref = month, month = _ref.month, year = _ref.year; }
        if (!(month && year)) { return false; }
        month = $.trim(month); year = $.trim(year); if (!/^\d+$/.test(month)) { return false; }
        if (!/^\d+$/.test(year)) { return false; }
        if (!((1 <= month && month <= 12))) { return false; }
        if (year.length === 2) { if (year < 70) { year = "20" + year; } else { year = "19" + year; } }
        if (year.length !== 4) { return false; }
        expiry = new Date(year, month); currentTime = new Date; expiry.setMonth(expiry.getMonth() - 1); expiry.setMonth(expiry.getMonth() + 1, 1); return expiry > currentTime;
    }; $.payment.validateCardCVC = function (cvc, type) {
        var card, _ref; cvc = $.trim(cvc); if (!/^\d+$/.test(cvc)) { return false; }
        card = cardFromType(type); if (card != null) { return _ref = cvc.length, __indexOf.call(card.cvcLength, _ref) >= 0; } else { return cvc.length >= 3 && cvc.length <= 4; }
    }; $.payment.cardType = function (num) {
        var _ref; if (!num) { return null; }
        return ((_ref = cardFromNumber(num)) != null ? _ref.type : void 0) || null;
    }; $.payment.formatCardNumber = function (num) {
        var card, groups, upperLength, _ref; num = num.replace(/\D/g, ''); card = cardFromNumber(num); if (!card) { return num; }
        upperLength = card.length[card.length.length - 1]; num = num.slice(0, upperLength); if (card.format.global) { return (_ref = num.match(card.format)) != null ? _ref.join(' ') : void 0; } else {
            groups = card.format.exec(num); if (groups == null) { return; }
            groups.shift(); groups = $.grep(groups, function (n) { return n; }); return groups.join(' ');
        }
    }; $.payment.formatExpiry = function (expiry) {
        var mon, parts, sep, year; parts = expiry.match(/^\D*(\d{1,2})(\D+)?(\d{1,4})?/); if (!parts) { return ''; }
        mon = parts[1] || ''; sep = parts[2] || ''; year = parts[3] || ''; if (year.length > 0) {
            sep = ' / '; if (year.length === 4)
                year = year.substr(-2);
        } else if (sep === ' /') { mon = mon.substring(0, 1); sep = ''; } else if (mon.length === 2 || sep.length > 0) { sep = ' / '; } else if (mon.length === 1 && (mon !== '0' && mon !== '1')) { mon = "0" + mon; sep = ' / '; }
        return mon + sep + year;
    };
}).call(this);;

/* /payment/static/src/js/payment_portal.js defined in bundle 'web.assets_frontend_lazy' */
$(function () {
    $('input#cc_number').payment('formatCardNumber'); $('input#cc_cvc').payment('formatCardCVC'); $('input#cc_expiry').payment('formatCardExpiry')
    $('input#cc_number').on('focusout', function (e) {
        var valid_value = $.payment.validateCardNumber(this.value); var card_type = $.payment.cardType(this.value); if (card_type) { $(this).parent('.form-group').children('.card_placeholder').removeClass().addClass('card_placeholder ' + card_type); $(this).parent('.form-group').children('input[name="cc_brand"]').val(card_type) }
        else { $(this).parent('.form-group').children('.card_placeholder').removeClass().addClass('card_placeholder'); }
        if (valid_value) { $(this).parent('.form-group').addClass('o_has_success').find('.form-control, .custom-select').addClass('is-valid'); $(this).parent('.form-group').removeClass('o_has_error').find('.form-control, .custom-select').removeClass('is-invalid'); $(this).siblings('.o_invalid_field').remove(); }
        else { $(this).parent('.form-group').addClass('o_has_error').find('.form-control, .custom-select').addClass('is-invalid'); $(this).parent('.form-group').removeClass('o_has_success').find('.form-control, .custom-select').removeClass('is-valid'); }
    }); $('input#cc_cvc').on('focusout', function (e) {
        var cc_nbr = $(this).parents('.oe_cc').find('#cc_number').val(); var card_type = $.payment.cardType(cc_nbr); var valid_value = $.payment.validateCardCVC(this.value, card_type); if (valid_value) { $(this).parent('.form-group').addClass('o_has_success').find('.form-control, .custom-select').addClass('is-valid'); $(this).parent('.form-group').removeClass('o_has_error').find('.form-control, .custom-select').removeClass('is-invalid'); $(this).siblings('.o_invalid_field').remove(); }
        else { $(this).parent('.form-group').addClass('o_has_error').find('.form-control, .custom-select').addClass('is-invalid'); $(this).parent('.form-group').removeClass('o_has_success').find('.form-control, .custom-select').removeClass('is-valid'); }
    }); $('input#cc_expiry').on('focusout', function (e) {
        var expiry_value = $.payment.cardExpiryVal(this.value); var month = expiry_value.month || ''; var year = expiry_value.year || ''; var valid_value = $.payment.validateCardExpiry(month, year); if (valid_value) { $(this).parent('.form-group').addClass('o_has_success').find('.form-control, .custom-select').addClass('is-valid'); $(this).parent('.form-group').removeClass('o_has_error').find('.form-control, .custom-select').removeClass('is-invalid'); $(this).siblings('.o_invalid_field').remove(); }
        else { $(this).parent('.form-group').addClass('o_has_error').find('.form-control, .custom-select').addClass('is-invalid'); $(this).parent('.form-group').removeClass('o_has_success').find('.form-control, .custom-select').removeClass('is-valid'); }
    }); $('select[name="pm_acquirer_id"]').on('change', function () { var acquirer_id = $(this).val(); $('.acquirer').addClass('d-none'); $('.acquirer[data-acquirer-id="' + acquirer_id + '"]').removeClass('d-none'); });
});;

/* /payment/static/src/js/payment_form.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('payment.payment_form', function (require) {
    "use strict"; var core = require('web.core'); var Dialog = require('web.Dialog'); var publicWidget = require('web.public.widget'); var _t = core._t; publicWidget.registry.PaymentForm = publicWidget.Widget.extend({
        selector: '.o_payment_form', events: { 'submit': 'onSubmit', 'click #o_payment_form_pay': 'payEvent', 'click #o_payment_form_add_pm': 'addPmEvent', 'click button[name="delete_pm"]': 'deletePmEvent', 'click .o_payment_form_pay_icon_more': 'onClickMorePaymentIcon', 'click .o_payment_acquirer_select': 'radioClickEvent', }, start: function () { this._adaptPayButton(); window.addEventListener('pageshow', function (event) { if (event.persisted) { window.location.reload(); } }); var self = this; return this._super.apply(this, arguments).then(function () { self.options = _.extend(self.$el.data(), self.options); self.updateNewPaymentDisplayStatus(); $('[data-toggle="tooltip"]').tooltip(); }); }, displayError: function (title, message) {
            var $checkedRadio = this.$('input[type="radio"]:checked'), acquirerID = this.getAcquirerIdFromRadio($checkedRadio[0]); var $acquirerForm; if (this.isNewPaymentRadio($checkedRadio[0])) { $acquirerForm = this.$('#o_payment_add_token_acq_' + acquirerID); }
            else if (this.isFormPaymentRadio($checkedRadio[0])) { $acquirerForm = this.$('#o_payment_form_acq_' + acquirerID); }
            if ($checkedRadio.length === 0) { return new Dialog(null, { title: _t('Error: ') + _.str.escapeHTML(title), size: 'medium', $content: "<p>" + (_.str.escapeHTML(message) || "") + "</p>", buttons: [{ text: _t('Ok'), close: true }] }).open(); } else {
                this.$('#payment_error').remove(); var messageResult = '<div class="alert alert-danger mb4" id="payment_error">'; if (title != '') { messageResult = messageResult + '<b>' + _.str.escapeHTML(title) + ':</b><br/>'; }
                messageResult = messageResult + _.str.escapeHTML(message) + '</div>'; $acquirerForm.append(messageResult);
            }
        }, hideError: function () { this.$('#payment_error').remove(); }, getAcquirerIdFromRadio: function (element) { return $(element).data('acquirer-id'); }, getFormData: function ($form) { var unindexed_array = $form.serializeArray(); var indexed_array = {}; $.map(unindexed_array, function (n, i) { indexed_array[n.name] = n.value; }); return indexed_array; }, isFormPaymentRadio: function (element) { return $(element).data('form-payment') === 'True'; }, isNewPaymentRadio: function (element) { return $(element).data('s2s-payment') === 'True'; }, updateNewPaymentDisplayStatus: function () {
            var checked_radio = this.$('input[type="radio"]:checked'); this.$('[id*="o_payment_add_token_acq_"]').addClass('d-none'); this.$('[id*="o_payment_form_acq_"]').addClass('d-none'); if (checked_radio.length !== 1) { return; }
            checked_radio = checked_radio[0]; var acquirer_id = this.getAcquirerIdFromRadio(checked_radio); if (this.isNewPaymentRadio(checked_radio)) { this.$('#o_payment_add_token_acq_' + acquirer_id).removeClass('d-none'); }
            else if (this.isFormPaymentRadio(checked_radio)) { this.$('#o_payment_form_acq_' + acquirer_id).removeClass('d-none'); }
        }, disableButton: function (button) { $("body").block({ overlayCSS: { backgroundColor: "#000", opacity: 0, zIndex: 1050 }, message: false }); $(button).attr('disabled', true); $(button).children('.fa-lock').removeClass('fa-lock'); $(button).prepend('<span class="o_loader"><i class="fa fa-refresh fa-spin"></i>&nbsp;</span>'); }, enableButton: function (button) { $('body').unblock(); $(button).attr('disabled', false); $(button).children('.fa').addClass('fa-lock'); $(button).find('span.o_loader').remove(); }, _parseError: function (e) {
            if (e.message.data.arguments[1]) { return e.message.data.arguments[0] + e.message.data.arguments[1]; }
            return e.message.data.arguments[0];
        }, _adaptPayButton: function () { var $payButton = $("#o_payment_form_pay"); var disabledReasons = $payButton.data('disabled_reasons') || {}; $payButton.prop('disabled', _.contains(disabledReasons, true)); }, payEvent: function (ev) {
            ev.preventDefault(); var form = this.el; var checked_radio = this.$('input[type="radio"]:checked'); var self = this; if (ev.type === 'submit') { var button = $(ev.target).find('*[type="submit"]')[0] } else { var button = ev.target; }
            if (checked_radio.length === 1) {
                checked_radio = checked_radio[0]; var acquirer_id = this.getAcquirerIdFromRadio(checked_radio); var acquirer_form = false; if (this.isNewPaymentRadio(checked_radio)) { acquirer_form = this.$('#o_payment_add_token_acq_' + acquirer_id); } else { acquirer_form = this.$('#o_payment_form_acq_' + acquirer_id); }
                var inputs_form = $('input', acquirer_form); var ds = $('input[name="data_set"]', acquirer_form)[0]; if (this.isNewPaymentRadio(checked_radio)) {
                    if (this.options.partnerId === undefined) { console.warn('payment_form: unset partner_id when adding new token; things could go wrong'); }
                    var form_data = this.getFormData(inputs_form); var wrong_input = false; inputs_form.toArray().forEach(function (element) {
                        if ($(element).attr('type') == 'hidden') { return true; }
                        $(element).closest('div.form-group').removeClass('o_has_error').find('.form-control, .custom-select').removeClass('is-invalid'); $(element).siblings(".o_invalid_field").remove(); $(element).trigger("focusout"); if (element.dataset.isRequired && element.value.length === 0) { $(element).closest('div.form-group').addClass('o_has_error').find('.form-control, .custom-select').addClass('is-invalid'); $(element).closest('div.form-group').append('<div style="color: red" class="o_invalid_field" aria-invalid="true">' + _.str.escapeHTML("The value is invalid.") + '</div>'); wrong_input = true; }
                        else if ($(element).closest('div.form-group').hasClass('o_has_error')) { wrong_input = true; $(element).closest('div.form-group').append('<div style="color: red" class="o_invalid_field" aria-invalid="true">' + _.str.escapeHTML("The value is invalid.") + '</div>'); }
                    }); if (wrong_input) { return; }
                    this.disableButton(button); return this._rpc({ route: ds.dataset.createRoute, params: form_data, }).then(function (data) {
                        if (data.result) {
                            if (data['3d_secure'] !== false) { $("body").html(data['3d_secure']); }
                            else { checked_radio.value = data.id; form.submit(); return new Promise(function () { }); }
                        }
                        else { if (data.error) { self.displayError('', data.error); } else { self.displayError(_t('Server Error'), _t('e.g. Your credit card details are wrong. Please verify.')); } }
                        self.enableButton(button);
                    }).guardedCatch(function (error) {
                        error.event.preventDefault(); self.enableButton(button); self.displayError(_t('Server Error'), _t("We are not able to add your payment method at the moment.") +
                            self._parseError(error));
                    });
                }
                else if (this.isFormPaymentRadio(checked_radio)) {
                    this.disableButton(button); var $tx_url = this.$el.find('input[name="prepare_tx_url"]'); if ($tx_url.length === 1) {
                        var form_save_token = acquirer_form.find('input[name="o_payment_form_save_token"]').prop('checked'); return this._rpc({ route: $tx_url[0].value, params: { 'acquirer_id': parseInt(acquirer_id), 'save_token': form_save_token, 'access_token': self.options.accessToken, 'success_url': self.options.successUrl, 'error_url': self.options.errorUrl, 'callback_method': self.options.callbackMethod, 'order_id': self.options.orderId, 'invoice_id': self.options.invoiceId, }, }).then(function (result) {
                            if (result) { var newForm = document.createElement('form'); newForm.setAttribute("method", self._get_redirect_form_method()); newForm.setAttribute("provider", checked_radio.dataset.provider); newForm.hidden = true; newForm.innerHTML = result; var action_url = $(newForm).find('input[name="data_set"]').data('actionUrl'); newForm.setAttribute("action", action_url); $(document.getElementsByTagName('body')[0]).append(newForm); $(newForm).find('input[data-remove-me]').remove(); if (action_url) { newForm.submit(); return new Promise(function () { }); } }
                            else { self.displayError(_t('Server Error'), _t("We are not able to redirect you to the payment form.")); self.enableButton(button); }
                        }).guardedCatch(function (error) {
                            error.event.preventDefault(); self.displayError(_t('Server Error'), _t("We are not able to redirect you to the payment form.") + " " +
                                self._parseError(error)); self.enableButton(button);
                        });
                    }
                    else { this.displayError(_t("Cannot setup the payment"), _t("We're unable to process your payment.")); self.enableButton(button); }
                }
                else { this.disableButton(button); form.submit(); return new Promise(function () { }); }
            }
            else { this.displayError(_t('No payment method selected'), _t('Please select a payment method.')); this.enableButton(button); }
        }, _get_redirect_form_method: function () { return "post"; }, addPmEvent: function (ev) {
            ev.stopPropagation(); ev.preventDefault(); var checked_radio = this.$('input[type="radio"]:checked'); var self = this; if (ev.type === 'submit') { var button = $(ev.target).find('*[type="submit"]')[0] } else { var button = ev.target; }
            if (checked_radio.length === 1 && this.isNewPaymentRadio(checked_radio[0])) {
                checked_radio = checked_radio[0]; var acquirer_id = this.getAcquirerIdFromRadio(checked_radio); var acquirer_form = this.$('#o_payment_add_token_acq_' + acquirer_id); var inputs_form = $('input', acquirer_form); var form_data = this.getFormData(inputs_form); var ds = $('input[name="data_set"]', acquirer_form)[0]; var wrong_input = false; inputs_form.toArray().forEach(function (element) {
                    if ($(element).attr('type') == 'hidden') { return true; }
                    $(element).closest('div.form-group').removeClass('o_has_error').find('.form-control, .custom-select').removeClass('is-invalid'); $(element).siblings(".o_invalid_field").remove(); $(element).trigger("focusout"); if (element.dataset.isRequired && element.value.length === 0) { $(element).closest('div.form-group').addClass('o_has_error').find('.form-control, .custom-select').addClass('is-invalid'); var message = '<div style="color: red" class="o_invalid_field" aria-invalid="true">' + _.str.escapeHTML("The value is invalid.") + '</div>'; $(element).closest('div.form-group').append(message); wrong_input = true; }
                    else if ($(element).closest('div.form-group').hasClass('o_has_error')) { wrong_input = true; var message = '<div style="color: red" class="o_invalid_field" aria-invalid="true">' + _.str.escapeHTML("The value is invalid.") + '</div>'; $(element).closest('div.form-group').append(message); }
                }); if (wrong_input) { return; }
                $(button).attr('disabled', true); $(button).children('.fa-plus-circle').removeClass('fa-plus-circle'); $(button).prepend('<span class="o_loader"><i class="fa fa-refresh fa-spin"></i>&nbsp;</span>'); this._rpc({ route: ds.dataset.createRoute, params: form_data, }).then(function (data) {
                    if (data.result) {
                        if (data['3d_secure'] !== false) { $("body").html(data['3d_secure']); }
                        else {
                            if (form_data.return_url) { window.location = form_data.return_url; }
                            else { window.location.reload(); }
                        }
                    }
                    else { if (data.error) { self.displayError('', data.error); } else { self.displayError(_t('Server Error'), _t('e.g. Your credit card details are wrong. Please verify.')); } }
                    $(button).attr('disabled', false); $(button).children('.fa').addClass('fa-plus-circle'); $(button).find('span.o_loader').remove();
                }).guardedCatch(function (error) {
                    error.event.preventDefault(); $(button).attr('disabled', false); $(button).children('.fa').addClass('fa-plus-circle'); $(button).find('span.o_loader').remove(); self.displayError(_t('Server error'), _t("We are not able to add your payment method at the moment.") +
                        self._parseError(error));
                });
            }
            else { this.displayError(_t('No payment method selected'), _t('Please select the option to add a new payment method.')); }
        }, onSubmit: function (ev) {
            ev.stopPropagation(); ev.preventDefault(); var button = $(ev.target).find('*[type="submit"]')[0]
            if (button.id === 'o_payment_form_pay') { return this.payEvent(ev); } else if (button.id === 'o_payment_form_add_pm') { return this.addPmEvent(ev); }
            return;
        }, deletePmEvent: function (ev) {
            ev.stopPropagation(); ev.preventDefault(); var self = this; var pm_id = parseInt(ev.currentTarget.value); var tokenDelete = function () { self._rpc({ model: 'payment.token', method: 'unlink', args: [pm_id], }).then(function (result) { if (result === true) { ev.target.closest('div').remove(); } }, function () { self.displayError(_t('Server Error'), _t("We are not able to delete your payment method at the moment.")); }); }; this._rpc({ model: 'payment.token', method: 'get_linked_records', args: [pm_id], }).then(function (result) {
                if (result[pm_id].length > 0) { var content = ''; result[pm_id].forEach(function (sub) { content += '<p><a href="' + sub.url + '" title="' + sub.description + '">' + sub.name + '</a></p>'; }); content = $('<div>').html('<p>' + _t('This card is currently linked to the following records:') + '</p>' + content); new Dialog(self, { title: _t('Warning!'), size: 'medium', $content: content, buttons: [{ text: _t('Confirm Deletion'), classes: 'btn-primary', close: true, click: tokenDelete }, { text: _t('Cancel'), close: true }] }).open(); }
                else { tokenDelete(); }
            }, function (err, event) { self.displayError(_t('Server Error'), _t("We are not able to delete your payment method at the moment.") + err.data.message); });
        }, onClickMorePaymentIcon: function (ev) { ev.preventDefault(); ev.stopPropagation(); var $listItems = $(ev.currentTarget).parents('ul').children('li'); var $moreItem = $(ev.currentTarget).parents('li'); $listItems.removeClass('d-none'); $moreItem.addClass('d-none'); }, radioClickEvent: function (ev) { $(ev.currentTarget).find('input[type="radio"]').prop("checked", true); this.updateNewPaymentDisplayStatus(); },
    }); return publicWidget.registry.PaymentForm;
});;

/* /payment/static/src/js/payment_processing.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('payment.processing', function (require) {
    'use strict'; var publicWidget = require('web.public.widget'); var ajax = require('web.ajax'); var core = require('web.core'); var _t = core._t; $.blockUI.defaults.css.border = '0'; $.blockUI.defaults.css["background-color"] = ''; $.blockUI.defaults.overlayCSS["opacity"] = '0.9'; publicWidget.registry.PaymentProcessing = publicWidget.Widget.extend({
        selector: '.o_payment_processing', xmlDependencies: ['/payment/static/src/xml/payment_processing.xml'], _pollCount: 0, start: function () { this.displayLoading(); this.poll(); return this._super.apply(this, arguments); }, startPolling: function () {
            var timeout = 3000; if (this._pollCount >= 10 && this._pollCount < 20) { timeout = 10000; }
            else if (this._pollCount >= 20) { timeout = 30000; }
            setTimeout(this.poll.bind(this), timeout); this._pollCount++;
        }, poll: function () {
            var self = this; ajax.jsonRpc('/payment/process/poll', 'call', {}).then(function (data) {
                if (data.success === true) { self.processPolledData(data.transactions); }
                else { switch (data.error) { case "tx_process_retry": break; case "no_tx_found": self.displayContent("payment.no_tx_found", {}); break; default: self.displayContent("payment.exception", { exception_msg: data.error }); break; } }
                self.startPolling();
            }).guardedCatch(function () { self.displayContent("payment.rpc_error", {}); self.startPolling(); });
        }, processPolledData: function (transactions) {
            var render_values = { 'tx_draft': [], 'tx_pending': [], 'tx_authorized': [], 'tx_done': [], 'tx_cancel': [], 'tx_error': [], }; if (transactions.length > 0 && ['transfer', 'sepa_direct_debit'].indexOf(transactions[0].acquirer_provider) >= 0) { window.location = transactions[0].return_url; return; }
            transactions.forEach(function (tx) { var key = 'tx_' + tx.state; if (key in render_values) { render_values[key].push(tx); } }); function countTxInState(states) {
                var nbTx = 0; for (var prop in render_values) { if (states.indexOf(prop) > -1 && render_values.hasOwnProperty(prop)) { nbTx += render_values[prop].length; } }
                return nbTx;
            }
            if (render_values['tx_done'].length === 1 && render_values['tx_done'][0].is_processed) { window.location = render_values['tx_done'][0].return_url; return; }
            if (countTxInState(['tx_done', 'tx_error', 'tx_pending', 'tx_authorized']) === 1) { var tx = render_values['tx_authorized'][0] || render_values['tx_error'][0]; if (tx) { window.location = tx.return_url; return; } }
            this.displayContent("payment.display_tx_list", render_values);
        }, displayContent: function (xmlid, render_values) { var html = core.qweb.render(xmlid, render_values); $.unblockUI(); this.$el.find('.o_payment_processing_content').html(html); }, displayLoading: function () { var msg = _t("We are processing your payment, please wait ..."); $.blockUI({ 'message': '<h2 class="text-white"><img src="/web/static/src/img/spin.png" class="fa-pulse"/>' + '    <br />' + msg + '</h2>' }); },
    });
});;

/* /sale/static/src/js/sale_portal_sidebar.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('sale.SalePortalSidebar', function (require) {
    'use strict'; var publicWidget = require('web.public.widget'); var PortalSidebar = require('portal.PortalSidebar'); publicWidget.registry.SalePortalSidebar = PortalSidebar.extend({
        selector: '.o_portal_sale_sidebar', init: function (parent, options) { this._super.apply(this, arguments); this.authorizedTextTag = ['em', 'b', 'i', 'u']; this.spyWatched = $('body[data-target=".navspy"]'); }, start: function () {
            var def = this._super.apply(this, arguments); var $spyWatcheElement = this.$el.find('[data-id="portal_sidebar"]'); this._setElementId($spyWatcheElement); this._generateMenu(); if ($.bbq.getState('allow_payment') === 'yes' && this.$('#o_sale_portal_paynow').length) { this.$('#o_sale_portal_paynow').trigger('click'); $.bbq.removeState('allow_payment'); }
            return def;
        }, _setElementId: function (prefix, $el) { var id = _.uniqueId(prefix); this.spyWatched.find($el).attr('id', id); return id; }, _generateMenu: function () {
            var self = this, lastLI = false, lastUL = null, $bsSidenav = this.$el.find('.bs-sidenav'); $("#quote_content [id^=quote_header_], #quote_content [id^=quote_]", this.spyWatched).attr("id", ""); _.each(this.spyWatched.find("#quote_content h2, #quote_content h3"), function (el) {
                var id, text; switch (el.tagName.toLowerCase()) {
                    case "h2": id = self._setElementId('quote_header_', el); text = self._extractText($(el)); if (!text) { break; }
                        lastLI = $("<li class='nav-item'>").append($('<a class="nav-link" style="max-width: 200px;" href="#' + id + '"/>').text(text)).appendTo($bsSidenav); lastUL = false; break; case "h3": id = self._setElementId('quote_', el); text = self._extractText($(el)); if (!text) { break; }
                        if (lastLI) {
                            if (!lastUL) { lastUL = $("<ul class='nav flex-column'>").appendTo(lastLI); }
                            $("<li class='nav-item'>").append($('<a class="nav-link" style="max-width: 200px;" href="#' + id + '"/>').text(text)).appendTo(lastUL);
                        }
                        break;
                }
                el.setAttribute('data-anchor', true);
            }); this.trigger_up('widgets_start_request', { $target: $bsSidenav });
        }, _extractText: function ($node) { var self = this; var rawText = []; _.each($node.contents(), function (el) { var current = $(el); if ($.trim(current.text())) { var tagName = current.prop("tagName"); if (_.isUndefined(tagName) || (!_.isUndefined(tagName) && _.contains(self.authorizedTextTag, tagName.toLowerCase()))) { rawText.push($.trim(current.text())); } } }); return rawText.join(' '); },
    });
});;

/* /sale_management/static/src/js/sale_management.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('sale_management.sale_management', function (require) {
    'use strict'; var publicWidget = require('web.public.widget'); publicWidget.registry.SaleUpdateLineButton = publicWidget.Widget.extend({
        selector: '.o_portal_sale_sidebar', events: { 'click a.js_update_line_json': '_onClick', 'click a.js_add_optional_products': '_onClickOptionalProduct', 'change .js_quantity': '_onChangeQuantity' }, async start() { await this._super(...arguments); this.orderDetail = this.$el.find('table#sales_order_table').data(); this.elems = this._getUpdatableElements(); }, _onChangeQuantity(ev) { ev.preventDefault(); let self = this, $target = $(ev.currentTarget), quantity = parseInt($target.val()); this._callUpdateLineRoute(self.orderDetail.orderId, { 'line_id': $target.data('lineId'), 'input_quantity': quantity >= 0 ? quantity : false, 'access_token': self.orderDetail.token }).then((data) => { self._updateOrderLineValues($target.closest('tr'), data); self._updateOrderValues(data); }); }, _onClick(ev) {
            ev.preventDefault(); let self = this, $target = $(ev.currentTarget); this._callUpdateLineRoute(self.orderDetail.orderId, { 'line_id': $target.data('lineId'), 'remove': $target.data('remove'), 'unlink': $target.data('unlink'), 'access_token': self.orderDetail.token }).then((data) => {
                var $saleTemplate = $(data['sale_template']); if ($saleTemplate.length && data['unlink']) { self.$('#portal_sale_content').html($saleTemplate); self.elems = self._getUpdatableElements(); }
                self._updateOrderLineValues($target.closest('tr'), data); self._updateOrderValues(data);
            });
        }, _onClickOptionalProduct(ev) { ev.preventDefault(); let self = this, $target = $(ev.currentTarget); $target.css('pointer-events', 'none'); this._rpc({ route: "/my/orders/" + self.orderDetail.orderId + "/add_option/" + $target.data('optionId'), params: { access_token: self.orderDetail.token } }).then((data) => { if (data) { self.$('#portal_sale_content').html($(data['sale_template'])); self.elems = self._getUpdatableElements(); self._updateOrderValues(data); } }); }, _callUpdateLineRoute(order_id, params) { return this._rpc({ route: "/my/orders/" + order_id + "/update_line_dict", params: params, }); }, _updateOrderLineValues($orderLine, data) {
            let linePriceTotal = data.order_line_price_total, linePriceSubTotal = data.order_line_price_subtotal, $linePriceTotal = $orderLine.find('.oe_order_line_price_total .oe_currency_value'), $linePriceSubTotal = $orderLine.find('.oe_order_line_price_subtotal .oe_currency_value'); if (!$linePriceTotal.length && !$linePriceSubTotal.length) { $linePriceTotal = $linePriceSubTotal = $orderLine.find('.oe_currency_value').last(); }
            $orderLine.find('.js_quantity').val(data.order_line_product_uom_qty); if ($linePriceTotal.length && linePriceTotal !== undefined) { $linePriceTotal.text(linePriceTotal); }
            if ($linePriceSubTotal.length && linePriceSubTotal !== undefined) { $linePriceSubTotal.text(linePriceSubTotal); }
        }, _updateOrderValues(data) {
            let orderAmountTotal = data.order_amount_total, orderAmountUntaxed = data.order_amount_untaxed, orderAmountUndiscounted = data.order_amount_undiscounted, $orderTotalsTable = $(data.order_totals_table); if (orderAmountUntaxed !== undefined) { this.elems.$orderAmountUntaxed.text(orderAmountUntaxed); }
            if (orderAmountTotal !== undefined) { this.elems.$orderAmountTotal.text(orderAmountTotal); }
            if (orderAmountUndiscounted !== undefined) { this.elems.$orderAmountUndiscounted.text(orderAmountUndiscounted); }
            if ($orderTotalsTable.length) { this.elems.$orderTotalsTable.find('table').replaceWith($orderTotalsTable); }
        }, _getUpdatableElements() {
            let $orderAmountUntaxed = $('[data-id="total_untaxed"]').find('span, b'), $orderAmountTotal = $('[data-id="total_amount"]').find('span, b'), $orderAmountUndiscounted = $('[data-id="amount_undiscounted"]').find('span, b'); if (!$orderAmountUntaxed.length) { $orderAmountUntaxed = $orderAmountTotal.eq(1); $orderAmountTotal = $orderAmountTotal.eq(0).add($orderAmountTotal.eq(2)); }
            return { $orderAmountUntaxed: $orderAmountUntaxed, $orderAmountTotal: $orderAmountTotal, $orderTotalsTable: $('#total'), $orderAmountUndiscounted: $orderAmountUndiscounted, };
        }
    });
});;

/* /purchase/static/src/js/purchase_datetimepicker.js defined in bundle 'web.assets_frontend_lazy' */
$(function () { $('input.o-purchase-datetimepicker').datetimepicker(); $('input.o-purchase-datetimepicker').on("hide.datetimepicker", function () { $(this).parents('form').submit(); }); });

/* /google_recaptcha/static/src/js/recaptcha.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('google_recaptcha.ReCaptchaV3', function (require) {
    "use strict"; const ajax = require('web.ajax'); const Class = require('web.Class'); const core = require('web.core'); const _t = core._t; const ReCaptcha = Class.extend({
        init: function () { this._publicKey = odoo.reCaptchaPublicKey; }, loadLibs: function () {
            if (this._publicKey) { this._recaptchaReady = ajax.loadJS(`https://www.recaptcha.net/recaptcha/api.js?render=${this._publicKey}`).then(() => new Promise(resolve => window.grecaptcha.ready(() => resolve()))); return this._recaptchaReady.then(() => !!document.querySelector('.grecaptcha-badge')); }
            return false;
        }, getToken: async function (action) {
            if (!this._publicKey) { return { message: _t("No recaptcha site key set."), }; }
            await this._recaptchaReady; try { return { token: await window.grecaptcha.execute(this._publicKey, { action: action }) }; } catch (e) { return { error: _t("The recaptcha site key is invalid."), }; }
        },
    }); return { ReCaptcha: ReCaptcha, };
});;

/* /website_sale_pricelist_offer/static/src/js/pricelist.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website_sale_pricelist_offer.pricelist', function (require) {
    'use strict'; var publicWidget = require('web.public.widget'); var ajax = require('web.ajax'); publicWidget.registry.WebsiteSale.include({
        _setUrlHash: function ($parent) {
            this._super.apply(this, arguments); var self = this; var qty = $parent.find('input[name="add_qty"]').val(); var combination = this.getSelectedVariantValues($parent); var parentCombination = $parent.find('ul[data-attribute_exclusions]').data('attribute_exclusions').parent_combination; var productTemplateId = parseInt($parent.find('.product_template_id').val()); var pricelist_table = $('#pricelist_table'); self._checkExclusions($parent, combination); return ajax.jsonRpc(this._getUri('/sale/get_combination_info'), 'call', { 'product_template_id': productTemplateId, 'product_id': this._getProductId($parent), 'combination': combination, 'add_qty': parseInt(qty), 'pricelist_id': this.pricelistId || false, 'parent_combination': parentCombination, }).then(function (combinationData) {
                pricelist_table.empty(); if (combinationData.price_list) {
                    pricelist_table.append("<thead><tr><th>Quantity</th><th>Price</th></tr></thead>"); var content = "<tbody>"
                    $.each(combinationData.price_list, function (index, value) {
                        console.log(index, value); content += "<tr>"
                        content += "<td>" + value[1] + "</td>"
                        content += "<td>" + value[2] + "</td>"
                        content += "</tr>"
                    }); content += "</tbody>"
                    pricelist_table.append(content);
                }
            });
        },
    });
});;

/* /website_product_inquiry/static/src/js/carton_inquiry.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website_product_inquiry.carton_inquiry', function (require) {
    'use strict'; var publicWidget = require('web.public.widget'); publicWidget.registry.carton_inquiry = publicWidget.Widget.extend({
        'selector': '.oe_website_sale', events: { 'click .carton_quantity_inquiry_modal': '_onOpenCartonQuantityInquiryModal', 'click .carton-inquiry-submit': '_onSubmitCartonQuantityInquiryModal', }, _onOpenCartonQuantityInquiryModal: function (event) {
            var $card = $(event.currentTarget).closest('#carton_quantity_inquiry_modal'); $('input[name="contact_name"]').val(''); $('input[name="phone"]').val(''); $('input[name="quantity"]').val('1'); $('select#customer_type').val(''); $('.error_carton_inquiry').addClass('d-none'); $('input[name="contact_name"]').removeClass('is-invalid'); $('input[name="phone"]').removeClass('is-invalid'); $('input[name="quantity"]').removeClass('is-invalid'); var user_id = $('input[name="user_id"]').val(); var product_id = $(event.currentTarget).parent('.o_wsale_product_information, .js_main_product').find("input[name='product_id']").val(); if (product_id) { $('input[name="carton_product_id"]').val(product_id); }
            if (user_id != '4') { $('input[name="contact_name"]').val($('input[name="partner_name"]').val()); $('input[name="phone"]').val($('input[name="partner_contact"]').val()); }
        }, _onSubmitCartonQuantityInquiryModal: function (event) {
            var $card = $(event.currentTarget).closest('#carton_quantity_inquiry_modal'); var contact_name = $card.find('input[name="contact_name"]').val(); var phone = $card.find('input[name="phone"]').val(); var quantity = $card.find('input[name="quantity"]').val(); var product_id = $('input[name="carton_product_id"]').val(); var customer_type = $card.find('select[name="customer_type"]').val(); $card.find('input[name="contact_name"]').removeClass('is-invalid'); $card.find('input[name="phone"]').removeClass('is-invalid'); $card.find('input[name="quantity"]').removeClass('is-invalid'); if (!contact_name || !phone || !quantity) {
                $('.error_carton_inquiry').removeClass('d-none'); if (!contact_name) { $card.find('input[name="contact_name"]').addClass('is-invalid'); }
                if (!phone) { $card.find('input[name="phone"]').addClass('is-invalid'); }
                if (!quantity) { $card.find('input[name="quantity"]').addClass('is-invalid'); }
                return 0
            }
            this._rpc({ route: '/update/carton-inquiry', params: { contact_name: contact_name, phone: phone, customer_type: customer_type, quantity: quantity, product_id: product_id, }, }).then(function (data) { $('#carton_quantity_inquiry_modal').modal('hide'); $('#carton_quantity_inquiry_modal_sucess').modal('show'); });
        },
    });
});;

/* /project/static/src/js/portal_rating.js defined in bundle 'web.assets_frontend_lazy' */
odoo.define('website_rating_project.rating', function (require) { 'use strict'; var time = require('web.time'); var publicWidget = require('web.public.widget'); publicWidget.registry.ProjectRatingImage = publicWidget.Widget.extend({ selector: '.o_portal_project_rating .o_rating_image', start: function () { this.$el.popover({ placement: 'bottom', trigger: 'hover', html: true, content: function () { var $elem = $(this); var id = $elem.data('id'); var ratingDate = $elem.data('rating-date'); var baseDate = time.auto_str_to_date(ratingDate); var duration = moment(baseDate).fromNow(); var $rating = $('#rating_' + id); $rating.find('.rating_timeduration').text(duration); return $rating.html(); }, }); return this._super.apply(this, arguments); }, }); });